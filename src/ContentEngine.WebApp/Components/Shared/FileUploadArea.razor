@using Microsoft.AspNetCore.Components.Forms
@inject ISnackbar Snackbar

<MudFileUpload T="IBrowserFile"
               @ref="fileUpload"
               FilesChanged="OnFilesChangedInternal"
               Accept="@AcceptedTypes"
               MaximumFileCount="@MaxFileCount"
               Disabled="@IsProcessing"
               Hidden="@false"
               InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
               InputStyle="opacity:0"
               Class="mud-width-full mud-height-full"
               @ondrop="@ClearDragClass"
               @ondragenter="@SetDragClass"
               @ondragleave="@ClearDragClass"
               @ondragend="@ClearDragClass">
    <ActivatorContent>
        <MudPaper Height="@Height" 
                  Outlined="true" 
                  Class="@GetDragClass()">
            @if (IsProcessing)
            {
                <div class="d-flex flex-column align-center justify-center mud-width-full mud-height-full">
                    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true"/>
                    <MudText Typo="Typo.h6" Class="mt-3">@ProcessingText</MudText>
                    @if (!string.IsNullOrEmpty(CurrentFileName))
                    {
                        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mt-1">
                            当前: @CurrentFileName
                        </MudText>
                    }
                    @if (ShowProgress && TotalCount > 0)
                    {
                        <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mt-1">
                            进度: @ProcessedCount / @TotalCount
                        </MudText>
                    }
                </div>
            }
            else
            {
                <div class="d-flex flex-column align-center justify-center mud-width-full mud-height-full">
                    <MudIcon Icon="@UploadIcon" Style="font-size: 3rem;" Color="Color.Primary"/>
                    <MudText Typo="Typo.h6" Class="mt-2">@Title</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                        @Description
                    </MudText>
                    @if (!string.IsNullOrEmpty(SupportedFormats))
                    {
                        <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mt-2">
                            @SupportedFormats
                        </MudText>
                    }
                    @if (MaxFileSizeMB > 0)
                    {
                        <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mt-1">
                            最大文件大小: @MaxFileSizeMB MB
                        </MudText>
                    }
                </div>
            }
        </MudPaper>
    </ActivatorContent>
</MudFileUpload>

@code {
    [Parameter] public string AcceptedTypes { get; set; } = "*";
    [Parameter] public int MaxFileCount { get; set; } = 1;
    [Parameter] public bool IsProcessing { get; set; } = false;
    [Parameter] public string Height { get; set; } = "200px";
    [Parameter] public string ProcessingText { get; set; } = "正在处理文件...";
    [Parameter] public string CurrentFileName { get; set; } = string.Empty;
    [Parameter] public bool ShowProgress { get; set; } = false;
    [Parameter] public int ProcessedCount { get; set; } = 0;
    [Parameter] public int TotalCount { get; set; } = 0;
    [Parameter] public string UploadIcon { get; set; } = Icons.Material.Filled.CloudUpload;
    [Parameter] public string Title { get; set; } = "上传文件";
    [Parameter] public string Description { get; set; } = "拖放文件到此处，或点击选择文件";
    [Parameter] public string SupportedFormats { get; set; } = string.Empty;
    [Parameter] public EventCallback<IBrowserFile> FilesChanged { get; set; }
    
    // 新增的校验参数
    [Parameter] public long MaxFileSizeMB { get; set; } = 0; // 0 表示不限制
    [Parameter] public List<string> AllowedExtensions { get; set; } = new();
    [Parameter] public List<string> AllowedMimeTypes { get; set; } = new();
    [Parameter] public bool ShowValidationErrors { get; set; } = true;
    [Parameter] public EventCallback<string> OnValidationError { get; set; }

    private MudFileUpload<IBrowserFile> fileUpload = null!;
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mud-width-full mud-height-full cursor-pointer file-upload-area";
    private string dragClass = DefaultDragClass;

    private async Task OnFilesChangedInternal(IBrowserFile file)
    {
        ClearDragClass();
        
        // 如果文件为空，直接返回（这是正常情况，比如取消选择）
        if (file == null)
        {
            return;
        }
        
        try
        {
            // 执行文件校验
            var validationResult = ValidateFile(file);
            if (!validationResult.IsValid)
            {
                if (ShowValidationErrors && Snackbar != null)
                {
                    Snackbar.Add(validationResult.ErrorMessage, Severity.Error);
                }
                if (OnValidationError.HasDelegate)
                {
                    await OnValidationError.InvokeAsync(validationResult.ErrorMessage);
                }
                return;
            }
            
            await FilesChanged.InvokeAsync(file);
        }
        catch (Exception ex)
        {
            if (ShowValidationErrors && Snackbar != null)
            {
                Snackbar.Add($"文件处理失败: {ex.Message}", Severity.Error);
            }
            if (OnValidationError.HasDelegate)
            {
                await OnValidationError.InvokeAsync($"文件处理失败: {ex.Message}");
            }
        }
    }

    private (bool IsValid, string ErrorMessage) ValidateFile(IBrowserFile file)
    {
        // 检查文件大小
        if (MaxFileSizeMB > 0)
        {
            var maxSizeBytes = MaxFileSizeMB * 1024 * 1024;
            if (file.Size > maxSizeBytes)
            {
                return (false, $"文件 {file.Name} 大小超过限制 ({MaxFileSizeMB} MB)");
            }
        }

        // 检查文件扩展名
        if (AllowedExtensions != null && AllowedExtensions.Any())
        {
            if (string.IsNullOrEmpty(file.Name))
            {
                return (false, "文件名不能为空");
            }
            
            var fileExtension = Path.GetExtension(file.Name)?.ToLowerInvariant() ?? string.Empty;
            if (!AllowedExtensions.Contains(fileExtension))
            {
                var allowedExts = string.Join(", ", AllowedExtensions);
                return (false, $"不支持的文件类型 {fileExtension}。支持的类型: {allowedExts}");
            }
        }

        // 检查 MIME 类型
        if (AllowedMimeTypes != null && AllowedMimeTypes.Any())
        {
            if (string.IsNullOrEmpty(file.ContentType))
            {
                return (false, "无法确定文件类型");
            }
            
            if (!AllowedMimeTypes.Contains(file.ContentType))
            {
                var allowedMimes = string.Join(", ", AllowedMimeTypes);
                return (false, $"不支持的文件类型 {file.ContentType}。支持的类型: {allowedMimes}");
            }
        }

        return (true, string.Empty);
    }

    private void SetDragClass()
    {
        dragClass = $"{DefaultDragClass} mud-border-primary";
        StateHasChanged();
    }

    private void ClearDragClass()
    {
        dragClass = DefaultDragClass;
        StateHasChanged();
    }

    private string GetDragClass()
    {
        return dragClass;
    }

    public async Task ClearAsync()
    {
        await fileUpload.ClearAsync();
    }

    /// <summary>
    /// 根据常见文件类型预设配置
    /// </summary>
    public static class FileTypePresets
    {
        public static readonly List<string> DocumentExtensions = new() { ".pdf", ".doc", ".docx", ".txt", ".md", ".rtf" };
        public static readonly List<string> SpreadsheetExtensions = new() { ".xlsx", ".xls", ".csv" };
        public static readonly List<string> PresentationExtensions = new() { ".pptx", ".ppt" };
        public static readonly List<string> ImageExtensions = new() { ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".webp" };
        public static readonly List<string> ArchiveExtensions = new() { ".zip", ".rar", ".7z", ".tar", ".gz" };
        
        public static readonly List<string> DocumentMimeTypes = new() 
        { 
            "application/pdf", 
            "application/msword", 
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            "text/plain", 
            "text/markdown",
            "application/rtf"
        };
        
        public static readonly List<string> SpreadsheetMimeTypes = new() 
        { 
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            "application/vnd.ms-excel",
            "text/csv"
        };
    }
}

<style>
    .file-upload-area {
        transition: all 0.2s ease-in-out;
    }

    .file-upload-area:hover {
        border-color: #1976D2 !important;
        background-color: #F3F7FF;
    }

    .file-upload-area.mud-border-primary {
        background-color: #F3F7FF;
    }
</style> 