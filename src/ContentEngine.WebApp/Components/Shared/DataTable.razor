@using ContentEngine.Core.Utils
@using ContentEngine.Core.DataPipeline.Models
@using LiteDB
@using FieldType = ContentEngine.Core.DataPipeline.Models.FieldType
@inject IDialogService DialogService

@if (!Data.Any() && !IsAddingNewRecord)
{
    <MudPaper Class="pa-8 text-center" Elevation="0">
        <MudIcon Icon="@Icons.Material.Filled.TableChart" Size="Size.Large" Color="Color.Secondary" Class="mb-4" />
        <MudText Typo="Typo.h6" GutterBottom="true">@_effectiveConfig.EmptyTitle</MudText>
        <MudText Color="Color.Secondary">@_effectiveConfig.EmptyMessage</MudText>
    </MudPaper>
}
else
{
    <MudPaper Elevation="1" Class="@($"rounded-lg {Class}")">
        <MudTable Items="@GetDisplayDataWithNewRecord()" T="BsonDocument"
                  Hover="true"
                  Striped="true"
                  FixedHeader="true"
                  Height="@_effectiveConfig.Height"
                  Bordered="false">
            <HeaderContent>
                @if (_effectiveConfig.ShowIdColumn)
                {
                    <MudTh Style="width: 80px;">
                        @if (_effectiveConfig.IsReadOnly)
                        {
                            <MudTableSortLabel SortBy="@(new Func<BsonDocument, object>(x => x.TryGetValue("_id", out var id) ? id.ToString() : ""))">
                                ID
                            </MudTableSortLabel>
                        }
                        else
                        {
                            @("ID")
                        }
                    </MudTh>
                }
                @if (Schema?.Fields != null)
                {
                    @foreach (var field in Schema.Fields)
                    {
                        <MudTh>
                            @if (_effectiveConfig.IsReadOnly)
                            {
                                <MudTableSortLabel SortBy="@(new Func<BsonDocument, object>(x => BsonFormUtils.GetDisplayValue(x, field.Name)))">
                                    @field.Name
                                    @if (field.IsRequired)
                                    {
                                        <span class="required-indicator">*</span>
                                    }
                                </MudTableSortLabel>
                            }
                            else
                            {
                                @field.Name
                                @if (field.IsRequired)
                                {
                                    <span class="required-indicator">*</span>
                                }
                            }
                        </MudTh>
                    }
                }
                @if (_effectiveConfig.HasActions)
                {
                    <MudTh Style="@($"width: {GetActionColumnWidth()};")">操作</MudTh>
                }
            </HeaderContent>
            <RowTemplate Context="item">
                @{
                    var itemId = GetDocumentId(item);
                    var isEditing = editingRowId == itemId;
                    var isNewRecord = IsNewRecordDocument(item);
                }
                
                @if (isNewRecord)
                {
                    <!-- 新记录行 -->
                    @if (_effectiveConfig.ShowIdColumn)
                    {
                        <MudTd DataLabel="ID" Class="font-weight-medium new-record-cell">
                            <MudText Typo="Typo.caption" Color="Color.Secondary">新记录</MudText>
                        </MudTd>
                    }
                    @if (Schema?.Fields != null)
                    {
                        @foreach (var field in Schema.Fields)
                        {
                            <MudTd DataLabel="@field.Name" Class="new-record-cell">
                                @RenderNewRecordCell(field)
                            </MudTd>
                        }
                    }
                    @if (_effectiveConfig.HasActions)
                    {
                        <MudTd Class="new-record-cell">
                            <div class="action-buttons">
                                <MudTooltip Text="保存">
                                    <MudIconButton Icon="@Icons.Material.Filled.Save"
                                                  Color="Color.Success"
                                                  Size="Size.Small"
                                                  OnClick="SaveNewRecord"
                                                  Disabled="@IsSavingNewRecord" />
                                </MudTooltip>
                                <MudTooltip Text="取消">
                                    <MudIconButton Icon="@Icons.Material.Filled.Cancel"
                                                  Color="Color.Secondary"
                                                  Size="Size.Small"
                                                  OnClick="CancelNewRecord"
                                                  Disabled="@IsSavingNewRecord" />
                                </MudTooltip>
                                @if (IsSavingNewRecord)
                                {
                                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                }
                            </div>
                        </MudTd>
                    }
                }
                else
                {
                    <!-- 普通数据行 -->
                    @if (_effectiveConfig.ShowIdColumn)
                    {
                        <MudTd DataLabel="ID" Class="font-weight-medium">
                            @GetRecordId(item)
                        </MudTd>
                    }
                    @if (Schema?.Fields != null)
                    {
                        @foreach (var field in Schema.Fields)
                        {
                            <MudTd DataLabel="@field.Name">
                                @if (_effectiveConfig.IsReadOnly)
                                {
                                    <FieldValueRenderer Field="@field" Record="@item" ShowLabel="false" IsCompact="true" />
                                }
                                else if (_effectiveConfig.AllowInlineEdit && isEditing)
                                {
                                    @RenderInlineEditCell(item, field)
                                }
                                else if (_effectiveConfig.AllowInlineEdit && !isEditing)
                                {
                                    <div class="inline-edit-cell" @onclick="() => StartInlineEdit(itemId)">
                                        <FieldValueRenderer Field="@field" Record="@item" ShowLabel="false" IsCompact="true" />
                                        <MudIcon Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Class="edit-hint" />
                                    </div>
                                }
                                else
                                {
                                    @RenderEditableCell(item, field)
                                }
                            </MudTd>
                        }
                    }
                    @if (_effectiveConfig.HasActions)
                    {
                        <MudTd>
                            <div class="action-buttons">
                                @if (_effectiveConfig.IsReadOnly)
                                {
                                    @foreach (var action in _effectiveConfig.Actions)
                                    {
                                        <MudTooltip Text="@action.Tooltip">
                                            <MudIconButton Icon="@action.Icon"
                                                          Color="@action.Color"
                                                          Size="Size.Small"
                                                          OnClick="() => action.Action.Invoke(item)" />
                                        </MudTooltip>
                                    }
                                }
                                else if (isEditing)
                                {
                                    <MudTooltip Text="保存">
                                        <MudIconButton Icon="@Icons.Material.Filled.Save"
                                                      Color="Color.Success"
                                                      Size="Size.Small"
                                                      OnClick="() => SaveInlineEdit()" />
                                    </MudTooltip>
                                    <MudTooltip Text="取消">
                                        <MudIconButton Icon="@Icons.Material.Filled.Cancel"
                                                      Color="Color.Secondary"
                                                      Size="Size.Small"
                                                      OnClick="() => CancelInlineEdit()" />
                                    </MudTooltip>
                                    @foreach (var action in _effectiveConfig.Actions.Where(a => a.ShowInEditMode))
                                    {
                                        <MudTooltip Text="@action.Tooltip">
                                            <MudIconButton Icon="@action.Icon"
                                                          Color="@action.Color"
                                                          Size="Size.Small"
                                                          OnClick="() => action.Action.Invoke(item)" />
                                        </MudTooltip>
                                    }
                                }
                                else if (_effectiveConfig.AllowInlineEdit)
                                {
                                    <MudTooltip Text="编辑">
                                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                                      Color="Color.Primary"
                                                      Size="Size.Small"
                                                      OnClick="() => StartInlineEdit(itemId)" />
                                    </MudTooltip>
                                    @foreach (var action in _effectiveConfig.Actions.Where(a => a.ShowInNormalMode))
                                    {
                                        <MudTooltip Text="@action.Tooltip">
                                            <MudIconButton Icon="@action.Icon"
                                                          Color="@action.Color"
                                                          Size="Size.Small"
                                                          OnClick="() => action.Action.Invoke(item)" />
                                        </MudTooltip>
                                    }
                                }
                                else
                                {
                                    @foreach (var action in _effectiveConfig.Actions)
                                    {
                                        <MudTooltip Text="@action.Tooltip">
                                            <MudIconButton Icon="@action.Icon"
                                                          Color="@action.Color"
                                                          Size="Size.Small"
                                                          OnClick="() => action.Action.Invoke(item)" />
                                        </MudTooltip>
                                    }
                                }
                            </div>
                        </MudTd>
                    }
                }
            </RowTemplate>
            <PagerContent>
                @if (_effectiveConfig.ShowPagination)
                {
                    <MudTablePager PageSizeOptions="new int[]{5, 10, 25, 50}"
                                   HideRowsPerPage="false"
                                   HidePagination="false"
                                   InfoFormat="{first_item}-{last_item} / {all_items}" />
                }
            </PagerContent>
        </MudTable>
    </MudPaper>
}

<!-- 新记录错误消息 -->
@if (IsAddingNewRecord && !string.IsNullOrEmpty(NewRecordErrorMessage))
{
    <MudAlert Severity="Severity.Error" Class="mt-2">
        @NewRecordErrorMessage
    </MudAlert>
}

@if (_effectiveConfig.ShowRowCount && Data.Any())
{
    <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mt-2">
        @if (_effectiveConfig.MaxDisplayRows.HasValue && Data.Count > _effectiveConfig.MaxDisplayRows.Value)
        {
            <span>显示前@(_effectiveConfig.MaxDisplayRows)条记录，共 @Data.Count 条</span>
        }
        else
        {
            <span>共 @Data.Count 条记录</span>
        }
    </MudText>
}

@code {
    // 核心参数
    [Parameter] public SchemaDefinition Schema { get; set; } = null!;
    [Parameter] public List<BsonDocument> Data { get; set; } = new();
    
    // 模式参数 - 简化使用
    [Parameter] public DataTableMode Mode { get; set; } = DataTableMode.ReadOnly;
    
    // 自定义配置 - 高级使用
    [Parameter] public DataTableConfiguration? CustomConfiguration { get; set; }
    
    // 样式控制
    [Parameter] public string Class { get; set; } = "";
    
    // 新记录添加相关参数
    [Parameter] public Dictionary<string, object?>? NewRecordData { get; set; }
    [Parameter] public EventCallback OnNewRecordSave { get; set; }
    [Parameter] public EventCallback OnNewRecordCancel { get; set; }
    [Parameter] public bool IsSavingNewRecord { get; set; } = false;
    [Parameter] public string? NewRecordErrorMessage { get; set; }
    
    // 事件回调
    [Parameter] public EventCallback<BsonDocument> OnRowChanged { get; set; }
    [Parameter] public EventCallback<BsonDocument> OnRowRemoved { get; set; }
    [Parameter] public EventCallback<BsonDocument> OnViewRecord { get; set; }
    [Parameter] public EventCallback<BsonDocument> OnEditRecord { get; set; }
    [Parameter] public EventCallback<BsonDocument> OnDeleteRecord { get; set; }

    // 内部状态
    private string? editingRowId = null;
    private BsonDocument? originalEditingData = null;
    private BsonDocument? editingData = null;
    private DataTableConfiguration _effectiveConfig = null!;
    private BsonDocument? newRecordDocument = null;
    
    // 计算属性
    private bool IsAddingNewRecord => NewRecordData != null;

    protected override void OnParametersSet()
    {
        InitializeConfiguration();
    }

    private void InitializeConfiguration()
    {
        if (CustomConfiguration != null)
        {
            _effectiveConfig = CustomConfiguration;
        }
        else
        {
            _effectiveConfig = Mode switch
            {
                DataTableMode.ReadOnly => DataTableConfiguration.ForReadOnlyMode(this),
                DataTableMode.BatchEdit => DataTableConfiguration.ForBatchEditMode(this),
                DataTableMode.DataExplorer => DataTableConfiguration.ForDataExplorerMode(this),
                DataTableMode.ManualEntry => DataTableConfiguration.ForManualEntryMode(this),
                _ => DataTableConfiguration.ForReadOnlyMode(this)
            };
        }
    }

    private IEnumerable<BsonDocument> GetDisplayData()
    {
        if (_effectiveConfig.MaxDisplayRows.HasValue)
        {
            return Data.Take(_effectiveConfig.MaxDisplayRows.Value);
        }
        return Data;
    }

    private IEnumerable<BsonDocument> GetDisplayDataWithNewRecord()
    {
        var displayData = GetDisplayData().ToList();
        
        if (IsAddingNewRecord)
        {
            // 创建新记录文档标识符
            if (newRecordDocument == null)
            {
                newRecordDocument = new BsonDocument();
                newRecordDocument["_isNewRecord"] = true;
                newRecordDocument["_id"] = "NEW_RECORD";
            }
            displayData.Add(newRecordDocument);
        }
        
        return displayData;
    }

    private bool IsNewRecordDocument(BsonDocument document)
    {
        return document.TryGetValue("_isNewRecord", out var value) && value.AsBoolean;
    }

    private string GetDocumentId(BsonDocument document)
    {
        if (document.TryGetValue("_id", out var id))
        {
            return id.ToString();
        }
        return document.GetHashCode().ToString();
    }

    private string GetRecordId(BsonDocument document)
    {
        if (document.TryGetValue("_id", out var id))
        {
            var idStr = id.ToString();
            return idStr.Length > 8 ? idStr.Substring(0, 8) + "..." : idStr;
        }
        return "未知";
    }

    private string GetActionColumnWidth()
    {
        var actionCount = _effectiveConfig.Actions.Count;
        if (_effectiveConfig.AllowInlineEdit)
        {
            actionCount = Math.Max(actionCount + 1, 2); // +1 for edit button, min 2 for save/cancel
        }
        
        return $"{Math.Max(actionCount * 40, 80)}px";
    }

    private void StartInlineEdit(string documentId)
    {
        var document = Data.FirstOrDefault(d => GetDocumentId(d) == documentId);
        if (document != null)
        {
            editingRowId = documentId;
            originalEditingData = new BsonDocument(document);
            editingData = new BsonDocument(document);
            StateHasChanged();
        }
    }

    private async Task SaveInlineEdit()
    {
        if (editingData != null && originalEditingData != null)
        {
            var originalDocument = Data.FirstOrDefault(d => GetDocumentId(d) == editingRowId);
            if (originalDocument != null)
            {
                originalDocument.Clear();
                foreach (var kvp in editingData)
                {
                    originalDocument[kvp.Key] = kvp.Value;
                }
                await OnRowChanged.InvokeAsync(originalDocument);
            }
        }
        CancelInlineEdit();
    }

    private void CancelInlineEdit()
    {
        editingRowId = null;
        originalEditingData = null;
        editingData = null;
        StateHasChanged();
    }



    private RenderFragment RenderInlineEditCell(BsonDocument rowData, FieldDefinition field) => __builder =>
    {
        var workingData = editingData ?? rowData;
        
        switch (field.Type)
        {
            case FieldType.Text:
                <MudTextField T="string"
                              Value="@GetCellStringValue(workingData, field.Name)"
                              ValueChanged="@(value => SetInlineEditValue(field.Name, new BsonValue(value)))"
                              Variant="Variant.Text"
                              Margin="Margin.None"
                              Class="inline-edit-field" />
                break;

            case FieldType.Number:
                <MudNumericField T="double?"
                                 Value="@GetCellDoubleValue(workingData, field.Name)"
                                 ValueChanged="@(value => SetInlineEditValue(field.Name, value.HasValue ? new BsonValue(value.Value) : BsonValue.Null))"
                                 Variant="Variant.Text"
                                 Margin="Margin.None"
                                 Class="inline-edit-field" />
                break;

            case FieldType.Boolean:
                <MudCheckBox T="bool"
                             Checked="@GetCellBoolValue(workingData, field.Name)"
                             CheckedChanged="@((bool value) => SetInlineEditValue(field.Name, new BsonValue(value)))"
                             Color="Color.Primary"
                             Size="Size.Small" />
                break;

            case FieldType.Date:
                <MudDatePicker Date="@GetCellDateValue(workingData, field.Name)"
                               DateChanged="@(value => SetInlineEditValue(field.Name, value.HasValue ? new BsonValue(value.Value) : BsonValue.Null))"
                               Variant="Variant.Text"
                               Margin="Margin.None"
                               Class="inline-edit-field" />
                break;

            case FieldType.Reference:
                <MudTextField T="string"
                              Value="@GetCellStringValue(workingData, field.Name)"
                              ValueChanged="@(value => SetInlineEditValue(field.Name, new BsonValue(value)))"
                              Variant="Variant.Text"
                              Margin="Margin.None"
                              Class="inline-edit-field" />
                break;

            default:
                <MudTextField T="string"
                              Value="@GetCellStringValue(workingData, field.Name)"
                              ValueChanged="@(value => SetInlineEditValue(field.Name, new BsonValue(value)))"
                              Variant="Variant.Text"
                              Margin="Margin.None"
                              Class="inline-edit-field" />
                break;
        }
    };

    private RenderFragment RenderEditableCell(BsonDocument rowData, FieldDefinition field) => RenderEditableField(field, rowData, false);

    private async Task SetCellValue(BsonDocument rowData, string fieldName, BsonValue value)
    {
        rowData[fieldName] = value;
        await OnRowChanged.InvokeAsync(rowData);
    }

    private void SetInlineEditValue(string fieldName, BsonValue value)
    {
        if (editingData != null)
        {
            editingData[fieldName] = value;
            StateHasChanged();
        }
    }

    private string GetCellStringValue(BsonDocument rowData, string fieldName)
    {
        return rowData.TryGetValue(fieldName, out var bsonValue) && !bsonValue.IsNull ? bsonValue.AsString ?? "" : "";
    }

    private double? GetCellDoubleValue(BsonDocument rowData, string fieldName)
    {
        if (rowData.TryGetValue(fieldName, out var bsonValue) && bsonValue.IsNumber)
        {
            return bsonValue.AsDouble;
        }
        return null;
    }

    private bool GetCellBoolValue(BsonDocument rowData, string fieldName)
    {
        if (rowData.TryGetValue(fieldName, out var bsonValue) && bsonValue.IsBoolean)
        {
            return bsonValue.AsBoolean;
        }
        return false;
    }

    private DateTime? GetCellDateValue(BsonDocument rowData, string fieldName)
    {
        if (rowData.TryGetValue(fieldName, out var bsonValue) && bsonValue.IsDateTime)
        {
            return bsonValue.AsDateTime;
        }
        return null;
    }

    // 通用编辑字段渲染方法
    private RenderFragment RenderEditableField(FieldDefinition field, BsonDocument? rowData = null, bool isNewRecord = false) => __builder =>
    {
        var containerClass = isNewRecord ? "new-record-field-container" : "editable-field-container";
        
        switch (field.Type)
        {
            case FieldType.Text:
                var textValue = isNewRecord ? GetNewRecordValue<string>(field.Name) : GetCellStringValue(rowData!, field.Name);
                <div class="@containerClass">
                    <MudTextField T="string"
                                  Value="@textValue"
                                  ValueChanged="@((string value) => HandleFieldValueChanged(field.Name, value, rowData, isNewRecord))"
                                  Variant="Variant.Text"
                                  Margin="Margin.None"
                                  Required="@field.IsRequired"
                                  Class="inline-edit-field" />
                    @RenderFieldDescription(field)
                </div>
                break;

            case FieldType.Number:
                var numberValue = isNewRecord ? GetNewRecordValue<double?>(field.Name) : GetCellDoubleValue(rowData!, field.Name);
                <div class="@containerClass">
                    <MudNumericField T="double?"
                                     Value="@numberValue"
                                     ValueChanged="@((double? value) => HandleFieldValueChanged(field.Name, value, rowData, isNewRecord))"
                                     Variant="Variant.Text"
                                     Margin="Margin.None"
                                     Required="@field.IsRequired"
                                     Class="inline-edit-field" />
                    @RenderFieldDescription(field)
                </div>
                break;

            case FieldType.Boolean:
                var boolValue = isNewRecord ? GetNewRecordValue<bool>(field.Name) : GetCellBoolValue(rowData!, field.Name);
                <div class="@containerClass">
                    <MudCheckBox T="bool"
                                 Checked="@boolValue"
                                 CheckedChanged="@((bool value) => HandleFieldValueChanged(field.Name, value, rowData, isNewRecord))"
                                 Color="Color.Primary"
                                 Size="Size.Small" />
                    @RenderFieldDescription(field)
                </div>
                break;

            case FieldType.Date:
                var dateValue = isNewRecord ? GetNewRecordValue<DateTime?>(field.Name) : GetCellDateValue(rowData!, field.Name);
                <div class="@containerClass">
                    <MudDatePicker Date="@dateValue"
                                   DateChanged="@((DateTime? value) => HandleFieldValueChanged(field.Name, value, rowData, isNewRecord))"
                                   Variant="Variant.Text"
                                   Margin="Margin.None"
                                   Required="@field.IsRequired"
                                   Class="inline-edit-field" />
                    @RenderFieldDescription(field)
                </div>
                break;

            case FieldType.Reference:
                var refValue = isNewRecord ? GetNewRecordValue<string>(field.Name) : GetCellStringValue(rowData!, field.Name);
                <div class="@containerClass">
                    <MudTextField T="string"
                                  Value="@refValue"
                                  ValueChanged="@((string value) => HandleFieldValueChanged(field.Name, value, rowData, isNewRecord))"
                                  Variant="Variant.Text"
                                  Margin="Margin.None"
                                  Required="@field.IsRequired"
                                  Class="inline-edit-field" />
                    @RenderFieldDescription(field)
                </div>
                break;

            default:
                var defaultValue = isNewRecord ? GetNewRecordValue<string>(field.Name) : GetCellStringValue(rowData!, field.Name);
                <div class="@containerClass">
                    <MudTextField T="string"
                                  Value="@defaultValue"
                                  ValueChanged="@((string value) => HandleFieldValueChanged(field.Name, value, rowData, isNewRecord))"
                                  Variant="Variant.Text"
                                  Margin="Margin.None"
                                  Required="@field.IsRequired"
                                  Class="inline-edit-field" />
                    @RenderFieldDescription(field)
                </div>
                break;
        }
    };

    // 渲染字段描述
    private RenderFragment RenderFieldDescription(FieldDefinition field) => __builder =>
    {
        @if (!string.IsNullOrEmpty(field.Comment) || !string.IsNullOrEmpty(field.ReferenceSchemaName))
        {
            <MudText Typo="Typo.caption" Color="Color.Secondary" Class="field-description">
                @if (field.Type == FieldType.Reference && !string.IsNullOrEmpty(field.ReferenceSchemaName))
                {
                    @($"引用 {field.ReferenceSchemaName}")
                    @if (!string.IsNullOrEmpty(field.Comment))
                    {
                        @($" - {field.Comment}")
                    }
                }
                else if (!string.IsNullOrEmpty(field.Comment))
                {
                    @field.Comment
                }
            </MudText>
        }
    };

    // 统一的字段值变更处理
    private async Task HandleFieldValueChanged(string fieldName, object? value, BsonDocument? rowData, bool isNewRecord)
    {
        if (isNewRecord)
        {
            SetNewRecordValue(fieldName, value);
        }
        else if (rowData != null)
        {
            var bsonValue = value switch
            {
                null => BsonValue.Null,
                string s => new BsonValue(s),
                double d => new BsonValue(d),
                bool b => new BsonValue(b),
                DateTime dt => new BsonValue(dt),
                _ => new BsonValue(value.ToString())
            };
            await SetCellValue(rowData, fieldName, bsonValue);
        }
    }

    // 新记录相关方法
    private RenderFragment RenderNewRecordCell(FieldDefinition field) => RenderEditableField(field, null, true);

    private T GetNewRecordValue<T>(string fieldName)
    {
        if (NewRecordData?.TryGetValue(fieldName, out var value) == true)
        {
            if (value is T typedValue)
                return typedValue;
            
            try
            {
                if (typeof(T) == typeof(DateTime?) && value is DateTime dt)
                    return (T)(object)dt;
                    
                if (value != null)
                    return (T)Convert.ChangeType(value, typeof(T));
            }
            catch
            {
                // 转换失败，返回默认值
            }
        }
        return default(T)!;
    }

    private void SetNewRecordValue(string fieldName, object? value)
    {
        if (NewRecordData != null)
        {
            NewRecordData[fieldName] = value;
            StateHasChanged();
        }
    }

    private async Task SaveNewRecord()
    {
        await OnNewRecordSave.InvokeAsync();
    }

    private async Task CancelNewRecord()
    {
        newRecordDocument = null;
        await OnNewRecordCancel.InvokeAsync();
    }

    // 内部方法供配置类使用
    internal async Task HandleViewRecord(BsonDocument record) => await OnViewRecord.InvokeAsync(record);
    internal async Task HandleEditRecord(BsonDocument record) => await OnEditRecord.InvokeAsync(record);
    internal async Task HandleDeleteRecord(BsonDocument record) 
    {
        bool shouldDelete = true;
        
        // 如果需要确认删除
        if (_effectiveConfig.RequireDeleteConfirmation)
        {
            var parameters = new DialogParameters
            {
                ["ContentText"] = _effectiveConfig.DeleteConfirmationMessage,
                ["OkButtonText"] = "删除",
                ["CancelButtonText"] = "取消",
                ["OkButtonColor"] = Color.Error
            };

            var options = new DialogOptions 
            { 
                CloseButton = true, 
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

            var dialog = await DialogService.ShowAsync<ConfirmationDialog>(_effectiveConfig.DeleteConfirmationTitle, parameters, options);
            var result = await dialog.Result;
            
            shouldDelete = !result.Canceled && (bool)(result.Data ?? false);
        }
        
        if (shouldDelete)
        {
            await OnDeleteRecord.InvokeAsync(record);
        }
    }
    internal async Task HandleRemoveRow(BsonDocument record) 
    {
        bool shouldDelete = true;
        
        // 如果需要确认删除
        if (_effectiveConfig.RequireDeleteConfirmation)
        {
            var parameters = new DialogParameters
            {
                ["ContentText"] = _effectiveConfig.DeleteConfirmationMessage,
                ["OkButtonText"] = "删除",
                ["CancelButtonText"] = "取消",
                ["OkButtonColor"] = Color.Error
            };

            var options = new DialogOptions 
            { 
                CloseButton = true, 
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

            var dialog = await DialogService.ShowAsync<ConfirmationDialog>(_effectiveConfig.DeleteConfirmationTitle, parameters, options);
            var result = await dialog.Result;
            
            shouldDelete = !result.Canceled && (bool)(result.Data ?? false);
        }
        
        if (shouldDelete)
        {
            // 先从数据列表中移除记录
            Data.Remove(record);
            // 然后通知父组件
            await OnRowRemoved.InvokeAsync(record);
            // 触发UI更新
            StateHasChanged();
        }
    }
}

<style>
    .required-indicator {
        color: #F44336;
        margin-left: 4px;
    }

    .action-buttons {
        display: flex;
        gap: 4px;
        align-items: center;
        justify-content: flex-start;
    }

    .action-buttons .mud-icon-button {
        min-width: 32px;
        min-height: 32px;
    }

    .inline-edit-cell {
        cursor: pointer;
        padding: 8px;
        border-radius: 4px;
        transition: background-color 0.2s;
        position: relative;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .inline-edit-cell:hover {
        background-color: rgba(0, 0, 0, 0.04);
    }

    .edit-hint {
        opacity: 0;
        transition: opacity 0.2s;
        margin-left: 8px;
    }

    .inline-edit-cell:hover .edit-hint {
        opacity: 0.6;
    }

    .inline-edit-field {
        min-height: auto !important;
    }

    .inline-edit-field .mud-input-root {
        min-height: auto !important;
    }

    .inline-edit-field .mud-input {
        padding: 4px 0 !important;
        font-size: 0.875rem;
        line-height: 1.43;
    }

    .inline-edit-field .mud-input-root-text {
        border: none !important;
        box-shadow: none !important;
    }

    .inline-edit-field .mud-input-root-text:hover {
        border: 1px solid rgba(0, 0, 0, 0.23) !important;
    }

    .inline-edit-field .mud-input-root-text.mud-input-root-focused {
        border: 2px solid #1976d2 !important;
        box-shadow: none !important;
    }

    .new-record-row {
        background-color: rgba(76, 175, 80, 0.08) !important;
        border-left: 4px solid #4caf50;
    }

    .new-record-cell {
        background-color: rgba(76, 175, 80, 0.04) !important;
    }

    .new-record-field-container,
    .editable-field-container {
        display: flex;
        flex-direction: column;
        gap: 2px;
        width: 100%;
    }

    .field-description {
        font-size: 0.6875rem !important;
        line-height: 1.2 !important;
        margin-top: 2px !important;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 100%;
        opacity: 0.8;
    }
</style>

@code {
    /// <summary>
    /// DataTable 模式枚举
    /// </summary>
    public enum DataTableMode
    {
        ReadOnly,      // 只读模式：查看、编辑、删除按钮
        BatchEdit,     // 批量编辑模式：直接编辑单元格 + 删除行
        DataExplorer,  // 数据浏览模式：查看、编辑、删除 + ID列
        ManualEntry    // 手动录入模式：批量编辑 + 删除行
    }

    /// <summary>
    /// DataTable 操作按钮定义
    /// </summary>
    public class DataTableAction
    {
        public string Icon { get; set; } = "";
        public string Tooltip { get; set; } = "";
        public Color Color { get; set; } = Color.Default;
        public Func<BsonDocument, Task> Action { get; set; } = _ => Task.CompletedTask;
        public bool ShowInNormalMode { get; set; } = true;  // 在普通模式下显示
        public bool ShowInEditMode { get; set; } = true;    // 在编辑模式下显示
    }

    /// <summary>
    /// DataTable 配置类
    /// </summary>
    public class DataTableConfiguration
    {
        public bool IsReadOnly { get; set; } = true;
        public bool AllowInlineEdit { get; set; } = false;
        public bool ShowIdColumn { get; set; } = false;
        public bool ShowPagination { get; set; } = true;
        public bool ShowRowCount { get; set; } = true;
        public int? MaxDisplayRows { get; set; }
        public string Height { get; set; } = "600px";
        public string EmptyTitle { get; set; } = "暂无数据";
        public string EmptyMessage { get; set; } = "没有可显示的内容";
        
        // 删除确认配置
        public bool RequireDeleteConfirmation { get; set; } = true;
        public string DeleteConfirmationTitle { get; set; } = "确认删除";
        public string DeleteConfirmationMessage { get; set; } = "您确定要删除这条记录吗？此操作无法撤销。";
        
        public List<DataTableAction> Actions { get; set; } = new();

        public bool HasActions => Actions.Any();

        public static DataTableConfiguration ForReadOnlyMode(DataTable component)
        {
            var config = new DataTableConfiguration
            {
                IsReadOnly = true,
                AllowInlineEdit = false,
                ShowIdColumn = false,
                ShowPagination = true,
                ShowRowCount = true,
                Height = "600px",
                EmptyTitle = "暂无数据",
                EmptyMessage = "没有可显示的内容"
            };

            if (component.OnViewRecord.HasDelegate)
            {
                config.Actions.Add(new DataTableAction
                {
                    Icon = Icons.Material.Filled.Visibility,
                    Tooltip = "查看",
                    Color = Color.Primary,
                    Action = component.HandleViewRecord
                });
            }

            if (component.OnEditRecord.HasDelegate)
            {
                config.Actions.Add(new DataTableAction
                {
                    Icon = Icons.Material.Filled.Edit,
                    Tooltip = "编辑",
                    Color = Color.Secondary,
                    Action = component.HandleEditRecord
                });
            }

            if (component.OnDeleteRecord.HasDelegate)
            {
                config.Actions.Add(new DataTableAction
                {
                    Icon = Icons.Material.Filled.Delete,
                    Tooltip = "删除",
                    Color = Color.Error,
                    Action = component.HandleDeleteRecord
                });
            }

            return config;
        }

        public static DataTableConfiguration ForBatchEditMode(DataTable component)
        {
            var config = new DataTableConfiguration
            {
                IsReadOnly = false,
                AllowInlineEdit = false,
                ShowIdColumn = false,
                ShowPagination = false,
                ShowRowCount = true,
                Height = "calc(100vh - 380px)",
                EmptyTitle = "暂无数据行",
                EmptyMessage = "点击添加行开始批量录入数据",
                RequireDeleteConfirmation = false,
            };

            if (component.OnRowRemoved.HasDelegate)
            {
                config.Actions.Add(new DataTableAction
                {
                    Icon = Icons.Material.Filled.Delete,
                    Tooltip = "删除行",
                    Color = Color.Error,
                    Action = component.HandleRemoveRow
                });
            }

            return config;
        }


        public static DataTableConfiguration ForDataExplorerMode(DataTable component)
        {
            var config = new DataTableConfiguration
            {
                IsReadOnly = false,
                AllowInlineEdit = true,
                ShowIdColumn = true,
                ShowPagination = true,
                ShowRowCount = true,
                Height = "600px",
                EmptyTitle = "暂无数据",
                EmptyMessage = "没有可显示的内容",
                // 数据浏览模式下删除需要更严格的确认
                RequireDeleteConfirmation = true,
                DeleteConfirmationTitle = "确认删除记录",
                DeleteConfirmationMessage = "您确定要永久删除这条记录吗？此操作无法撤销。"
            };

            if (component.OnViewRecord.HasDelegate)
            {
                config.Actions.Add(new DataTableAction
                {
                    Icon = Icons.Material.Filled.Visibility,
                    Tooltip = "查看",
                    Color = Color.Primary,
                    Action = component.HandleViewRecord,
                    ShowInNormalMode = false,  // 只在只读模式显示
                    ShowInEditMode = false
                });
            }

            if (component.OnEditRecord.HasDelegate)
            {
                config.Actions.Add(new DataTableAction
                {
                    Icon = Icons.Material.Filled.Edit,
                    Tooltip = "编辑",
                    Color = Color.Secondary,
                    Action = component.HandleEditRecord,
                    ShowInNormalMode = false,  // 只在只读模式显示
                    ShowInEditMode = false
                });
            }

            if (component.OnDeleteRecord.HasDelegate)
            {
                config.Actions.Add(new DataTableAction
                {
                    Icon = Icons.Material.Filled.Delete,
                    Tooltip = "删除",
                    Color = Color.Error,
                    Action = component.HandleDeleteRecord,
                    ShowInNormalMode = true,
                    ShowInEditMode = false
                });
            }

            return config;
        }

        public static DataTableConfiguration ForManualEntryMode(DataTable component)
        {
            return ForBatchEditMode(component);
        }
    }
}