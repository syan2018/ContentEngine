@using ContentEngine.Core.Utils
@using ContentEngine.Core.DataPipeline.Models
@using LiteDB
@using FieldType = ContentEngine.Core.DataPipeline.Models.FieldType

@if (!Data.Any())
{
    <MudPaper Class="pa-8 text-center" Elevation="0">
        <MudIcon Icon="@Icons.Material.Filled.TableChart" Size="Size.Large" Color="Color.Secondary" Class="mb-4" />
        <MudText Typo="Typo.h6" GutterBottom="true">@_effectiveConfig.EmptyTitle</MudText>
        <MudText Color="Color.Secondary">@_effectiveConfig.EmptyMessage</MudText>
    </MudPaper>
}
else
{
    <MudPaper Elevation="1" Class="@($"rounded-lg {Class}")">
        <MudTable Items="@GetDisplayData()" T="BsonDocument"
                  Hover="true"
                  Striped="true"
                  FixedHeader="true"
                  Height="@_effectiveConfig.Height"
                  Bordered="false">
            <HeaderContent>
                @if (_effectiveConfig.ShowIdColumn)
                {
                    <MudTh Style="width: 80px;">
                        @if (_effectiveConfig.IsReadOnly)
                        {
                            <MudTableSortLabel SortBy="@(new Func<BsonDocument, object>(x => x.TryGetValue("_id", out var id) ? id.ToString() : ""))">
                                ID
                            </MudTableSortLabel>
                        }
                        else
                        {
                            @("ID")
                        }
                    </MudTh>
                }
                @if (Schema?.Fields != null)
                {
                    @foreach (var field in Schema.Fields)
                    {
                        <MudTh>
                            @if (_effectiveConfig.IsReadOnly)
                            {
                                <MudTableSortLabel SortBy="@(new Func<BsonDocument, object>(x => BsonFormUtils.GetDisplayValue(x, field.Name)))">
                                    @field.Name
                                    @if (field.IsRequired)
                                    {
                                        <span class="required-indicator">*</span>
                                    }
                                </MudTableSortLabel>
                            }
                            else
                            {
                                @field.Name
                                @if (field.IsRequired)
                                {
                                    <span class="required-indicator">*</span>
                                }
                            }
                        </MudTh>
                    }
                }
                @if (_effectiveConfig.HasActions)
                {
                    <MudTh Style="@($"width: {GetActionColumnWidth()};")">操作</MudTh>
                }
            </HeaderContent>
            <RowTemplate Context="item">
                @{
                    var itemId = GetDocumentId(item);
                    var isEditing = editingRowId == itemId;
                }
                @if (_effectiveConfig.ShowIdColumn)
                {
                    <MudTd DataLabel="ID" Class="font-weight-medium">
                        @GetRecordId(item)
                    </MudTd>
                }
                @if (Schema?.Fields != null)
                {
                    @foreach (var field in Schema.Fields)
                    {
                        <MudTd DataLabel="@field.Name">
                            @if (_effectiveConfig.IsReadOnly)
                            {
                                @GetFormattedValue(item, field)
                            }
                            else if (_effectiveConfig.AllowInlineEdit && isEditing)
                            {
                                @RenderInlineEditCell(item, field)
                            }
                            else if (_effectiveConfig.AllowInlineEdit && !isEditing)
                            {
                                <div class="inline-edit-cell" @onclick="() => StartInlineEdit(itemId)">
                                    @GetFormattedValue(item, field)
                                    <MudIcon Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Class="edit-hint" />
                                </div>
                            }
                            else
                            {
                                @RenderEditableCell(item, field)
                            }
                        </MudTd>
                    }
                }
                @if (_effectiveConfig.HasActions)
                {
                    <MudTd>
                        <div class="action-buttons">
                            @if (_effectiveConfig.IsReadOnly)
                            {
                                @foreach (var action in _effectiveConfig.Actions)
                                {
                                    <MudTooltip Text="@action.Tooltip">
                                        <MudIconButton Icon="@action.Icon"
                                                      Color="@action.Color"
                                                      Size="Size.Small"
                                                      OnClick="() => action.Action.Invoke(item)" />
                                    </MudTooltip>
                                }
                            }
                            else if (isEditing)
                            {
                                <MudTooltip Text="保存">
                                    <MudIconButton Icon="@Icons.Material.Filled.Save"
                                                  Color="Color.Success"
                                                  Size="Size.Small"
                                                  OnClick="() => SaveInlineEdit()" />
                                </MudTooltip>
                                <MudTooltip Text="取消">
                                    <MudIconButton Icon="@Icons.Material.Filled.Cancel"
                                                  Color="Color.Secondary"
                                                  Size="Size.Small"
                                                  OnClick="() => CancelInlineEdit()" />
                                </MudTooltip>
                                @foreach (var action in _effectiveConfig.Actions.Where(a => a.ShowInEditMode))
                                {
                                    <MudTooltip Text="@action.Tooltip">
                                        <MudIconButton Icon="@action.Icon"
                                                      Color="@action.Color"
                                                      Size="Size.Small"
                                                      OnClick="() => action.Action.Invoke(item)" />
                                    </MudTooltip>
                                }
                            }
                            else if (_effectiveConfig.AllowInlineEdit)
                            {
                                <MudTooltip Text="编辑">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                                  Color="Color.Primary"
                                                  Size="Size.Small"
                                                  OnClick="() => StartInlineEdit(itemId)" />
                                </MudTooltip>
                                @foreach (var action in _effectiveConfig.Actions.Where(a => a.ShowInNormalMode))
                                {
                                    <MudTooltip Text="@action.Tooltip">
                                        <MudIconButton Icon="@action.Icon"
                                                      Color="@action.Color"
                                                      Size="Size.Small"
                                                      OnClick="() => action.Action.Invoke(item)" />
                                    </MudTooltip>
                                }
                            }
                            else
                            {
                                @foreach (var action in _effectiveConfig.Actions)
                                {
                                    <MudTooltip Text="@action.Tooltip">
                                        <MudIconButton Icon="@action.Icon"
                                                      Color="@action.Color"
                                                      Size="Size.Small"
                                                      OnClick="() => action.Action.Invoke(item)" />
                                    </MudTooltip>
                                }
                            }
                        </div>
                    </MudTd>
                }
            </RowTemplate>
            <PagerContent>
                @if (_effectiveConfig.ShowPagination)
                {
                    <MudTablePager PageSizeOptions="new int[]{5, 10, 25, 50}"
                                   HideRowsPerPage="false"
                                   HidePagination="false"
                                   InfoFormat="{first_item}-{last_item} / {all_items}" />
                }
            </PagerContent>
        </MudTable>
    </MudPaper>
}

@if (_effectiveConfig.ShowRowCount && Data.Any())
{
    <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mt-2">
        @if (_effectiveConfig.MaxDisplayRows.HasValue && Data.Count > _effectiveConfig.MaxDisplayRows.Value)
        {
            <span>显示前@(_effectiveConfig.MaxDisplayRows)条记录，共 @Data.Count 条</span>
        }
        else
        {
            <span>共 @Data.Count 条记录</span>
        }
    </MudText>
}

@code {
    // 核心参数
    [Parameter] public SchemaDefinition Schema { get; set; } = null!;
    [Parameter] public List<BsonDocument> Data { get; set; } = new();
    
    // 模式参数 - 简化使用
    [Parameter] public DataTableMode Mode { get; set; } = DataTableMode.ReadOnly;
    
    // 自定义配置 - 高级使用
    [Parameter] public DataTableConfiguration? CustomConfiguration { get; set; }
    
    // 样式控制
    [Parameter] public string Class { get; set; } = "";
    
    // 事件回调
    [Parameter] public EventCallback<BsonDocument> OnRowChanged { get; set; }
    [Parameter] public EventCallback<BsonDocument> OnRowRemoved { get; set; }
    [Parameter] public EventCallback<BsonDocument> OnViewRecord { get; set; }
    [Parameter] public EventCallback<BsonDocument> OnEditRecord { get; set; }
    [Parameter] public EventCallback<BsonDocument> OnDeleteRecord { get; set; }

    // 内部状态
    private string? editingRowId = null;
    private BsonDocument? originalEditingData = null;
    private BsonDocument? editingData = null;
    private DataTableConfiguration _effectiveConfig = null!;

    protected override void OnParametersSet()
    {
        InitializeConfiguration();
    }

    private void InitializeConfiguration()
    {
        if (CustomConfiguration != null)
        {
            _effectiveConfig = CustomConfiguration;
        }
        else
        {
            _effectiveConfig = Mode switch
            {
                DataTableMode.ReadOnly => DataTableConfiguration.ForReadOnlyMode(this),
                DataTableMode.BatchEdit => DataTableConfiguration.ForBatchEditMode(this),
                DataTableMode.InlineEdit => DataTableConfiguration.ForInlineEditMode(this),
                DataTableMode.DataExplorer => DataTableConfiguration.ForDataExplorerMode(this),
                DataTableMode.ManualEntry => DataTableConfiguration.ForManualEntryMode(this),
                _ => DataTableConfiguration.ForReadOnlyMode(this)
            };
        }
    }

    private IEnumerable<BsonDocument> GetDisplayData()
    {
        if (_effectiveConfig.MaxDisplayRows.HasValue)
        {
            return Data.Take(_effectiveConfig.MaxDisplayRows.Value);
        }
        return Data;
    }

    private string GetDocumentId(BsonDocument document)
    {
        if (document.TryGetValue("_id", out var id))
        {
            return id.ToString();
        }
        return document.GetHashCode().ToString();
    }

    private string GetRecordId(BsonDocument document)
    {
        if (document.TryGetValue("_id", out var id))
        {
            var idStr = id.ToString();
            return idStr.Length > 8 ? idStr.Substring(0, 8) + "..." : idStr;
        }
        return "未知";
    }

    private string GetActionColumnWidth()
    {
        var actionCount = _effectiveConfig.Actions.Count;
        if (_effectiveConfig.AllowInlineEdit)
        {
            actionCount = Math.Max(actionCount + 1, 2); // +1 for edit button, min 2 for save/cancel
        }
        
        return $"{Math.Max(actionCount * 40, 80)}px";
    }

    private void StartInlineEdit(string documentId)
    {
        var document = Data.FirstOrDefault(d => GetDocumentId(d) == documentId);
        if (document != null)
        {
            editingRowId = documentId;
            originalEditingData = new BsonDocument(document);
            editingData = new BsonDocument(document);
            StateHasChanged();
        }
    }

    private async Task SaveInlineEdit()
    {
        if (editingData != null && originalEditingData != null)
        {
            var originalDocument = Data.FirstOrDefault(d => GetDocumentId(d) == editingRowId);
            if (originalDocument != null)
            {
                originalDocument.Clear();
                foreach (var kvp in editingData)
                {
                    originalDocument[kvp.Key] = kvp.Value;
                }
                await OnRowChanged.InvokeAsync(originalDocument);
            }
        }
        CancelInlineEdit();
    }

    private void CancelInlineEdit()
    {
        editingRowId = null;
        originalEditingData = null;
        editingData = null;
        StateHasChanged();
    }

    private RenderFragment GetFormattedValue(BsonDocument document, FieldDefinition field)
    {
        var value = BsonFormUtils.GetDisplayValue(document, field.Name);
        
        return field.Type switch
        {
            FieldType.Boolean => builder =>
            {
                var boolValue = bool.TryParse(value, out var b) && b;
                builder.OpenComponent<MudChip<string>>(0);
                builder.AddAttribute(1, "Text", boolValue ? "是" : "否");
                builder.AddAttribute(2, "Color", boolValue ? Color.Success : Color.Default);
                builder.AddAttribute(3, "Size", Size.Small);
                builder.AddAttribute(4, "Variant", Variant.Filled);
                builder.CloseComponent();
            },
            FieldType.Date => builder =>
            {
                if (DateTime.TryParse(value, out var date))
                {
                    builder.AddContent(0, date.ToString("yyyy-MM-dd"));
                }
                else
                {
                    builder.AddContent(0, value);
                }
            },
            FieldType.Number => builder =>
            {
                builder.OpenElement(0, "span");
                builder.AddAttribute(1, "class", "font-weight-medium");
                builder.AddContent(2, value);
                builder.CloseElement();
            },
            _ => builder => builder.AddContent(0, value)
        };
    }

    private RenderFragment RenderInlineEditCell(BsonDocument rowData, FieldDefinition field) => __builder =>
    {
        var workingData = editingData ?? rowData;
        
        switch (field.Type)
        {
            case FieldType.Text:
                <MudTextField T="string"
                              Value="@GetCellStringValue(workingData, field.Name)"
                              ValueChanged="@(value => SetInlineEditValue(field.Name, new BsonValue(value)))"
                              Variant="Variant.Text"
                              Margin="Margin.None"
                              Class="inline-edit-field" />
                break;

            case FieldType.Number:
                <MudNumericField T="double?"
                                 Value="@GetCellDoubleValue(workingData, field.Name)"
                                 ValueChanged="@(value => SetInlineEditValue(field.Name, value.HasValue ? new BsonValue(value.Value) : BsonValue.Null))"
                                 Variant="Variant.Text"
                                 Margin="Margin.None"
                                 Class="inline-edit-field" />
                break;

            case FieldType.Boolean:
                <MudCheckBox T="bool"
                             Checked="@GetCellBoolValue(workingData, field.Name)"
                             CheckedChanged="@((bool value) => SetInlineEditValue(field.Name, new BsonValue(value)))"
                             Color="Color.Primary"
                             Size="Size.Small" />
                break;

            case FieldType.Date:
                <MudDatePicker Date="@GetCellDateValue(workingData, field.Name)"
                               DateChanged="@(value => SetInlineEditValue(field.Name, value.HasValue ? new BsonValue(value.Value) : BsonValue.Null))"
                               Variant="Variant.Text"
                               Margin="Margin.None"
                               Class="inline-edit-field" />
                break;

            case FieldType.Reference:
                <MudTextField T="string"
                              Value="@GetCellStringValue(workingData, field.Name)"
                              ValueChanged="@(value => SetInlineEditValue(field.Name, new BsonValue(value)))"
                              Variant="Variant.Text"
                              Margin="Margin.None"
                              Class="inline-edit-field" />
                break;

            default:
                <MudTextField T="string"
                              Value="@GetCellStringValue(workingData, field.Name)"
                              ValueChanged="@(value => SetInlineEditValue(field.Name, new BsonValue(value)))"
                              Variant="Variant.Text"
                              Margin="Margin.None"
                              Class="inline-edit-field" />
                break;
        }
    };

    private RenderFragment RenderEditableCell(BsonDocument rowData, FieldDefinition field) => __builder =>
    {
        switch (field.Type)
        {
            case FieldType.Text:
                <MudTextField T="string"
                              Value="@GetCellStringValue(rowData, field.Name)"
                              ValueChanged="@(value => SetCellValue(rowData, field.Name, new BsonValue(value)))"
                              Variant="Variant.Outlined"
                              Margin="Margin.Dense" />
                break;

            case FieldType.Number:
                <MudNumericField T="double?"
                                 Value="@GetCellDoubleValue(rowData, field.Name)"
                                 ValueChanged="@(value => SetCellValue(rowData, field.Name, value.HasValue ? new BsonValue(value.Value) : BsonValue.Null))"
                                 Variant="Variant.Outlined"
                                 Margin="Margin.Dense" />
                break;

            case FieldType.Boolean:
                <MudCheckBox T="bool"
                             Checked="@GetCellBoolValue(rowData, field.Name)"
                             CheckedChanged="@((bool value) => SetCellValue(rowData, field.Name, new BsonValue(value)))"
                             Color="Color.Primary"
                             Size="Size.Small" />
                break;

            case FieldType.Date:
                <MudDatePicker Date="@GetCellDateValue(rowData, field.Name)"
                               DateChanged="@(value => SetCellValue(rowData, field.Name, value.HasValue ? new BsonValue(value.Value) : BsonValue.Null))"
                               Variant="Variant.Outlined"
                               Margin="Margin.Dense" />
                break;

            case FieldType.Reference:
                <MudTextField T="string"
                              Value="@GetCellStringValue(rowData, field.Name)"
                              ValueChanged="@(value => SetCellValue(rowData, field.Name, new BsonValue(value)))"
                              Variant="Variant.Outlined"
                              Margin="Margin.Dense" />
                break;

            default:
                <MudTextField T="string"
                              Value="@GetCellStringValue(rowData, field.Name)"
                              ValueChanged="@(value => SetCellValue(rowData, field.Name, new BsonValue(value)))"
                              Variant="Variant.Outlined"
                              Margin="Margin.Dense" />
                break;
        }
    };

    private async Task SetCellValue(BsonDocument rowData, string fieldName, BsonValue value)
    {
        rowData[fieldName] = value;
        await OnRowChanged.InvokeAsync(rowData);
    }

    private void SetInlineEditValue(string fieldName, BsonValue value)
    {
        if (editingData != null)
        {
            editingData[fieldName] = value;
            StateHasChanged();
        }
    }

    private string GetCellStringValue(BsonDocument rowData, string fieldName)
    {
        return rowData.TryGetValue(fieldName, out var bsonValue) && !bsonValue.IsNull ? bsonValue.AsString ?? "" : "";
    }

    private double? GetCellDoubleValue(BsonDocument rowData, string fieldName)
    {
        if (rowData.TryGetValue(fieldName, out var bsonValue) && bsonValue.IsNumber)
        {
            return bsonValue.AsDouble;
        }
        return null;
    }

    private bool GetCellBoolValue(BsonDocument rowData, string fieldName)
    {
        if (rowData.TryGetValue(fieldName, out var bsonValue) && bsonValue.IsBoolean)
        {
            return bsonValue.AsBoolean;
        }
        return false;
    }

    private DateTime? GetCellDateValue(BsonDocument rowData, string fieldName)
    {
        if (rowData.TryGetValue(fieldName, out var bsonValue) && bsonValue.IsDateTime)
        {
            return bsonValue.AsDateTime;
        }
        return null;
    }

    // 内部方法供配置类使用
    internal async Task HandleViewRecord(BsonDocument record) => await OnViewRecord.InvokeAsync(record);
    internal async Task HandleEditRecord(BsonDocument record) => await OnEditRecord.InvokeAsync(record);
    internal async Task HandleDeleteRecord(BsonDocument record) => await OnDeleteRecord.InvokeAsync(record);
    internal async Task HandleRemoveRow(BsonDocument record) => await OnRowRemoved.InvokeAsync(record);
}

<style>
    .required-indicator {
        color: #F44336;
        margin-left: 4px;
    }

    .action-buttons {
        display: flex;
        gap: 4px;
        align-items: center;
        justify-content: flex-start;
    }

    .action-buttons .mud-icon-button {
        min-width: 32px;
        min-height: 32px;
    }

    .inline-edit-cell {
        cursor: pointer;
        padding: 8px;
        border-radius: 4px;
        transition: background-color 0.2s;
        position: relative;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .inline-edit-cell:hover {
        background-color: rgba(0, 0, 0, 0.04);
    }

    .edit-hint {
        opacity: 0;
        transition: opacity 0.2s;
        margin-left: 8px;
    }

    .inline-edit-cell:hover .edit-hint {
        opacity: 0.6;
    }

    .inline-edit-field {
        min-height: auto !important;
    }

    .inline-edit-field .mud-input-root {
        min-height: auto !important;
    }

    .inline-edit-field .mud-input {
        padding: 4px 0 !important;
        font-size: 0.875rem;
        line-height: 1.43;
    }

    .inline-edit-field .mud-input-root-text {
        border: none !important;
        box-shadow: none !important;
    }

    .inline-edit-field .mud-input-root-text:hover {
        border: 1px solid rgba(0, 0, 0, 0.23) !important;
    }

    .inline-edit-field .mud-input-root-text.mud-input-root-focused {
        border: 2px solid #1976d2 !important;
        box-shadow: none !important;
    }
</style>

@code {
    /// <summary>
    /// DataTable 模式枚举
    /// </summary>
    public enum DataTableMode
    {
        ReadOnly,      // 只读模式：查看、编辑、删除按钮
        BatchEdit,     // 批量编辑模式：直接编辑单元格 + 删除行
        InlineEdit,    // 单行编辑模式：点击编辑 + 保存/取消 + 删除
        DataExplorer,  // 数据浏览模式：查看、编辑、删除 + ID列
        ManualEntry    // 手动录入模式：批量编辑 + 删除行
    }

    /// <summary>
    /// DataTable 操作按钮定义
    /// </summary>
    public class DataTableAction
    {
        public string Icon { get; set; } = "";
        public string Tooltip { get; set; } = "";
        public Color Color { get; set; } = Color.Default;
        public Func<BsonDocument, Task> Action { get; set; } = _ => Task.CompletedTask;
        public bool ShowInNormalMode { get; set; } = true;  // 在普通模式下显示
        public bool ShowInEditMode { get; set; } = true;    // 在编辑模式下显示
    }

    /// <summary>
    /// DataTable 配置类
    /// </summary>
    public class DataTableConfiguration
    {
        public bool IsReadOnly { get; set; } = true;
        public bool AllowInlineEdit { get; set; } = false;
        public bool ShowIdColumn { get; set; } = false;
        public bool ShowPagination { get; set; } = true;
        public bool ShowRowCount { get; set; } = true;
        public int? MaxDisplayRows { get; set; }
        public string Height { get; set; } = "600px";
        public string EmptyTitle { get; set; } = "暂无数据";
        public string EmptyMessage { get; set; } = "没有可显示的内容";
        
        public List<DataTableAction> Actions { get; set; } = new();

        public bool HasActions => Actions.Any();

        public static DataTableConfiguration ForReadOnlyMode(DataTable component)
        {
            var config = new DataTableConfiguration
            {
                IsReadOnly = true,
                AllowInlineEdit = false,
                ShowIdColumn = false,
                ShowPagination = true,
                ShowRowCount = true,
                Height = "600px",
                EmptyTitle = "暂无数据",
                EmptyMessage = "没有可显示的内容"
            };

            if (component.OnViewRecord.HasDelegate)
            {
                config.Actions.Add(new DataTableAction
                {
                    Icon = Icons.Material.Filled.Visibility,
                    Tooltip = "查看",
                    Color = Color.Primary,
                    Action = component.HandleViewRecord
                });
            }

            if (component.OnEditRecord.HasDelegate)
            {
                config.Actions.Add(new DataTableAction
                {
                    Icon = Icons.Material.Filled.Edit,
                    Tooltip = "编辑",
                    Color = Color.Secondary,
                    Action = component.HandleEditRecord
                });
            }

            if (component.OnDeleteRecord.HasDelegate)
            {
                config.Actions.Add(new DataTableAction
                {
                    Icon = Icons.Material.Filled.Delete,
                    Tooltip = "删除",
                    Color = Color.Error,
                    Action = component.HandleDeleteRecord
                });
            }

            return config;
        }

        public static DataTableConfiguration ForBatchEditMode(DataTable component)
        {
            var config = new DataTableConfiguration
            {
                IsReadOnly = false,
                AllowInlineEdit = false,
                ShowIdColumn = false,
                ShowPagination = false,
                ShowRowCount = true,
                Height = "calc(100vh - 380px)",
                EmptyTitle = "暂无数据行",
                EmptyMessage = "点击添加行开始批量录入数据"
            };

            if (component.OnRowRemoved.HasDelegate)
            {
                config.Actions.Add(new DataTableAction
                {
                    Icon = Icons.Material.Filled.Delete,
                    Tooltip = "删除行",
                    Color = Color.Error,
                    Action = component.HandleRemoveRow
                });
            }

            return config;
        }

        public static DataTableConfiguration ForInlineEditMode(DataTable component)
        {
            var config = new DataTableConfiguration
            {
                IsReadOnly = false,
                AllowInlineEdit = true,
                ShowIdColumn = true,
                ShowPagination = true,
                ShowRowCount = true,
                Height = "600px",
                EmptyTitle = "暂无数据",
                EmptyMessage = "没有可显示的内容"
            };

            if (component.OnDeleteRecord.HasDelegate)
            {
                config.Actions.Add(new DataTableAction
                {
                    Icon = Icons.Material.Filled.Delete,
                    Tooltip = "删除",
                    Color = Color.Error,
                    Action = component.HandleDeleteRecord,
                    ShowInNormalMode = true,
                    ShowInEditMode = true
                });
            }

            return config;
        }

        public static DataTableConfiguration ForDataExplorerMode(DataTable component)
        {
            var config = new DataTableConfiguration
            {
                IsReadOnly = false,
                AllowInlineEdit = true,
                ShowIdColumn = true,
                ShowPagination = true,
                ShowRowCount = true,
                Height = "600px",
                EmptyTitle = "暂无数据",
                EmptyMessage = "没有可显示的内容"
            };

            if (component.OnViewRecord.HasDelegate)
            {
                config.Actions.Add(new DataTableAction
                {
                    Icon = Icons.Material.Filled.Visibility,
                    Tooltip = "查看",
                    Color = Color.Primary,
                    Action = component.HandleViewRecord,
                    ShowInNormalMode = false,  // 只在只读模式显示
                    ShowInEditMode = false
                });
            }

            if (component.OnEditRecord.HasDelegate)
            {
                config.Actions.Add(new DataTableAction
                {
                    Icon = Icons.Material.Filled.Edit,
                    Tooltip = "编辑",
                    Color = Color.Secondary,
                    Action = component.HandleEditRecord,
                    ShowInNormalMode = false,  // 只在只读模式显示
                    ShowInEditMode = false
                });
            }

            if (component.OnDeleteRecord.HasDelegate)
            {
                config.Actions.Add(new DataTableAction
                {
                    Icon = Icons.Material.Filled.Delete,
                    Tooltip = "删除",
                    Color = Color.Error,
                    Action = component.HandleDeleteRecord,
                    ShowInNormalMode = true,
                    ShowInEditMode = true
                });
            }

            return config;
        }

        public static DataTableConfiguration ForManualEntryMode(DataTable component)
        {
            return ForBatchEditMode(component);
        }
    }
}