@using ContentEngine.Core.DataPipeline.Models
@using ContentEngine.Core.DataPipeline.Services
@using ContentEngine.Core.AI.Services
@inject IFileConversionService FileConversionService
@inject IDataStructuringService DataStructuringService
@inject IDataEntryService DataEntryService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject ILogger<AIDataEntryWizard> Logger

<MudCard>
    <MudCardContent>
        <MudStepper @ref="stepper" 
                   @bind-ActiveIndex="activeStepIndex" 
                   Linear="true" 
                   HeaderNavigation="false"
                   OnPreviewInteraction="HandleStepperPreviewInteraction">
            
            <!-- 步骤1: 选择数据源 -->
            <MudStep Title="选择数据源" 
                    Icon="Icons.Material.Filled.CloudUpload" 
                    Completed="isStep1Completed">
                <ChildContent>
                    <SourceSelectionStep @ref="sourceSelectionStep" />
                </ChildContent>
            </MudStep>

            <!-- 步骤2: 配置映射 -->
            <MudStep Title="配置映射" 
                    Icon="Icons.Material.Filled.Settings"
                    Completed="isStep2Completed">
                <ChildContent>
                    <MappingConfigStep @ref="mappingConfigStep"
                                      Schema="Schema" 
                                      DataSources="dataSources" 
                                      ExtractionMode="extractionMode" />
                </ChildContent>
            </MudStep>

            <!-- 步骤3: AI 提取预览 -->
            <MudStep Title="AI 提取预览" 
                    Icon="Icons.Material.Filled.AutoAwesome"
                    Completed="isStep3Completed">
                <ChildContent>
                    <ExtractionPreviewStep @ref="extractionPreviewStep"
                                          Schema="Schema"
                                          DataSources="dataSources"
                                          FieldMappings="fieldMappings"
                                          ExtractionMode="extractionMode" />
                </ChildContent>
            </MudStep>

            <!-- 步骤4: 确认保存 -->
            <MudStep Title="确认保存" 
                    Icon="Icons.Material.Filled.Save">
                <ChildContent>
                    <ResultsReviewStep @ref="resultsReviewStep"
                                      Schema="Schema" 
                                      Records="finalRecords" />
                </ChildContent>
            </MudStep>
        </MudStepper>
    </MudCardContent>
</MudCard>

@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <MudAlert Severity="Severity.Error" Class="mt-4">@errorMessage</MudAlert>
}

@code {
    [Parameter] public SchemaDefinition Schema { get; set; } = null!;

    private MudStepper stepper = null!;
    private int activeStepIndex = 0;
    private string? errorMessage;

    // 子组件引用
    private SourceSelectionStep sourceSelectionStep = null!;
    private MappingConfigStep mappingConfigStep = null!;
    private ExtractionPreviewStep extractionPreviewStep = null!;
    private ResultsReviewStep resultsReviewStep = null!;

    // 数据状态
    private List<DataSource> dataSources = new();
    private ExtractionMode extractionMode = ExtractionMode.OneToOne;
    private Dictionary<string, string> fieldMappings = new();
    private List<ExtractionResult> extractionResults = new();
    private List<LiteDB.BsonDocument> finalRecords = new();

    // 步骤完成状态
    private bool isStep1Completed = false;
    private bool isStep2Completed = false;
    private bool isStep3Completed = false;

    private async Task HandleStepperPreviewInteraction(StepperInteractionEventArgs args)
    {
        Logger.LogInformation($"[AI Data Entry Wizard] HandleStepperPreviewInteraction: StepIndex={args.StepIndex}, Action={args.Action}");

        if (args.Action == StepAction.Complete) // 用户点击"下一步"
        {
            switch (args.StepIndex) // 正在完成的步骤索引
            {
                case 0: // 完成步骤1：选择数据源
                    if (!await ValidateStep1())
                    {
                        args.Cancel = true;
                        return;
                    }
                    await CompleteStep1();
                    break;

                case 1: // 完成步骤2：配置映射
                    if (!await ValidateStep2())
                    {
                        args.Cancel = true;
                        return;
                    }
                    await CompleteStep2();
                    break;

                case 2: // 完成步骤3：AI 提取预览
                    if (!await ValidateStep3())
                    {
                        args.Cancel = true;
                        return;
                    }
                    await CompleteStep3();
                    break;

                case 3: // 完成步骤4：确认保存
                    await CompleteStep4();
                    // 如果保存失败，会设置 errorMessage，需要取消步骤完成
                    if (!string.IsNullOrWhiteSpace(errorMessage))
                    {
                        args.Cancel = true;
                    }
                    break;
            }
        }
        else if (args.Action == StepAction.Activate) // 用户点击步骤标题导航
        {
            // 防止跳跃到未完成的步骤
            if (args.StepIndex > activeStepIndex)
            {
                if (args.StepIndex == 1 && !isStep1Completed)
                {
                    Snackbar.Add("请先完成数据源选择", Severity.Warning);
                    args.Cancel = true;
                }
                else if (args.StepIndex == 2 && (!isStep1Completed || !isStep2Completed))
                {
                    Snackbar.Add("请先完成前面的步骤", Severity.Warning);
                    args.Cancel = true;
                }
                else if (args.StepIndex == 3 && (!isStep1Completed || !isStep2Completed || !isStep3Completed))
                {
                    Snackbar.Add("请先完成前面的步骤", Severity.Warning);
                    args.Cancel = true;
                }
            }
        }

        StateHasChanged();
    }

    private async Task<bool> ValidateStep1()
    {
        try
        {
            // 获取数据源选择结果
            var result = await sourceSelectionStep.GetSelectionResult();
            if (result.sources == null || !result.sources.Any())
            {
                errorMessage = "请至少选择一个数据源";
                Snackbar.Add(errorMessage, Severity.Warning);
                return false;
            }

            dataSources = result.sources;
            extractionMode = result.mode;
            errorMessage = null;
            return true;
        }
        catch (Exception ex)
        {
            errorMessage = $"验证数据源时出错: {ex.Message}";
            Snackbar.Add(errorMessage, Severity.Error);
            return false;
        }
    }

    private async Task CompleteStep1()
    {
        isStep1Completed = true;
        Snackbar.Add($"已选择 {dataSources.Count} 个数据源", Severity.Success);
        Logger.LogInformation("Step 1 completed: Data sources selected");
    }

    private async Task<bool> ValidateStep2()
    {
        try
        {
            // 获取映射配置结果
            var mappings = await mappingConfigStep.GetMappingResult();
            if (mappings == null)
            {
                errorMessage = "请配置字段映射";
                Snackbar.Add(errorMessage, Severity.Warning);
                return false;
            }

            fieldMappings = mappings;
            errorMessage = null;
            return true;
        }
        catch (Exception ex)
        {
            errorMessage = $"验证字段映射时出错: {ex.Message}";
            Snackbar.Add(errorMessage, Severity.Error);
            return false;
        }
    }

    private async Task CompleteStep2()
    {
        isStep2Completed = true;
        Snackbar.Add("字段映射配置完成", Severity.Success);
        Logger.LogInformation("Step 2 completed: Field mapping configured");
    }

    private async Task<bool> ValidateStep3()
    {
        try
        {
            // 获取提取结果
            var results = await extractionPreviewStep.GetExtractionResults();
            if (results == null || !results.Any())
            {
                errorMessage = "请先执行 AI 提取";
                Snackbar.Add(errorMessage, Severity.Warning);
                return false;
            }

            var successCount = results.Count(r => r.Status == ExtractionStatus.Success);
            if (successCount == 0)
            {
                errorMessage = "没有成功提取的数据，请检查数据源或重新提取";
                Snackbar.Add(errorMessage, Severity.Warning);
                return false;
            }

            extractionResults = results;
            finalRecords = results
                .Where(r => r.Status == ExtractionStatus.Success)
                .SelectMany(r => r.Records)
                .ToList();

            errorMessage = null;
            return true;
        }
        catch (Exception ex)
        {
            errorMessage = $"验证提取结果时出错: {ex.Message}";
            Snackbar.Add(errorMessage, Severity.Error);
            return false;
        }
    }

    private async Task CompleteStep3()
    {
        isStep3Completed = true;
        var successCount = extractionResults.Count(r => r.Status == ExtractionStatus.Success);
        Snackbar.Add($"提取完成：{successCount}/{extractionResults.Count} 个数据源成功，共 {finalRecords.Count} 条记录", Severity.Success);
        Logger.LogInformation("Step 3 completed: AI extraction finished");
    }

    private async Task CompleteStep4()
    {
        try
        {
            errorMessage = null;
            
            // 保存所有记录到数据库
            foreach (var record in finalRecords)
            {
                await DataEntryService.CreateDataAsync(Schema.Name, record);
            }
            
            Snackbar.Add($"成功保存 {finalRecords.Count} 条记录到 {Schema.Name}", Severity.Success);
            Logger.LogInformation("Step 4 completed: Records saved successfully");
            
            // 导航回数据录入页面
            Navigation.NavigateTo("/data-entry");
        }
        catch (Exception ex)
        {
            errorMessage = $"保存失败: {ex.Message}";
            Snackbar.Add(errorMessage, Severity.Error);
            Logger.LogError(ex, "Failed to save records in step 4");
        }
    }
} 