@page "/data-entry"
@using ContentEngine.Core.DataPipeline.Services
@using ContentEngine.Core.DataPipeline.Models
@inject ISchemaDefinitionService SchemaService
@inject IDataEntryService DataEntryService
@inject NavigationManager Navigation

<PageTitle>信息注入 - ContentEngine</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h3" Class="mb-2">信息注入</MudText>
    <MudText Typo="Typo.body1" Color="Color.Secondary" Class="mb-6">
        将原始信息转化为结构化数据并存入系统
    </MudText>

    <MudGrid>
        <MudItem xs="12" md="8">
            <MudTextField @bind-Value="searchText" 
                         Placeholder="搜索数据结构..." 
                         Adornment="Adornment.Start" 
                         AdornmentIcon="Icons.Material.Filled.Search"
                         Class="mb-4" />
        </MudItem>
        <MudItem xs="12" md="4">
            <MudButton Variant="Variant.Outlined" 
                      StartIcon="Icons.Material.Filled.FilterList"
                      Class="mb-4">
                筛选
            </MudButton>
        </MudItem>
    </MudGrid>

    <MudText Typo="Typo.h5" Class="mb-4">选择目标数据结构</MudText>

    @if (isLoading)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else if (schemas?.Any() == true)
    {
        <MudGrid>
            @foreach (var schema in filteredSchemas)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudCard Class="mb-4" Style="height: 100%;">
                        <MudCardContent>
                            <div class="d-flex justify-space-between align-center mb-2">
                                <MudText Typo="Typo.h6">@schema.Name</MudText>
                                <MudChip T="string" Size="Size.Small" Color="Color.Primary">
                                    @schema.Fields.Count 字段
                                </MudChip>
                            </div>
                            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-3">
                                @schema.Description
                            </MudText>
                            <MudText Typo="Typo.caption">
                                已有记录: <strong>@(GetRecordCount(schema.Name))</strong>
                            </MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Outlined" 
                                      Size="Size.Small"
                                      OnClick="() => NavigateToManualEntry(schema.Id)"
                                      Class="flex-grow-1 mr-2">
                                手动录入
                            </MudButton>
                            <MudButton Variant="Variant.Filled" 
                                      Color="Color.Primary"
                                      Size="Size.Small"
                                      OnClick="() => NavigateToAIEntry(schema.Id)"
                                      Class="flex-grow-1">
                                AI 辅助录入
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
    else
    {
        <MudAlert Severity="Severity.Info">
            暂无可用的数据结构。请先创建数据结构定义。
        </MudAlert>
    }
</MudContainer>

@code {
    private List<SchemaDefinition>? schemas;
    private bool isLoading = true;
    private string searchText = string.Empty;

    private IEnumerable<SchemaDefinition> filteredSchemas =>
        schemas?.Where(s => string.IsNullOrEmpty(searchText) || 
                           s.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                           s.Description.Contains(searchText, StringComparison.OrdinalIgnoreCase)) ?? 
        Enumerable.Empty<SchemaDefinition>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            schemas = await SchemaService.GetAllSchemasAsync();
        }
        catch (Exception ex)
        {
            // TODO: 显示错误消息
            Console.WriteLine($"加载Schema失败: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private int GetRecordCount(string schemaName)
    {
        try
        {
            // 异步调用在同步方法中的简化处理
            return (int)DataEntryService.CountDataAsync(schemaName).GetAwaiter().GetResult();
        }
        catch
        {
            return 0;
        }
    }

    private void NavigateToManualEntry(int schemaId)
    {
        Navigation.NavigateTo($"/data-entry/manual/{schemaId}");
    }

    private void NavigateToAIEntry(int schemaId)
    {
        Navigation.NavigateTo($"/data-entry/ai/{schemaId}");
    }
} 