@using ContentEngine.Core.DataPipeline.Models
@using ContentEngine.Core.DataPipeline.Services
@using ContentEngine.WebApp.Components.Shared
@using Microsoft.AspNetCore.Components.Forms
@inject IFileConversionService FileConversionService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<div class="mb-6">
    <MudText Typo="Typo.h5" Class="mb-2">选择数据源</MudText>
    <MudText Typo="Typo.body2" Color="Color.Secondary">
        选择要处理的文件、网页或文本内容
    </MudText>
</div>

<MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" Class="mb-4">
    
    <MudTabPanel Text="文本内容" Icon="Icons.Material.Filled.TextFields">
        <div class="pa-4">
            <MudTextField @bind-Value="textInput"
                          Label="输入文本内容"
                          Placeholder="粘贴包含目标数据的文本内容或提出其它要求(如，请自主设计三组满足要求的用例)"
                          Variant="Variant.Outlined"
                          Lines="8"
                          Class="mb-4" />
            <MudButton Variant="Variant.Filled" 
                       Color="Color.Primary"
                       OnClick="AddText"
                       Disabled="string.IsNullOrWhiteSpace(textInput)"
                       StartIcon="Icons.Material.Filled.Add">
                添加文本
            </MudButton>
        </div>
    </MudTabPanel>
    
    <MudTabPanel Text="文件" Icon="Icons.Material.Filled.UploadFile">
        <div class="pa-4">
            <FileUploadArea @ref="fileUploadArea"
                            AcceptedTypes=".txt,.md,.pdf,.docx,.doc,.xlsx,.xls,.pptx,.ppt,.html,.htm,.json,.xml,.csv,.rtf"
                            MaxFileCount="10"
                            IsProcessing="isProcessingFiles"
                            ProcessingText="正在处理文件..."
                            CurrentFileName="@currentProcessingFileName"
                            ShowProgress="true"
                            ProcessedCount="processedFileCount"
                            TotalCount="totalFileCount"
                            Title="上传文件"
                            Description="拖放文件到此处，或点击选择文件"
                            SupportedFormats="支持 PDF, Word, Excel, PowerPoint, 文本文件等"
                            MaxFileSizeMB="50"
                            AllowedExtensions="@GetAllowedExtensions()"
                            FilesChanged="OnSingleFileChanged" />
        </div>
    </MudTabPanel>

    <MudTabPanel Text="网页 URL" Icon="Icons.Material.Filled.Link">
        <div class="pa-4">
            <MudTextField @bind-Value="urlInput"
                          Label="输入网页 URL"
                          Placeholder="https://example.com/page"
                          Variant="Variant.Outlined"
                          Disabled="isProcessingUrl"
                          Class="mb-4"/>

            @if (isProcessingUrl)
            {
                <div class="d-flex align-center mb-4">
                    <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true"/>
                    <MudText Typo="Typo.body2" Class="ml-3">正在获取网页内容...</MudText>
                </div>
                <MudText Typo="Typo.caption" Color="Color.Secondary">
                    使用 Jina Reader API 提取网页的纯文本内容，这可能需要几秒钟时间
                </MudText>
            }
            else
            {
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           OnClick="AddUrl"
                           Disabled="string.IsNullOrWhiteSpace(urlInput)"
                           StartIcon="Icons.Material.Filled.Add">
                    添加 URL
                </MudButton>
                <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mt-2">
                    添加网页 URL，系统将使用 Jina Reader API 自动抓取并转换为纯文本内容
                </MudText>
            }
        </div>
    </MudTabPanel>
    
</MudTabs>

@if (dataSources.Any())
{
    <div class="mb-6">
        <MudText Typo="Typo.h6" Class="mb-3">已添加的数据源 (@dataSources.Count)</MudText>
        <MudGrid>
            @foreach (var source in dataSources)
            {
                <MudItem xs="12">
                    <MudCard Outlined="true">
                        <MudCardContent Class="pa-3">
                            <div class="d-flex align-center justify-space-between">
                                <div class="d-flex align-center">
                                    @GetSourceIcon(source.Type)
                                    <div class="ml-3">
                                        <MudText Typo="Typo.subtitle1">@source.Name</MudText>
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                                            @GetSourceDescription(source)
                                        </MudText>
                                        @if (source.HasImages)
                                        {
                                            <MudChip T="string" Size="Size.Small" Color="Color.Info" Icon="Icons.Material.Filled.Image" Class="mt-1">
                                                包含 @source.ImageCount 张图片
                                            </MudChip>
                                        }
                                    </div>
                                </div>
                                <div class="d-flex align-center">
                                    <MudButton StartIcon="Icons.Material.Filled.Visibility"
                                              Color="Color.Info"
                                              Size="Size.Small"
                                              Variant="Variant.Outlined"
                                              OnClick="() => PreviewSource(source)"
                                              Class="mr-2">
                                        预览
                                    </MudButton>
                                    <MudButton StartIcon="Icons.Material.Filled.Delete"
                                              Color="Color.Error"
                                              Size="Size.Small"
                                              Variant="Variant.Outlined"
                                              OnClick="() => RemoveSource(source.Id)">
                                        删除
                                    </MudButton>
                                </div>
                            </div>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    </div>

    <div class="mb-6">
        <MudText Typo="Typo.h6" Class="mb-3">提取模式</MudText>
        <MudRadioGroup T="ExtractionMode" @bind-Value="extractionMode">
            <MudRadio T="ExtractionMode" Value="ExtractionMode.OneToOne" Color="Color.Primary">
                <MudText>一对一提取 (每个数据源生成一条记录)</MudText>
            </MudRadio>
            <MudRadio T="ExtractionMode" Value="ExtractionMode.Batch" Color="Color.Primary">
                <MudText>批量提取 (从每个数据源提取多条记录)</MudText>
            </MudRadio>
        </MudRadioGroup>
    </div>

    <div class="mb-6">
        <MudText Typo="Typo.h6" Class="mb-3">图片处理选项</MudText>
        <MudCheckBox @bind-Value="includeImagesInAI" Color="Color.Primary" Class="mb-2">
            <MudText>在 AI 处理时包含图片内容</MudText>
        </MudCheckBox>
        <MudText Typo="Typo.caption" Color="Color.Secondary" Class="ml-6">
            @if (includeImagesInAI)
            {
                <span>图片将以 Data URI 格式发送给 AI，可能会增加处理时间和成本</span>
            }
            else
            {
                <span>图片将被替换为文本占位符，仅在预览中显示</span>
            }
        </MudText>
    </div>

    @* 移除独立的继续按钮，改为使用 Stepper 内置按钮 *@
}



@code {
    // 移除 OnComplete 参数，改为通过 GetSelectionResult() 方法获取结果

    private FileUploadArea fileUploadArea = null!;
    private List<DataSource> dataSources = new();
    private ExtractionMode extractionMode = ExtractionMode.OneToOne;
    private bool includeImagesInAI = false; // 默认不包含图片
    private string urlInput = string.Empty;
    private string textInput = string.Empty;
    
    // 预览对话框相关
    private DialogOptions dialogOptions = new() { MaxWidth = MaxWidth.Large, FullWidth = true };
    
    // 处理状态指示
    private bool isProcessingFiles = false;
    private bool isProcessingUrl = false;
    private string currentProcessingFileName = string.Empty;
    private int processedFileCount = 0;
    private int totalFileCount = 0;

    private async Task OnSingleFileChanged(IBrowserFile file)
    {
        isProcessingFiles = true;
        currentProcessingFileName = file.Name;
        totalFileCount = 1;
        processedFileCount = 0;
        StateHasChanged();
        
        try
        {
            if (!FileConversionService.IsFileSupported(file.Name, file.ContentType))
            {
                Snackbar.Add($"不支持的文件类型: {file.Name}", Severity.Warning);
                return;
            }

            // 使用新的转换方法，始终获取图片信息
            var options = new FileConversionOptions
            {
                IncludeImages = true, // 始终包含图片以便预览
                KeepDataUris = true   // 保留 Data URI 格式
            };

            var result = await FileConversionService.ConvertFileToTextWithOptionsAsync(file, options);
            
            var dataSource = new DataSource
            {
                Type = DataSourceType.File,
                Name = file.Name,
                Content = result.Content, // 包含图片的完整内容
                TextOnlyContent = result.TextOnlyContent, // 纯文本内容
                Size = file.Size,
                MimeType = file.ContentType,
                HasImages = result.HasImages,
                ImageCount = result.ImageCount
            };

            dataSources.Add(dataSource);
            
            var imageInfo = result.HasImages ? $"，包含 {result.ImageCount} 张图片" : "";
            Snackbar.Add($"文件 {file.Name} 添加成功{imageInfo}", Severity.Success);
            processedFileCount = 1;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"处理文件 {file.Name} 失败: {ex.Message}", Severity.Error);
        }
        finally
        {
            // 处理完成
            isProcessingFiles = false;
            currentProcessingFileName = string.Empty;
            await fileUploadArea.ClearAsync();
            StateHasChanged();
        }
    }

    private List<string> GetAllowedExtensions()
    {
        var extensions = new List<string>();
        extensions.AddRange(FileUploadArea.FileTypePresets.DocumentExtensions);
        extensions.AddRange(FileUploadArea.FileTypePresets.SpreadsheetExtensions);
        extensions.AddRange(FileUploadArea.FileTypePresets.PresentationExtensions);
        extensions.AddRange(new[] { ".html", ".htm", ".json", ".xml" });
        return extensions;
    }

    private async Task AddUrl()
    {
        if (string.IsNullOrWhiteSpace(urlInput))
            return;

        // 开始处理URL
        isProcessingUrl = true;
        StateHasChanged();

        try
        {
            var content = await FileConversionService.GetContentFromUrlAsync(urlInput);
            
            var dataSource = new DataSource
            {
                Type = DataSourceType.Url,
                Name = urlInput,
                Content = content,
                TextOnlyContent = content, // URL 内容通常不包含图片
                Url = urlInput,
                HasImages = false,
                ImageCount = 0
            };

            dataSources.Add(dataSource);
            urlInput = string.Empty;
            
            Snackbar.Add("URL 内容获取成功", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"获取 URL 内容失败: {ex.Message}", Severity.Error);
        }
        finally
        {
            // 处理完成
            isProcessingUrl = false;
            StateHasChanged();
        }
    }

    private void AddText()
    {
        if (string.IsNullOrWhiteSpace(textInput))
            return;

        var textCount = dataSources.Count(s => s.Type == DataSourceType.Text) + 1;
        var dataSource = new DataSource
        {
            Type = DataSourceType.Text,
            Name = $"文本 {textCount}",
            Content = textInput,
            TextOnlyContent = textInput, // 文本输入不包含图片
            HasImages = false,
            ImageCount = 0
        };

        dataSources.Add(dataSource);
        textInput = string.Empty;
        
        Snackbar.Add("文本内容添加成功", Severity.Success);
    }

    private void RemoveSource(string sourceId)
    {
        dataSources.RemoveAll(s => s.Id == sourceId);
    }

    /// <summary>
    /// 获取当前选择的数据源和提取模式
    /// </summary>
    public async Task<(List<DataSource> sources, ExtractionMode mode, bool includeImages)> GetSelectionResult()
    {
        // 根据用户选择决定是否包含图片
        var processedSources = dataSources.Select(source => new DataSource
        {
            Id = source.Id,
            Type = source.Type,
            Name = source.Name,
            Content = includeImagesInAI ? source.Content : source.TextOnlyContent,
            TextOnlyContent = source.TextOnlyContent,
            Size = source.Size,
            MimeType = source.MimeType,
            Url = source.Url,
            HasImages = source.HasImages,
            ImageCount = source.ImageCount
        }).ToList();

        return (processedSources, extractionMode, includeImagesInAI);
    }

    private RenderFragment GetSourceIcon(DataSourceType type) => type switch
    {
        DataSourceType.File => @<MudIcon Icon="Icons.Material.Filled.InsertDriveFile" Color="Color.Primary" />,
        DataSourceType.Url => @<MudIcon Icon="Icons.Material.Filled.Link" Color="Color.Success" />,
        DataSourceType.Text => @<MudIcon Icon="Icons.Material.Filled.TextFields" Color="Color.Secondary" />,
        _ => @<MudIcon Icon="Icons.Material.Filled.Help" />
    };

    private string GetSourceDescription(DataSource source) => source.Type switch
    {
        DataSourceType.File => $"{(source.Size.HasValue ? $"{source.Size.Value / 1024:F1} KB" : "未知大小")}",
        DataSourceType.Url => source.Url ?? "URL",
        DataSourceType.Text => $"{source.Content.Length} 字符",
        _ => "未知类型"
    };

    private async Task PreviewSource(DataSource source)
    {
        var parameters = new DialogParameters
        {
            ["DataSource"] = source
        };

        await DialogService.ShowAsync<DataSourcePreviewDialog>("数据源预览", parameters, dialogOptions);
    }


} 