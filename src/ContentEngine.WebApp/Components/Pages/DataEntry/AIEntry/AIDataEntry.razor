@page "/data-entry/ai/{SchemaId}"
@using ContentEngine.Core.DataPipeline.Services
@using ContentEngine.Core.DataPipeline.Models
@using ContentEngine.Core.AI.Services
@using ContentEngine.WebApp.Components.Shared
@inject ISchemaDefinitionService SchemaService
@inject IFileConversionService FileConversionService
@inject IDataStructuringService DataStructuringService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<PageTitle>AI 辅助录入 - ContentEngine</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="pa-4">
    <MudStack Spacing="6">
        <!-- 统一的面包屑导航 -->
        <PageBreadcrumb Page="PageBreadcrumb.PageType.DataEntryAI" 
                       SchemaName="@schema?.Name" 
                       SchemaId="@SchemaId" />

        @if (isLoading)
        {
            <MudPaper Class="pa-8 text-center" Elevation="0">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                <MudText Class="mt-2">正在加载数据结构...</MudText>
            </MudPaper>
        }
        else if (schema == null)
        {
            <MudPaper Class="pa-8 text-center" Elevation="0">
                <MudIcon Icon="@Icons.Material.Filled.Error" Size="Size.Large" Color="Color.Error" Class="mb-4" />
                <MudText Typo="Typo.h5" GutterBottom="true">未找到数据结构</MudText>
                <MudText Class="mud-text-secondary">未找到指定的数据结构定义。</MudText>
            </MudPaper>
        }
        else
        {
            <!-- 页面标题 -->
            <div>
                <MudText Typo="Typo.h4" GutterBottom="true" Class="page-title">@schema.Name</MudText>
                <MudText Typo="Typo.body1" Color="Color.Secondary">@schema.Description</MudText>
            </div>

            <!-- AI 辅助录入向导 -->
            <div>
                <AIDataEntryWizard Schema="schema" />
            </div>
        }
    </MudStack>
</MudContainer>

<style>
    .page-title {
        font-weight: 600;
    }
</style>

@code {
    [Parameter] public string SchemaId { get; set; } = string.Empty;

    private SchemaDefinition? schema;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadSchema();
    }

    private async Task LoadSchema()
    {
        isLoading = true;
        try
        {
            if (!string.IsNullOrEmpty(SchemaId) && int.TryParse(SchemaId, out var id))
            {
                schema = await SchemaService.GetSchemaByIdAsync(id);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"加载数据结构失败: {ex.Message}", Severity.Error);
            schema = null;
        }
        finally
        {
            isLoading = false;
        }
    }
} 