@using ContentEngine.Core.DataPipeline.Models
@using ContentEngine.Core.DataPipeline.Services
@using ContentEngine.Core.Utils
@using LiteDB
@using FieldType = ContentEngine.Core.DataPipeline.Models.FieldType
@using ContentEngine.WebApp.Components.Shared
@using ContentEngine.WebApp.Components.Pages.DataEntry.Shared
@inject IDataEntryService DataEntryService
@inject ISnackbar Snackbar

<MudCard Elevation="1" Class="rounded-lg">
    <MudCardHeader>
        <CardHeaderContent>
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                <MudIcon Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small" />
                <MudText Typo="Typo.h6">单条录入</MudText>
            </MudStack>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@Icons.Material.Filled.Info" 
                          Color="Color.Default" 
                          Size="Size.Small"
                          Title="帮助信息" />
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent Class="pa-4">
        <DataRecordCard Schema="@Schema"
                        FormData="@formData"
                        Title="录入新数据"
                        Icon="@Icons.Material.Filled.Add"
                        IconColor="Color.Primary"
                        IsEditable="true"
                        ShowActions="true"
                        ShowDeleteButton="false"
                        IsSaving="@isSaving"
                        OnSave="HandleSave" />
    </MudCardContent>
    <MudCardActions Class="d-flex justify-end gap-2 pa-4">
        <MudButton Variant="Variant.Text" 
                   OnClick="ClearForm" 
                   Disabled="@isSaving"
                   StartIcon="@Icons.Material.Filled.Clear">
            清空表单
        </MudButton>
    </MudCardActions>
</MudCard>

@code {
    [Parameter] public SchemaDefinition Schema { get; set; } = null!;
    [Parameter] public EventCallback OnDataSaved { get; set; }

    private bool isSaving = false;
    private Dictionary<string, object?> formData = new();

    protected override void OnInitialized()
    {
        InitializeFormData();
    }

    private void InitializeFormData()
    {
        formData.Clear();
        foreach (var field in Schema.Fields)
        {
            formData[field.Name] = GetDefaultValue(field);
        }
    }

    private object? GetDefaultValue(FieldDefinition field)
    {
        return field.Type switch
        {
            FieldType.Text => string.Empty,
            FieldType.Number => 0.0,
            FieldType.Boolean => false,
            FieldType.Date => DateTime.Today,
            FieldType.Reference => string.Empty,
            _ => null
        };
    }

    private async Task HandleSave(BsonDocument bsonDoc)
    {
        isSaving = true;
        try
        {
            // 保存数据
            await DataEntryService.CreateDataAsync(Schema.Name, bsonDoc);
            
            // 通知父组件
            await OnDataSaved.InvokeAsync();
            
            Snackbar.Add("数据保存成功！", Severity.Success);
            
            // 清空表单
            ClearForm();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"保存数据失败: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSaving = false;
        }
    }

    private void ClearForm()
    {
        InitializeFormData();
        StateHasChanged();
    }
} 