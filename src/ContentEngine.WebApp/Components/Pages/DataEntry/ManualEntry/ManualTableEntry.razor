@using ContentEngine.Core.DataPipeline.Models
@using ContentEngine.Core.DataPipeline.Services
@using ContentEngine.Core.Storage
@using ContentEngine.WebApp.Components.Shared
@using ContentEngine.Core.Utils
@using FieldType = ContentEngine.Core.DataPipeline.Models.FieldType
@using LiteDB
@inject ISchemaDefinitionService SchemaService
@inject IDataEntryService DataEntryService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>批量录入 - @Schema?.Name</PageTitle>

@if (Schema == null)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
}
else
{
    <MudCard Elevation="1" Class="rounded-lg">
        <MudCardHeader>
            <CardHeaderContent>
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                    <MudIcon Icon="@Icons.Material.Filled.TableChart" Color="Color.Primary" Size="Size.Small" />
                    <MudText Typo="Typo.h6">批量录入</MudText>
                </MudStack>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIconButton Icon="@Icons.Material.Filled.Info" 
                              Color="Color.Default" 
                              Size="Size.Small"
                              Title="帮助信息" />
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent Class="pa-0">
            <MudToolBar Dense="true" Class="px-4 py-2">
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          StartIcon="@Icons.Material.Filled.Add" 
                          OnClick="AddNewRow" 
                          Size="Size.Small">
                    添加行
                </MudButton>
                <MudButton Variant="Variant.Outlined" 
                          Color="Color.Error" 
                          StartIcon="@Icons.Material.Filled.DeleteSweep" 
                          OnClick="ClearAllRows" 
                          Disabled="!tableData.Any()"
                          Size="Size.Small"
                          Class="ml-2">
                    清空所有
                </MudButton>
                <MudSpacer />
                <MudChip T="string" Size="Size.Small" Color="Color.Info" Variant="Variant.Text">
                    共 @tableData.Count 行
                </MudChip>
            </MudToolBar>

            @if (tableData.Any())
            {
                <div class="table-wrapper">
                    <DataTable @ref="dataTableRef"
                               Schema="@Schema"
                               Data="@tableData" 
                               Mode="DataTable.DataTableMode.ManualEntry"
                               CustomConfiguration="@GetCustomConfiguration()"
                               OnRowRemoved="OnRowRemoved"
                               OnRowChanged="OnRowChanged" />
                </div>
            }
            else
            {
                <div class="empty-state pa-8 text-center">
                    <MudIcon Icon="@Icons.Material.Filled.TableChart" Size="Size.Large" Color="Color.Secondary" Class="mb-4" />
                    <MudText Typo="Typo.h6" GutterBottom="true">暂无数据行</MudText>
                    <MudText Color="Color.Secondary" Class="mb-4">点击"添加行"开始批量录入数据</MudText>
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              StartIcon="@Icons.Material.Filled.Add"
                              OnClick="AddNewRow">
                        添加第一行
                    </MudButton>
                </div>
            }
        </MudCardContent>
        @if (tableData.Any())
        {
            <MudCardActions Class="d-flex justify-end gap-2 pa-4">
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Success" 
                          StartIcon="@Icons.Material.Filled.Save" 
                          OnClick="SaveAllData" 
                          Disabled="isSaving">
                    @if (isSaving)
                    {
                        <MudProgressCircular Indeterminate="true" Size="Size.Small" Class="mr-2" />
                    }
                    保存全部 (@tableData.Count)
                </MudButton>
            </MudCardActions>
        }
    </MudCard>
}

@code {
    [Parameter] public SchemaDefinition Schema { get; set; } = null!;
    [Parameter] public EventCallback OnDataSaved { get; set; }
    [Parameter] public bool RequireDeleteConfirmation { get; set; } = false; // 手动录入模式默认不需要确认

    private List<BsonDocument> tableData = new();
    private bool isSaving = false;
    private DataTable? dataTableRef;

    protected override async Task OnInitializedAsync()
    {
        if (Schema == null)
        {
            Snackbar.Add($"未找到结构定义。", Severity.Error);
            NavigationManager.NavigateTo("/schema-management");
        }
    }

    private DataTable.DataTableConfiguration? GetCustomConfiguration()
    {
        if (Schema == null || dataTableRef == null) return null;
        
        // 创建自定义配置，基于 ManualEntry 模式但可以自定义删除确认
        var config = new DataTable.DataTableConfiguration
        {
            IsReadOnly = false,
            AllowInlineEdit = false,
            ShowIdColumn = false,
            ShowPagination = false,
            ShowRowCount = false, // 在工具栏中显示了
            Height = "400px", // 固定高度，避免嵌套滚动
            EmptyTitle = "暂无数据行",
            EmptyMessage = "点击添加行开始批量录入数据",
            RequireDeleteConfirmation = RequireDeleteConfirmation,
            DeleteConfirmationTitle = "确认删除",
            DeleteConfirmationMessage = RequireDeleteConfirmation ? "确定要删除这一行数据吗？" : ""
        };

        // 添加删除行操作
        config.Actions.Add(new DataTable.DataTableAction
        {
            Icon = Icons.Material.Filled.Delete,
            Tooltip = "删除行",
            Color = Color.Error,
            Action = dataTableRef.HandleRemoveRow
        });

        return config;
    }

    private void AddNewRow()
    {
        var newRow = new BsonDocument();
        foreach (var field in Schema.Fields)
        {
            newRow[field.Name] = GetDefaultBsonValue(field);
        }
        tableData.Add(newRow);
    }

    private void RemoveRow(BsonDocument row)
    {
        tableData.Remove(row);
    }

    private Task OnRowRemoved(BsonDocument row)
    {
        // 行已经在DataTable组件中被移除了，这里只需要更新状态 (如果需要)
        return Task.CompletedTask;
    }

    private Task OnRowChanged(BsonDocument row)
    {
        // 数据已经在DataTable组件中被更新了
        return Task.CompletedTask;
    }

    private void ClearAllRows()
    {
        tableData.Clear();
        StateHasChanged(); // Ensure UI updates after clearing all
    }

    private BsonValue GetDefaultBsonValue(FieldDefinition field)
    {
        return field.Type switch
        {
            FieldType.Text => new BsonValue(string.Empty),
            FieldType.Number => new BsonValue(0.0),
            FieldType.Boolean => new BsonValue(false),
            FieldType.Date => new BsonValue(DateTime.Today),
            FieldType.Reference => new BsonValue(string.Empty),
            _ => BsonValue.Null
        };
    }
    
    private async Task SaveAllData()
    {
        if (Schema == null || !tableData.Any())
        {
            Snackbar.Add("没有可保存的数据。", Severity.Info);
            return;
        }

        // 数据验证
        for (int i = 0; i < tableData.Count; i++)
        {
            var row = tableData[i];
            foreach (var field in Schema.Fields)
            {
                if (field.IsRequired)
                {
                    if (!row.ContainsKey(field.Name) || row[field.Name].IsNull || 
                        (field.Type == FieldType.Text && string.IsNullOrWhiteSpace(row[field.Name].AsString)))
                    {
                        Snackbar.Add($"第 {i + 1} 行的字段 '{field.Name}' 是必填项。", Severity.Warning);
                        return;
                    }
                }
            }
        }

        isSaving = true;
        try
        {
            var savedCount = 0;
            foreach (var row in tableData)
            {
                // 保存数据
                await DataEntryService.CreateDataAsync(Schema.Name, row);
                savedCount++;
            }
            
            // 通知父组件
            await OnDataSaved.InvokeAsync();
            
            Snackbar.Add($"成功保存 {savedCount} 条数据！", Severity.Success);
            
            // 清空表格
            ClearAllRows();
            AddNewRow(); // 添加一个新行供继续录入
        }
        catch (Exception ex)
        {
            Snackbar.Add($"保存数据失败: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }
}

<style>
    .table-wrapper {
        /* 移除额外的容器样式，让DataTable自己管理滚动 */
        padding: 0 16px 16px 16px;
    }
    
    .empty-state {
        min-height: 300px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }
</style> 