@using ContentEngine.Core.DataPipeline.Models
@using ContentEngine.Core.DataPipeline.Services
@using ContentEngine.Core.Utils
@using LiteDB
@using FieldType = ContentEngine.Core.DataPipeline.Models.FieldType
@inject IDataEntryService DataEntryService
@inject ISnackbar Snackbar

<MudCard Elevation="1" Class="table-entry-card">
    <MudCardHeader>
        <CardHeaderContent>
            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                <MudText Typo="Typo.h6">批量录入数据</MudText>
                <MudStack Row="true" Spacing="2">
                    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Add" 
                              OnClick="AddNewRow" Size="Size.Small">
                        添加行
                    </MudButton>
                    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Clear" 
                              OnClick="ClearAllRows" Size="Size.Small" Color="Color.Secondary">
                        清空所有
                    </MudButton>
                </MudStack>
            </MudStack>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent Class="pa-0">
        @if (tableData.Any())
        {
            <div class="table-container">
                <MudTable Items="@tableData" Hover="true" Dense="true" Class="data-entry-table">
                    <HeaderContent>
                        <MudTh Style="width: 60px;">操作</MudTh>
                        @foreach (var field in Schema.Fields)
                        {
                            <MudTh Style="@GetColumnStyle(field)">
                                @field.Name
                                @if (field.IsRequired)
                                {
                                    <span class="required-indicator">*</span>
                                }
                            </MudTh>
                        }
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                          Size="Size.Small" 
                                          Color="Color.Error"
                                          OnClick="@(() => RemoveRow(context))" />
                        </MudTd>
                        @foreach (var field in Schema.Fields)
                        {
                            <MudTd>
                                @RenderTableCell(context, field)
                            </MudTd>
                        }
                    </RowTemplate>
                </MudTable>
            </div>
        }
        else
        {
            <div class="empty-state pa-8 text-center">
                <MudIcon Icon="@Icons.Material.Filled.TableChart" Size="Size.Large" Color="Color.Secondary" Class="mb-4" />
                <MudText Typo="Typo.h6" GutterBottom="true">暂无数据行</MudText>
                <MudText Color="Color.Secondary" Class="mb-4">点击"添加行"开始批量录入数据</MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" 
                          OnClick="AddNewRow">
                    添加第一行
                </MudButton>
            </div>
        }
    </MudCardContent>
    @if (tableData.Any())
    {
        <MudCardActions Class="pa-4">
            <MudStack Row="true" Spacing="2" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="w-100">
                <MudText Typo="Typo.body2" Color="Color.Secondary">
                    共 @tableData.Count 行数据
                </MudText>
                <MudStack Row="true" Spacing="2">
                    <MudButton Variant="Variant.Text" OnClick="ClearAllRows" Disabled="@isSaving">
                        清空所有
                    </MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                              OnClick="SaveAllData" Disabled="@(!HasValidData() || isSaving)">
                        @if (isSaving)
                        {
                            <MudProgressCircular Class="mr-2" Size="Size.Small" Indeterminate="true" />
                            <span>保存中...</span>
                        }
                        else
                        {
                            <span>保存所有数据</span>
                        }
                    </MudButton>
                </MudStack>
            </MudStack>
        </MudCardActions>
    }
</MudCard>

@code {
    [Parameter] public SchemaDefinition Schema { get; set; } = null!;
    [Parameter] public EventCallback OnDataSaved { get; set; }

    private List<Dictionary<string, object?>> tableData = new();
    private bool isSaving = false;

    protected override void OnInitialized()
    {
        // 初始添加一行
        AddNewRow();
    }

    private void AddNewRow()
    {
        var newRow = new Dictionary<string, object?>();
        foreach (var field in Schema.Fields)
        {
            newRow[field.Name] = GetDefaultValue(field);
        }
        tableData.Add(newRow);
        StateHasChanged();
    }

    private void RemoveRow(Dictionary<string, object?> row)
    {
        tableData.Remove(row);
        StateHasChanged();
    }

    private void ClearAllRows()
    {
        tableData.Clear();
        StateHasChanged();
    }

    private object? GetDefaultValue(FieldDefinition field)
    {
        return field.Type switch
        {
            FieldType.Text => string.Empty,
            FieldType.Number => 0.0,
            FieldType.Boolean => false,
            FieldType.Date => DateTime.Today,
            FieldType.Reference => string.Empty,
            _ => null
        };
    }

    private string GetColumnStyle(FieldDefinition field)
    {
        return field.Type switch
        {
            FieldType.Boolean => "width: 100px; min-width: 100px;",
            FieldType.Date => "width: 150px; min-width: 150px;",
            FieldType.Number => "width: 120px; min-width: 120px;",
            FieldType.Text when field.Name.ToLower().Contains("description") || 
                               field.Name.ToLower().Contains("comment") ||
                               field.Name.ToLower().Contains("bio") => "width: 250px; min-width: 200px;",
            _ => "width: 150px; min-width: 120px;"
        };
    }

    private RenderFragment RenderTableCell(Dictionary<string, object?> rowData, FieldDefinition field) => __builder =>
    {
        switch (field.Type)
        {
            case FieldType.Text:
                <MudTextField T="string" 
                              Value="@GetCellStringValue(rowData, field.Name)"
                              ValueChanged="@(value => SetCellValue(rowData, field.Name, value))"
                              Variant="Variant.Outlined"
                              Margin="Margin.Dense"
                              Class="table-cell-input" />
                break;

            case FieldType.Number:
                <MudNumericField T="double" 
                                 Value="@GetCellDoubleValue(rowData, field.Name)"
                                 ValueChanged="@(value => SetCellValue(rowData, field.Name, value))"
                                 Variant="Variant.Outlined"
                                 Margin="Margin.Dense"
                                 Class="table-cell-input" />
                break;

            case FieldType.Boolean:
                <MudCheckBox T="bool" 
                             Checked="@GetCellBoolValue(rowData, field.Name)"
                             CheckedChanged="@((bool value) => SetCellValue(rowData, field.Name, value))"
                             Color="Color.Primary"
                             Size="Size.Small" />
                break;

            case FieldType.Date:
                <MudDatePicker Date="@GetCellDateValue(rowData, field.Name)"
                               DateChanged="@(value => SetCellValue(rowData, field.Name, value))"
                               Variant="Variant.Outlined"
                               Margin="Margin.Dense"
                               Class="table-cell-input" />
                break;

            case FieldType.Reference:
                <MudTextField T="string" 
                              Value="@GetCellStringValue(rowData, field.Name)"
                              ValueChanged="@(value => SetCellValue(rowData, field.Name, value))"
                              Variant="Variant.Outlined"
                              Margin="Margin.Dense"
                              Class="table-cell-input"
                              Placeholder="引用ID" />
                break;
        }
    };

    private string GetCellStringValue(Dictionary<string, object?> rowData, string fieldName)
    {
        return rowData.TryGetValue(fieldName, out var value) ? value?.ToString() ?? string.Empty : string.Empty;
    }

    private double GetCellDoubleValue(Dictionary<string, object?> rowData, string fieldName)
    {
        if (rowData.TryGetValue(fieldName, out var value))
        {
            if (value is double d) return d;
            if (double.TryParse(value?.ToString(), out var parsed)) return parsed;
        }
        return 0.0;
    }

    private bool GetCellBoolValue(Dictionary<string, object?> rowData, string fieldName)
    {
        if (rowData.TryGetValue(fieldName, out var value))
        {
            if (value is bool b) return b;
            if (bool.TryParse(value?.ToString(), out var parsed)) return parsed;
        }
        return false;
    }

    private DateTime? GetCellDateValue(Dictionary<string, object?> rowData, string fieldName)
    {
        if (rowData.TryGetValue(fieldName, out var value))
        {
            if (value is DateTime dt) return dt;
            if (DateTime.TryParse(value?.ToString(), out var parsed)) return parsed;
        }
        return DateTime.Today;
    }

    private void SetCellValue(Dictionary<string, object?> rowData, string fieldName, object? value)
    {
        rowData[fieldName] = value;
        StateHasChanged();
    }

    private bool HasValidData()
    {
        if (!tableData.Any()) return false;

        foreach (var row in tableData)
        {
            foreach (var field in Schema.Fields.Where(f => f.IsRequired))
            {
                if (!row.TryGetValue(field.Name, out var value) || 
                    value == null || 
                    (value is string str && string.IsNullOrWhiteSpace(str)))
                {
                    return false;
                }
            }
        }
        return true;
    }

    private async Task SaveAllData()
    {
        if (!HasValidData()) return;

        isSaving = true;
        try
        {
            var savedCount = 0;
            foreach (var row in tableData)
            {
                // 转换为 BsonDocument
                var bsonDoc = BsonFormUtils.ConvertFormDataToBson(row, Schema);
                
                // 保存数据
                await DataEntryService.CreateDataAsync(Schema.Name, bsonDoc);
                savedCount++;
            }
            
            // 通知父组件
            await OnDataSaved.InvokeAsync();
            
            Snackbar.Add($"成功保存 {savedCount} 条数据！", Severity.Success);
            
            // 清空表格
            ClearAllRows();
            AddNewRow(); // 添加一个新行供继续录入
        }
        catch (Exception ex)
        {
            Snackbar.Add($"保存数据失败: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSaving = false;
        }
    }
}

<style>
    .table-entry-card {
        border: 1px solid #E0E0E0;
        border-radius: 12px;
    }

    .table-entry-card .mud-card-header {
        background-color: #FAFAFA;
        border-bottom: 1px solid #E0E0E0;
    }

    .table-container {
        max-height: 600px;
        overflow: auto;
    }

    .data-entry-table .mud-table-head {
        background-color: #F8F9FA;
    }

    .data-entry-table .mud-table-head .mud-table-cell {
        font-weight: 600;
        border-bottom: 2px solid #E0E0E0;
    }

    .table-cell-input {
        min-width: 100px;
    }

    .table-cell-input .mud-input-root {
        font-size: 0.875rem;
    }

    .required-indicator {
        color: #F44336;
        margin-left: 4px;
    }

    .empty-state {
        min-height: 300px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }
</style> 