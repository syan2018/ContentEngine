@page "/data-entry/manual/{SchemaName}/table"
@using ContentEngine.Core.DataPipeline.Models
@using ContentEngine.Core.DataPipeline.Services
@using ContentEngine.Core.Storage
@using ContentEngine.WebApp.Components.Shared
@using ContentEngine.Core.Utils
@using FieldType = ContentEngine.Core.DataPipeline.Models.FieldType
@using LiteDB // Added for BsonDocument
@inject ISchemaDefinitionService SchemaService
@inject IDataEntryService DataEntryService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>批量表格录入 - @Schema?.Name</PageTitle>

@if (Schema == null)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
}
else
{
    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
        <MudPaper Elevation="1" Class="pa-4 rounded-lg">
            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
                <MudText Typo="Typo.h5">批量表格录入: @Schema.Name</MudText>
                <MudIconButton Icon="@Icons.Material.Filled.Info" Color="Color.Default" Link="/docs/data-entry/manual-table" Target="_blank" />
            </MudStack>

            <MudToolBar Dense="true" Class="mb-2">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="AddNewRow" Class="mr-2">添加行</MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteSweep" OnClick="ClearAllRows" Disabled="!tableData.Any()">清空所有</MudButton>
                <MudSpacer />
                <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Save" OnClick="SaveAllData" Disabled="!tableData.Any() || isSaving">
                    @if (isSaving)
                    {
                        <MudProgressCircular Indeterminate="true" Size="Size.Small" Class="mr-2" />
                    }
                    保存全部 (@tableData.Count)
                </MudButton>
            </MudToolBar>

            <MudCardContent Class="pa-0">
                @if (tableData.Any())
                {
                    <div class="table-container">
                        <DataTable Schema="@Schema"
                                   EditableData="@tableData" 
                                   IsReadOnly="false"
                                   ShowActions="true"
                                   ShowRowCount="false"
                                   ShowPagination="false"
                                   TableHeight="calc(100vh - 380px)" 
                                   OnRowRemoved="OnRowRemoved"
                                   OnRowChanged="OnRowChanged"
                                   Class="data-entry-table" />
                    </div>
                }
                else
                {
                    <div class="empty-state pa-8 text-center">
                        <MudIcon Icon="@Icons.Material.Filled.TableChart" Size="Size.Large" Color="Color.Secondary" Class="mb-4" />
                        <MudText Typo="Typo.h6" GutterBottom="true">暂无数据行</MudText>
                        <MudText Color="Color.Secondary" Class="mb-4">点击"添加行"开始批量录入数据</MudText>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"
                                   OnClick="AddNewRow">
                            添加第一行
                        </MudButton>
                    </div>
                }
            </MudCardContent>
            @if (tableData.Any())
            {
                <MudCardActions Class="d-flex justify-end pt-4">
                    <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Save" OnClick="SaveAllData" Disabled="isSaving">
                        @if (isSaving)
                        {
                            <MudProgressCircular Indeterminate="true" Size="Size.Small" Class="mr-2" />
                        }
                        保存全部 (@tableData.Count)
                    </MudButton>
                </MudCardActions>
            }
        </MudPaper>
    </MudContainer>
}


@code {
    [Parameter] public string SchemaName { get; set; } = null!;
    [Parameter] public EventCallback OnDataSaved { get; set; }

    private SchemaDefinition? Schema;
    private List<BsonDocument> tableData = new(); // Changed type
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        Schema = await SchemaService.GetSchemaByNameAsync(SchemaName);
        if (Schema != null)
        {
             // 初始添加一行
            AddNewRow();
        }
        else
        {
            Snackbar.Add($"未找到名为 {SchemaName} 的结构定义。", Severity.Error);
            NavigationManager.NavigateTo("/schema-management");
        }
    }

    private void AddNewRow()
    {
        var newRow = new BsonDocument();
        foreach (var field in Schema.Fields)
        {
            newRow[field.Name] = GetDefaultBsonValue(field);
        }
        tableData.Add(newRow);
        //StateHasChanged(); // DataTable will trigger its own state changes
    }

    private void RemoveRow(BsonDocument row) // Changed type
    {
        tableData.Remove(row);
        //StateHasChanged();
    }

    private Task OnRowRemoved(BsonDocument row) // Changed type
    {
        // 行已经在DataTable组件中被移除了，这里只需要更新状态 (如果需要)
        // tableData is already modified by DataTable's RemoveRow -> EditableData.Remove(row)
        // If this component needs to react, do it here.
        return Task.CompletedTask;
    }

    private Task OnRowChanged(BsonDocument row) // Changed type
    {
        // 数据已经在DataTable组件中被更新了
        // BsonDocument instance in tableData is directly modified by DataTable
        return Task.CompletedTask;
    }

    private void ClearAllRows()
    {
        tableData.Clear();
        StateHasChanged(); // Ensure UI updates after clearing all
    }

    private BsonValue GetDefaultBsonValue(FieldDefinition field)
    {
        return field.Type switch
        {
            FieldType.Text => new BsonValue(string.Empty),
            FieldType.Number => new BsonValue(0.0),
            FieldType.Boolean => new BsonValue(false),
            FieldType.Date => new BsonValue(DateTime.Today),
            FieldType.Reference => new BsonValue(string.Empty), // Assuming reference is stored as string ID or similar
            _ => BsonValue.Null
        };
    }
    
    private async Task SaveAllData()
    {
        if (Schema == null || !tableData.Any())
        {
            Snackbar.Add("没有可保存的数据。", Severity.Info);
            return;
        }

        // 数据验证
        for (int i = 0; i < tableData.Count; i++)
        {
            var row = tableData[i];
            foreach (var field in Schema.Fields)
            {
                if (field.IsRequired)
                {
                    if (!row.ContainsKey(field.Name) || row[field.Name].IsNull || 
                        (field.Type == FieldType.Text && string.IsNullOrWhiteSpace(row[field.Name].AsString)))
                    {
                        Snackbar.Add($"第 {i + 1} 行的字段 '{field.Name}' 是必填项。", Severity.Warning);
                        return;
                    }
                }
                // Add other field-specific validations if needed
            }
        }

        isSaving = true;
        try
        {
            var savedCount = 0;
            foreach (var row in tableData)
            {
                // 保存数据
                await DataEntryService.CreateDataAsync(Schema.Name, row);
                savedCount++;
            }
            
            // 通知父组件
            await OnDataSaved.InvokeAsync();
            
            Snackbar.Add($"成功保存 {savedCount} 条数据！", Severity.Success);
            
            // 清空表格
            ClearAllRows();
            AddNewRow(); // 添加一个新行供继续录入
        }
        catch (Exception ex)
        {
            Snackbar.Add($"保存数据失败: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }
}

<style>
    .table-container {
        height: calc(100vh - 380px); /* Adjust based on your layout */
        overflow-y: auto;
    }
    .data-entry-table .mud-table-container {
        max-height: 100% !important; /* Ensure DataTable's internal container takes full height */
    }
</style> 