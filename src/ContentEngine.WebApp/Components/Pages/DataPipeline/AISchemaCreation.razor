@page "/ai-schema-creation"
@using ContentEngine.Core.AI.Services
@inject NavigationManager NavigationManager
@inject Microsoft.Extensions.Localization.IStringLocalizer<AISchemaCreation> Localizer 
@inject ISchemaSuggestionService SchemaSuggestionService
@inject ISchemaDefinitionService SchemaDefinitionService
@inject ILogger<AISchemaCreation> Logger
@attribute [StreamRendering(true)]
@rendermode InteractiveServer

@using FieldType = ContentEngine.Core.DataPipeline.Models.FieldType

<PageTitle>@Localizer["PageTitle"]</PageTitle>

<div class="container mt-4">
    <h1>@Localizer["PageTitle"]</h1>
    <p class="text-muted mb-4">@Localizer["PageDescription"]</p>

    <!-- Step Indicator -->
    <div class="steps mb-5">
        <div class="step @(CurrentStep == 1 ? "active" : null)">@Localizer["Step1"]</div>
        <div class="step @(CurrentStep == 2 ? "active" : null)">@Localizer["Step2"]</div>
        <div class="step @(CurrentStep == 3 ? "active" : null)">@Localizer["Step3"]</div>
    </div>

    @if (CurrentStep == 1)
    {
        @* 第1步：AI生成建议 *@
        <div class="row">
            <div class="col">
                <!-- Basic Information Card -->
                <div class="card mb-4">
                    <div class="card-header">
                        @Localizer["SchemaBasicsHeader"]
                    </div>
                    <div class="card-body">
                        <div class="mb-3 row">
                            <label for="schemaName" class="col-sm-3 col-form-label">@Localizer["SchemaNameLabel"]:</label>
                            <div class="col-sm-9">
                                <input type="text" id="schemaName" class="form-control" @bind="SchemaName" placeholder="@Localizer["SchemaNamePlaceholder"]">
                            </div>
                        </div>
                        <div class="mb-3 row">
                            <label for="schemaDesc" class="col-sm-3 col-form-label">@Localizer["SchemaDescLabel"]:</label>
                            <div class="col-sm-9">
                                <input type="text" id="schemaDesc" class="form-control" @bind="SchemaDescription" placeholder="@Localizer["SchemaDescPlaceholder"]">
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Prompt Input Card -->
                <div class="card mb-4">
                    <div class="card-header">
                        @Localizer["DataNeedsHeader"]
                    </div>
                    <div class="card-body">
                        <p>@Localizer["DataNeedsInstruction"]</p>
                        <textarea class="form-control" rows="6" @bind="UserPrompt" placeholder="@Localizer["UserPromptPlaceholder"]"></textarea>
                        <div class="text-end mt-3">
                            <button class="btn btn-secondary me-2" @onclick="ShowSampleDialog">@Localizer["AddSampleButton"]</button>
                            <button class="btn btn-primary" @onclick="AnalyzePrompt" disabled="@IsAnalyzing">
                                @if (IsAnalyzing)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span class="ms-1">@Localizer["AnalyzingStatus"]</span>
                                }
                                else
                                {
                                    <i class="bi bi-magic me-1"></i>
                                    <span>@Localizer["AnalyzeButton"]</span>
                                }
                            </button>
                        </div>
                        @if (!string.IsNullOrWhiteSpace(SampleData))
                        {
                            <div class="alert alert-info mt-3">
                                <strong>@Localizer["SampleDataPreviewLabel"]:</strong>
                                <pre style="white-space:pre-wrap;">@SampleData</pre>
                            </div>
                        }
                    </div>
                </div>

                <!-- 样例数据输入弹窗 -->
                @if (SampleDialogVisible)
                {
                    <div class="modal fade show d-block" tabindex="-1" style="background:rgba(0,0,0,0.3);">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">@Localizer["SampleDialogTitle"]</h5>
                                    <button type="button" class="btn-close" @onclick="HideSampleDialog"></button>
                                </div>
                                <div class="modal-body">
                                    <textarea class="form-control" rows="8" @bind="SampleDialogText"></textarea>
                                    <div class="form-text">@Localizer["SampleDialogTip"]</div>
                                </div>
                                <div class="modal-footer">
                                    <button class="btn btn-secondary" @onclick="HideSampleDialog">@Localizer["CancelButton"]</button>
                                    <button class="btn btn-primary" @onclick="OnSampleDialogOk">@Localizer["OkButton"]</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                @if (SuggestedSchema != null)
                {
                    <div class="ai-section card mb-4">
                        <div class="card-header bg-info-subtle">
                            @Localizer["AIResultHeader"]
                        </div>
                        <div class="card-body">
                            @((MarkupString)FormatSchemaSuggestionHtml(SuggestedSchema))
                            <p class="mt-3 text-muted small">@Localizer["AIRefineInstruction"]</p>
                        </div>
                    </div>
                }
                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @ErrorMessage
                    </div>
                }
                <div class="d-flex justify-content-between mt-4 mb-4">
                    <button class="btn btn-secondary" disabled>@Localizer["PreviousButton"]</button>
                    <button class="btn btn-primary" @onclick="GoToStep2" disabled="@(SuggestedSchema == null)">@Localizer["NextButton"] <i class="bi bi-arrow-right"></i></button>
                </div>
            </div>
        </div>
    }
    else if (CurrentStep == 2)
    {
        @* 第2步：字段编辑与AI优化 *@
        <div class="card mb-4">
            <div class="card-header">@Localizer["EditFieldsHeader"]</div>
            <div class="card-body">
                <table class="table table-bordered table-sm">
                    <thead>
                        <tr>
                            <th>@Localizer["FieldNameLabel"]</th>
                            <th>@Localizer["FieldTypeLabel"]</th>
                            <th>@Localizer["FieldRequiredLabel"]</th>
                            <th>@Localizer["FieldCommentLabel"]</th>
                            <th>@Localizer["ActionsLabel"]</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < EditableFields.Count; i++)
                        {
                            var currentField = EditableFields[i];
                            <tr @key="currentField">
                                <td><input class="form-control form-control-sm" @bind="currentField.Name" /></td>
                                <td>
                                    <select class="form-select form-select-sm" @bind="currentField.Type">
                                        @foreach (FieldType type in Enum.GetValues(typeof(FieldType)))
                                        {
                                            <option value="@type">@type</option>
                                        }
                                    </select>
                                </td>
                                <td><input type="checkbox" class="form-check-input" @bind="currentField.IsRequired" /></td>
                                <td><input class="form-control form-control-sm" @bind="currentField.Comment" /></td>
                                <td>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveField(currentField)">@Localizer["RemoveButton"]</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <button class="btn btn-sm btn-outline-success mt-2" @onclick="AddField">+ @Localizer["AddFieldButton"]</button>
                <hr />
                <div class="mb-2">
                    <label>@Localizer["AIRefineFeedbackLabel"]</label>
                    <textarea class="form-control" rows="2" @bind="UserFeedback"></textarea>
                </div>
                @* Button Layout Optimization *@
                <div class="d-flex justify-content-between mt-4">
                    <button class="btn btn-secondary" @onclick="GoToStep1">@Localizer["PreviousButton"]</button>
                    <div>
                        <button class="btn btn-info me-2" @onclick="RefineFieldsByAI" disabled="@IsRefining">
                            @if (IsRefining) { <span class="spinner-border spinner-border-sm"></span> @Localizer["RefiningStatus"] }
                            else { <i class="bi bi-lightning"></i> @Localizer["AIRefineButton"] }
                        </button>
                        <button class="btn btn-primary" @onclick="GoToStep3" disabled="@(!EditableFields.Any(f => !string.IsNullOrWhiteSpace(f.Name)))">@Localizer["NextButton"] <i class="bi bi-arrow-right"></i></button>
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="alert alert-danger mt-2">@ErrorMessage</div>
                }
            </div>
        </div>
    }
    else if (CurrentStep == 3)
    {
        @* 第3步：最终确认与注册 *@
        <div class="card mb-4">
            <div class="card-header">@Localizer["ConfirmHeader"]</div>
            <div class="card-body">
                <h5>@Localizer["SchemaNameLabel"]: @SchemaName</h5>
                <h6>@Localizer["SchemaDescLabel"]: @SchemaDescription</h6>
                <table class="table table-bordered table-sm mt-3">
                    <thead>
                        <tr>
                            <th>@Localizer["FieldNameLabel"]</th>
                            <th>@Localizer["FieldTypeLabel"]</th>
                            <th>@Localizer["FieldRequiredLabel"]</th>
                            <th>@Localizer["FieldCommentLabel"]</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var field in EditableFields)
                        {
                            <tr>
                                <td>@field.Name</td>
                                <td>@field.Type</td>
                                <td>@(field.IsRequired ? Localizer["FieldRequired"] : Localizer["FieldOptional"])</td>
                                <td>@field.Comment</td>
                            </tr>
                        }
                    </tbody>
                </table>
                 @* Button Layout Optimization *@
                <div class="d-flex justify-content-between mt-4">
                    <button class="btn btn-secondary" @onclick="GoToStep2">@Localizer["PreviousButton"]</button>
                    <button class="btn btn-success" @onclick="RegisterSchema" disabled="@IsRegistering">@Localizer["RegisterButton"]</button>
                </div>
                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="alert alert-danger mt-2">@ErrorMessage</div>
                }
                @if (RegisterSuccess)
                {
                    <div class="alert alert-success mt-2">@Localizer["RegisterSuccess"]</div>
                }
            </div>
        </div>
    }
</div>

@code {
    private int CurrentStep { get; set; } = 1;
    private string SchemaName { get; set; } = "";
    private string SchemaDescription { get; set; } = "";
    private string UserPrompt { get; set; } = "";
    private string ErrorMessage { get; set; } = "";
    private bool IsAnalyzing { get; set; } = false;
    private bool IsRefining { get; set; } = false;
    private bool IsRegistering { get; set; } = false;
    private bool RegisterSuccess { get; set; } = false;

    private SchemaDefinition? SuggestedSchema { get; set; }
    private List<FieldDefinition> EditableFields { get; set; } = new();
    private string? UserFeedback { get; set; }

    // 样例数据相关
    private string? SampleData { get; set; }
    private bool SampleDialogVisible { get; set; } = false;
    private string SampleDialogText { get; set; } = string.Empty;

    private void ShowSampleDialog()
    {
        SampleDialogText = SampleData ?? string.Empty;
        SampleDialogVisible = true;
    }
    private void HideSampleDialog()
    {
        SampleDialogVisible = false;
    }
    private void OnSampleDialogOk()
    {
        SampleData = SampleDialogText;
        SampleDialogVisible = false;
    }

    private async Task AnalyzePrompt()
    {
        IsAnalyzing = true;
        ErrorMessage = string.Empty;
        SuggestedSchema = null;
        StateHasChanged();

        if (string.IsNullOrWhiteSpace(UserPrompt) || string.IsNullOrWhiteSpace(SchemaName))
        {
            ErrorMessage = Localizer["MissingInputError"];
            IsAnalyzing = false;
            StateHasChanged();
            return;
        }

        try
        {
            SuggestedSchema = await SchemaSuggestionService.SuggestSchemaAsync(UserPrompt, SchemaName, SchemaDescription, SampleData);
            if (SuggestedSchema == null || SuggestedSchema.Fields == null || SuggestedSchema.Fields.Count == 0)
            {
                ErrorMessage = Localizer["NoFieldsSuggested"];
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "AI schema suggestion failed.");
            ErrorMessage = $"{Localizer["AnalysisError"]}: {ex.Message}";
            SuggestedSchema = null;
        }
        finally
        {
            IsAnalyzing = false;
            StateHasChanged();
        }
    }

    private void GoToStep2()
    {
        if (SuggestedSchema != null)
        {
            EditableFields = SuggestedSchema.Fields.Select(f => new FieldDefinition
            {
                Name = f.Name,
                Type = f.Type,
                IsRequired = f.IsRequired,
                ReferenceSchemaName = f.ReferenceSchemaName,
                Comment = f.Comment
            }).ToList();
            ErrorMessage = string.Empty;
            CurrentStep = 2;
        }
    }
    private void GoToStep1()
    {
        CurrentStep = 1;
        ErrorMessage = string.Empty;
    }
    private void GoToStep3()
    {
        ErrorMessage = string.Empty;
        CurrentStep = 3;
    }
    private void AddField()
    {
        EditableFields.Add(new FieldDefinition());
    }
    private void RemoveField(FieldDefinition fieldToRemove)
    {
        EditableFields.Remove(fieldToRemove);
    }
    private async Task RefineFieldsByAI()
    {
        IsRefining = true;
        ErrorMessage = string.Empty;
        try
        {
            var refined = await SchemaSuggestionService.RefineSchemaAsync(EditableFields, UserPrompt, UserFeedback);
            if (refined != null && refined.Count > 0)
            {
                EditableFields = refined;
            }
            else
            {
                ErrorMessage = Localizer["NoFieldsSuggested"];
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "AI refine fields failed.");
            ErrorMessage = $"{Localizer["AnalysisError"]}: {ex.Message}";
        }
        finally
        {
            IsRefining = false;
            StateHasChanged();
        }
    }
    private async Task RegisterSchema()
    {
        IsRegistering = true;
        ErrorMessage = string.Empty;
        RegisterSuccess = false;
        try
        {
            var schema = new SchemaDefinition
            {
                Name = SchemaName,
                Description = SchemaDescription,
                Fields = EditableFields.Where(f => !string.IsNullOrWhiteSpace(f.Name)).ToList()
            };
            await SchemaDefinitionService.CreateSchemaAsync(schema);
            RegisterSuccess = true;
            StateHasChanged();
            await Task.Delay(1200);
            NavigationManager.NavigateTo("/schemas");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Register schema failed.");
            ErrorMessage = $"{Localizer["RegisterError"]}: {ex.Message}";
        }
        finally
        {
            IsRegistering = false;
        }
    }

    private string FormatSchemaSuggestionHtml(SchemaDefinition? schema)
    {
        if (schema == null || schema.Fields == null || schema.Fields.Count == 0)
            return $"<p>{Localizer["NoFieldsSuggested"]}</p>";

        var sb = new System.Text.StringBuilder();
        sb.AppendFormat("<p>{0}</p>", Localizer["AIAnalysisIntro"]);
        sb.AppendLine("<ul>");

        foreach (var field in schema.Fields)
        {
            string typeDisplay = Localizer[$"FieldType{field.Type}"];
            if (field.Type == FieldType.Reference && !string.IsNullOrWhiteSpace(field.ReferenceSchemaName))
            {
                typeDisplay = Localizer["FieldTypeReferenceLinked", field.ReferenceSchemaName];
            }

            string requiredDisplay = field.IsRequired ? Localizer["FieldRequired"] : Localizer["FieldOptional"];
            string commentDisplay = !string.IsNullOrWhiteSpace(field.Comment) ? $"<span class='text-muted ms-2'>({System.Net.WebUtility.HtmlEncode(field.Comment)})</span>" : string.Empty;

            sb.AppendFormat("<li><strong>{0}:</strong> {1} ({2}) {3}</li>",
                            System.Net.WebUtility.HtmlEncode(field.Name),
                            typeDisplay,
                            requiredDisplay,
                            commentDisplay);
        }
        sb.AppendLine("</ul>");
        return sb.ToString();
    }
}
