@page "/schema-management/create"
@using Microsoft.Extensions.Logging
@inject ILogger<CreatePage> _logger
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@using ContentEngine.Core.DataPipeline.Models 
@inject ISchemaDefinitionService SchemaService 

<MudContainer MaxWidth="MaxWidth.Large" Class="pa-4">
    <MudStack Spacing="4">
        <div>
            <MudText Typo="Typo.h3" GutterBottom="true" Class="page-main-title">创建数据结构</MudText>
            <MudText Typo="Typo.subtitle1" Class="mud-text-secondary page-sub-title">定义新的数据结构 (Schema) 以组织和管理您的内容。</MudText>
        </div>

        <MudTabs Elevation="2" Rounded="true" PanelClass="pa-4 mt-4" Justify="Justify.Center">
            <MudTabPanel Text="AI 辅助创建">
                <AiAssistedSchemaCreationForm OnValidSchemaSubmit="HandleSubmit" OnCancelClicked="NavigateBackToList" /> 
            </MudTabPanel>
            <MudTabPanel Text="手动创建">
                <ManualSchemaCreationForm @ref="_manualForm" OnValidSchemaSubmit="HandleSubmit" OnCancelClicked="NavigateBackToList" /> 
            </MudTabPanel>
        </MudTabs>

         @* Buttons are now handled within each form component *@

    </MudStack>
</MudContainer>

<style>
    .page-main-title {
        font-weight: 600; /* Matching .page-title from Index.razor.css */
    }
    .page-sub-title {
        margin-bottom: 24px; /* Add some space below subtitle */
    }
</style>

@code {
    private ManualSchemaCreationForm? _manualForm;
    private bool _isSaving = false;

    // Handles submission from the Manual form
    private async Task HandleSubmit(SchemaDefinition schema)
    {
        _logger.LogInformation("[CreatePage] HandleSubmit called for schema: {SchemaName}", schema.Name);
        if (_isSaving) 
        {
            _logger.LogWarning("[CreatePage] HandleSubmit: Already saving, returning.");
            return;
        }
        _isSaving = true;
        Snackbar.Add($"(手动) 正在保存数据结构...", Severity.Info);
        try
        {
            await SaveSchema(schema);
            Snackbar.Add($"数据结构 '{schema.Name}' 保存成功!", Severity.Success);
            _manualForm?.ResetForm(); 
            _logger.LogInformation("[CreatePage] Form reset called after HandleSubmit.");
            _logger.LogInformation("[CreatePage] Navigating back to list after 1 second delay.");
            await Task.Delay(1000); 
            NavigateBackToList();
        }
        catch (Exception ex)
        { 
            _logger.LogError(ex, "[CreatePage] Error saving schema {SchemaName} from submission.", schema.Name); 
            Snackbar.Add($"保存失败: {ex.Message}", Severity.Error, config => { config.RequireInteraction = true; });
        }
        finally
        {
            _isSaving = false;
        }
    }


    // Common save logic - sourceType parameter removed
    private async Task SaveSchema(SchemaDefinition schema)
    {
        _logger.LogInformation("[CreatePage] SaveSchema called. Schema Name: {SchemaName}", schema.Name);
        // Snackbar messages are also handled by the calling methods
        
        _logger.LogInformation("[CreatePage] SaveSchema: Calling SchemaService.CreateSchemaAsync for schema {SchemaName}.", schema.Name);
        await SchemaService.CreateSchemaAsync(schema);
        _logger.LogInformation("[CreatePage] SaveSchema: CreateSchemaAsync completed for schema {SchemaName}.", schema.Name);
        // Success Snackbar and navigation are handled by the calling methods
    }

    private void NavigateBackToList()
    {
        if (_isSaving) return; // Prevent navigation while saving
        NavigationManager.NavigateTo("/schema-management");
    }
} 