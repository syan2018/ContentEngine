@page "/schema-management"
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4">
    <MudStack Spacing="6">
        <MudGrid Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            <MudItem xs="12" sm="8">
                <MudText Typo="Typo.h4" GutterBottom="true" Class="page-title">数据管理</MudText>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary">创建和管理您的数据结构定义 (Schema)</MudText>
            </MudItem>
            <MudItem xs="12" sm="4" Class="d-flex justify-sm-end align-self-center">
                <MudButton Variant="Variant.Filled" Size="Size.Large" Class="create-schema-button"
                           OnClick="NavigateToCreateSchema" StartIcon="@Material.Filled.Add">
                    创建新数据结构
                </MudButton>
            </MudItem>
        </MudGrid>

        <MudGrid AlignItems="AlignItems.Center" Spacing="2">
            <MudItem xs="12" sm="9">
                <MudTextField @bind-Value="SearchTerm" Placeholder="搜索数据结构..." Variant="Variant.Outlined" 
                              Adornment="Adornment.Start" AdornmentIcon="@Material.Filled.Search" Clearable="true" 
                              Immediate="true" DebounceInterval="300" Class="search-textfield" />
            </MudItem>
            <MudItem xs="12" sm="3" Class="d-flex justify-sm-start justify-xs-stretch">
                <MudButton Variant="Variant.Outlined" StartIcon="@Material.Filled.FilterList" FullWidth="true" Class="filter-button">
                    筛选
                </MudButton> 
            </MudItem>
        </MudGrid>

        @if (_schemas == null)
        {
            <MudPaper Class="pa-4 d-flex flex-column align-center justify-center loading-empty-paper" Elevation="0">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                <MudText Class="mt-2">正在加载数据结构列表...</MudText>
            </MudPaper>
        }
        else if (!_filteredSchemas?.Any() ?? true)
        {
            <MudPaper Class="pa-8 text-center loading-empty-paper" Elevation="0">
                <MudIcon Icon="@Material.Filled.LibraryBooks" Size="Size.Large" Color="Color.Default" Class="mb-4 empty-state-icon" />
                <MudText Typo="Typo.h5" GutterBottom="true">@(string.IsNullOrWhiteSpace(SearchTerm) ? "暂无数据结构" : "未找到匹配的数据结构")</MudText>
                <MudText Class="mud-text-secondary">@(string.IsNullOrWhiteSpace(SearchTerm) ? "点击右上角 \"创建新数据结构\" 开始吧！" : "尝试修改您的搜索词或清除筛选条件。")</MudText>
            </MudPaper>
        }
        else
        {
            <MudGrid Spacing="3">
                @foreach (var schema in _filteredSchemas)
                {
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudCard Class="d-flex flex-column schema-card" Elevation="0">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Start">
                                        <MudText Typo="Typo.h6" Class="schema-card-title" @onclick="() => NavigateToDetails(schema.Id)">@schema.Name</MudText>
                                        <MudChip T="string" Size="Size.Small" Variant="Variant.Outlined" Class="schema-card-chip">
                                            @($"{schema.FieldCount} 字段")
                                        </MudChip>
                                    </MudStack>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent Class="pt-0">
                                <MudText Typo="Typo.body2" Class="mud-text-secondary mb-3 schema-card-description" Lines="2" Title="@schema.Description">@schema.Description</MudText>
                                <MudStack Spacing="1" Class="schema-card-meta">
                                    <MudGrid Spacing="1" Justify="Justify.SpaceBetween">
                                        <MudItem><MudText Typo="Typo.caption">记录数:</MudText></MudItem>
                                        <MudItem Class="text-right"><MudText Typo="Typo.caption" Class="font-weight-medium mud-text-primary">@schema.RecordCount</MudText></MudItem>
                                    </MudGrid>
                                    <MudGrid Spacing="1" Justify="Justify.SpaceBetween">
                                        <MudItem><MudText Typo="Typo.caption">更新于:</MudText></MudItem>
                                        <MudItem Class="text-right"><MudText Typo="Typo.caption" Class="font-weight-medium mud-text-primary">@schema.LastModified.ToString("yyyy-MM-dd")</MudText></MudItem>
                                    </MudGrid>
                                </MudStack>
                            </MudCardContent>
                            <MudCardActions Class="mt-auto pa-2">
                                <MudGrid Spacing="2" Class="ma-0 pa-0">
                                    <MudItem xs="6" Class="pa-0">
                                        <MudButton FullWidth="true" Size="Size.Medium" Variant="Variant.Text" 
                                                   StartIcon="@Material.Filled.Visibility" OnClick="() => NavigateToDetails(schema.Id)" 
                                                   Class="action-button schema-action-button">
                                            查看
                                        </MudButton>
                                    </MudItem>
                                    <MudItem xs="6" Class="pa-0">
                                        <MudButton FullWidth="true" Size="Size.Medium" Variant="Variant.Text" 
                                                   StartIcon="@Material.Filled.Input" OnClick="() => NavigateToDataEntry(schema.Name)" 
                                                   Class="action-button schema-action-button">
                                            注入
                                        </MudButton>
                                    </MudItem>
                                </MudGrid>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }

        <MudPagination Count="_totalPages" @bind-SelectedPage="CurrentPage" Color="Color.Primary" Class="mt-8 d-flex justify-center" Disabled="_totalPages <= 1" />
    </MudStack>
</MudContainer>

<style>
    .page-title {
        font-weight: 600;
    }

    .create-schema-button {
        background-color: #6A0DAD !important; /* Important to override MudBlazor default */
        color: white !important;
        text-transform: none;
        border-radius: 8px;
    }

    .search-textfield .mud-input-slot {
        border-radius: 8px;
    }

    .filter-button {
        height: 56px;
        border-color: #E0E0E0;
        color: #424242;
        text-transform: none;
        border-radius: 8px;
    }

    .loading-empty-paper {
        min-height: 300px;
    }

    .empty-state-icon {
        font-size: 4rem;
    }

    .schema-card {
        height: 100%;
        border: 1px solid #E0E0E0;
        border-radius: 12px;
    }

    .schema-card .mud-card-header {
        padding: 16px;
    }

    .schema-card-title {
        font-weight: 600;
        cursor: pointer;
    }
    
    .schema-card-chip {
        background-color: #F5F5F5;
        color: #424242;
        border-color: #E0E0E0 !important; /* Important to override MudChip's own variant styles */
        border-radius: 6px;
        font-size: 0.75rem;
        height: 24px;
        padding: 0 8px;
        line-height: normal; /* For better vertical alignment of text */
    }

    .schema-card .mud-card-content {
        padding-left: 16px;
        padding-right: 16px;
        padding-bottom: 12px;
    }

    .schema-card-meta {
        font-size: 0.875rem;
    }

    .action-button {
        /* Shared styles for action buttons if any beyond specific ones below */
    }

    .action-button:hover {
        background-color: #F5F5F5 !important;
    }

    .schema-action-button {
        color: #424242 !important;
        text-transform: none;
        /* justify-content: center; Let MudButton handle this with FullWidth */
    }
</style>

@code {
    private class TempDisplaySchema
    {
        public string Id { get; set; } = Guid.NewGuid().ToString();
        public string Name { get; set; } = "示例 Schema";
        public string Description { get; set; } = "这是一个用于演示的 Schema 定义。这是一个非常非常非常长的描述，用来测试溢出和省略号截断的效果，看看是不是能够正常显示。";
        public int FieldCount { get; set; } = 5;
        public int RecordCount { get; set; } = 100;
        public DateTime LastModified { get; set; } = DateTime.Now.AddDays(-1);
    }

    private List<TempDisplaySchema>? _schemas;
    private List<TempDisplaySchema>? _filteredSchemas;
    private string _searchTerm = string.Empty;
    private int _currentPage = 1;
    private const int PageSize = 8; 
    private int _totalPages = 1;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(250); 
        _schemas = new List<TempDisplaySchema>
        {
            new TempDisplaySchema { Id="game-char", Name = "游戏角色", Description = "定义游戏中的角色属性和特征，例如姓名、职业、等级、技能等。", FieldCount = 12, RecordCount = 48, LastModified = DateTime.Parse("2023-05-01") },
            new TempDisplaySchema { Id="game-item", Name = "游戏道具", Description = "定义游戏中的各类道具及其属性，包括武器、防具、消耗品。", FieldCount = 8, RecordCount = 156, LastModified = DateTime.Parse("2023-04-28") },
            new TempDisplaySchema { Id="game-quest", Name = "游戏任务", Description = "定义游戏中的任务结构、目标、奖励和NPC对话。这是一个比较长的描述为了测试卡片的高度和内容截断效果，应该能够正常显示省略号。", FieldCount = 10, RecordCount = 32, LastModified = DateTime.Parse("2023-04-25") },
            new TempDisplaySchema { Id="game-scene", Name = "游戏场景", Description = "定义游戏中的场景、地图区域、环境特效和可交互对象。", FieldCount = 15, RecordCount = 24, LastModified = DateTime.Parse("2023-04-20") },
            new TempDisplaySchema { Id="blog-post", Name = "博客文章", Description = "内容管理系统的标准文章格式，包含标题、正文、作者、分类和标签。", FieldCount = 7, RecordCount = 112, LastModified = DateTime.Now.AddDays(-3) },
            new TempDisplaySchema { Id="product-info", Name = "产品信息", Description = "电子商务平台的产品详细信息，包括规格、价格、库存。", FieldCount = 20, RecordCount = 1250, LastModified = DateTime.Now.AddDays(-1) },
            new TempDisplaySchema { Id="customer-data", Name = "客户数据", Description = "CRM系统中的客户联系信息和交互历史。", FieldCount = 18, RecordCount = 870, LastModified = DateTime.Now.AddDays(-5) },
            new TempDisplaySchema { Id="employee-records", Name = "员工档案", Description = "人力资源管理系统中的员工基本信息和合同。", FieldCount = 25, RecordCount = 300, LastModified = DateTime.Now.AddDays(-15) },
            new TempDisplaySchema { Id="project-tasks", Name = "项目任务", Description = "项目管理工具中的任务分配、截止日期和状态。", FieldCount = 10, RecordCount = 56, LastModified = DateTime.Now.AddDays(-2) },
        };
        ApplyFilterAndPagination();
    }

    private void ApplyFilterAndPagination()
    {
        if (_schemas == null) 
        {
            _filteredSchemas = null;
            InvokeAsync(StateHasChanged);
            return;
        }

        var tempFiltered = _schemas.AsEnumerable();

        if (!string.IsNullOrWhiteSpace(_searchTerm))
        {
            tempFiltered = tempFiltered.Where(s =>
                (s.Name?.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (s.Description?.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ?? false));
        }
        
        _totalPages = (int)Math.Ceiling(tempFiltered.Count() / (double)PageSize);
        _totalPages = Math.Max(1, _totalPages); 

        if (_currentPage > _totalPages) _currentPage = _totalPages;
        if (_currentPage < 1) _currentPage = 1;

        _filteredSchemas = tempFiltered
            .Skip((_currentPage - 1) * PageSize)
            .Take(PageSize)
            .ToList();
        
        InvokeAsync(StateHasChanged); 
    }

    private string SearchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm == value) return;
            _searchTerm = value;
            _currentPage = 1; 
            ApplyFilterAndPagination();
        }
    }
    
    private int CurrentPage 
    {
        get => _currentPage;
        set
        {
            if (_currentPage == value) return;
            _currentPage = value;
            ApplyFilterAndPagination();
        }
    }

    private void NavigateToCreateSchema()
    {
        NavigationManager.NavigateTo("/schema-management/create");
    }

    private void NavigateToDetails(string schemaId)
    {
        NavigationManager.NavigateTo($"/schema-management/details/{schemaId}");
    }

    private void NavigateToDataEntry(string schemaName) 
    {
        NavigationManager.NavigateTo($"/data-entry/manual/{schemaName}"); 
    }
}