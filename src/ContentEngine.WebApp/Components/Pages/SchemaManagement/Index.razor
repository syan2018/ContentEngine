@page "/schema-management"
@using ContentEngine.WebApp.Components.Shared
@using ContentEngine.Core.DataPipeline.Services
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ISchemaDefinitionService SchemaService

<PageTitle>数据管理 - ContentEngine</PageTitle>

<SchemaListPage @ref="_schemaListPageRef" Configuration="@_pageConfiguration" />

@code {
    private SchemaListPageConfiguration _pageConfiguration = new();
    private SchemaListPage? _schemaListPageRef;

    protected override void OnInitialized()
    {
        _pageConfiguration = new SchemaListPageConfiguration
        {
            PageTitle = "数据管理",
            PageDescription = "创建和管理您的数据结构定义 (Schema)",
            SearchPlaceholder = "搜索数据结构...",
            LoadingText = "正在加载数据结构列表...",
            EmptyStateIcon = Icons.Material.Filled.LibraryBooks,
            EmptyStateTitle = "暂无数据结构",
            EmptyStateDescription = "点击右上角 \"创建新数据结构\" 开始吧！",
            NoSearchResultsTitle = "未找到匹配的数据结构",
            NoSearchResultsDescription = "尝试修改您的搜索词或清除筛选条件。",
            ShowCreateButton = true,
            CreateButtonText = "创建新数据结构",
            OnCreateClick = NavigateToCreateSchema,
            SchemaCardMode = SchemaCard.SchemaCardMode.Management,
            OnDeleteRequested = DeleteSchemaAsync,
            EnablePagination = true,
            PageSize = 8
        };
    }

    private void NavigateToCreateSchema()
    {
        NavigationManager.NavigateTo("/schema-management/create");
    }

    private async Task DeleteSchemaAsync(SchemaDefinition schemaToDelete)
    {
        var parameters = new DialogParameters<ConfirmationDialog> 
        { 
            { nameof(ConfirmationDialog.ContentText), $"确定要删除数据结构 '{schemaToDelete.Name}' 吗？此操作不可恢复。"} ,
            { nameof(ConfirmationDialog.OkButtonText), "确定删除" },
            { nameof(ConfirmationDialog.OkButtonColor), Color.Error }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("确认删除", parameters, options);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            try
            {
                Snackbar.Add($"正在删除 '{schemaToDelete.Name}'...", Severity.Info);
                await SchemaService.DeleteSchemaAsync(schemaToDelete.Id);
                Snackbar.Add($"数据结构 '{schemaToDelete.Name}' 已删除。", Severity.Success);
                await _schemaListPageRef?.RefreshAsync()!;
            }
            catch (Exception ex)
            {
                 Snackbar.Add($"删除失败: {ex.Message}", Severity.Error, config => { config.RequireInteraction = true; });
            }
        }
    }
}