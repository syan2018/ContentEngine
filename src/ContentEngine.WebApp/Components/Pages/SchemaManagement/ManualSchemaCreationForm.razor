@using Microsoft.Extensions.Logging
@using ContentEngine.WebApp.Components.Shared 
@inject ILogger<ManualSchemaCreationForm> _logger

<MudForm @ref="_form" Model="_schema" OnValidSubmit="SubmitInternalForm">
    
    <MudText Typo="Typo.h6" Class="mb-4 mt-2">字段定义</MudText> 
    <FieldDefinitionTable Fields="_schema.Fields" 
                          ReadOnly="false" 
                          ShowAddButton="true" 
                          ShowRemoveButton="true" 
                          OnAddField="AddField" 
                          OnRemoveField="RemoveField" />

    @if (!_schema.Fields.Any() && _form != null && _form.IsValid) // Show only if form is validated AND no fields exist, to avoid premature warning
    {
        <MudText Color="Color.Warning" Class="my-4">请至少添加一个字段定义。</MudText>
    }
    
    @* Submit and Cancel buttons are handled by CreatePage.razor via TriggerSubmitAsync *@

    @if (!string.IsNullOrWhiteSpace(_errorMessage))
    {
        <MudAlert Severity="Severity.Error" Class="mt-4">@_errorMessage</MudAlert>
    }

</MudForm>


@code {
    [Parameter] public EventCallback<List<FieldDefinition>> OnValidSchemaSubmit { get; set; }
    [Parameter] public EventCallback OnCancelClicked { get; set; }

    private MudForm? _form;
    private SchemaDefinition _schema = new() { Fields = new List<FieldDefinition>() }; 
    private string? _errorMessage;

    protected override void OnInitialized()
    {
        if (!_schema.Fields.Any())
        {

            AddField(); 
        }
    }

    // AddField and RemoveField are now primarily to be called by the FieldDefinitionTable's callbacks
    private void AddField()
    {
        _schema.Fields.Add(new FieldDefinition() { IsRequired = false }); // Default IsRequired to false
        StateHasChanged(); 
    }

    private void RemoveField(FieldDefinition fieldToRemove)
    {
        _schema.Fields.Remove(fieldToRemove);
        StateHasChanged();
    }

    private async Task ProcessSchemaSubmission()
    {
        _logger.LogInformation("[ManualForm] ProcessSchemaSubmission started.");
        if (_form == null) { /* ... logging ... */ return; }

        await _form.Validate(); 
        _logger.LogInformation("[ManualForm] Form validation (MudForm level for potential top-level form items - though none exist now): IsValid = {IsValid}", _form.IsValid);
        
        // Additional validation for fields themselves (e.g., required names within FieldDefinitionTable is handled internally by MudTextField)
        // We still need to check for at least one field and duplicate names here before submitting the list.

        _errorMessage = null;
        var validFields = _schema.Fields.Where(f => !string.IsNullOrWhiteSpace(f.Name)).ToList();
        
        if (!validFields.Any())
        {
            _errorMessage = "数据结构必须至少包含一个有效字段定义。";
            _logger.LogWarning("[ManualForm] No valid fields defined. Error message set.");
            return;
        }

        // Check for empty names in the fields that are supposed to be part of the schema
        if (_schema.Fields.Any(f => string.IsNullOrWhiteSpace(f.Name)))
        {
            // This check is a bit tricky because FieldDefinitionTable's MudTextField handles Required for field.Name.
            // If _form.Validate() passed, it implies all *visible and active* MudTextFields marked Required are filled.
            // However, a user could have added a field, not filled its name, and it might not trigger _form validation if not setup for deep validation.
            // The .Where(f => !string.IsNullOrWhiteSpace(f.Name)) above already filters these out for submission.
            // The main concern is if a field was added but its name is empty, it shouldn't prevent submission if other valid fields exist.
            // The current logic correctly submits only `validFields`.
        }

        var duplicateFields = validFields
                                .GroupBy(f => f.Name, StringComparer.OrdinalIgnoreCase)
                                .Where(g => g.Count() > 1)
                                .Select(g => g.Key);
        if (duplicateFields.Any())
        {
            var duplicates = string.Join(", ", duplicateFields);
            _errorMessage = $"发现重复的字段名: {duplicates}。字段名必须唯一（不区分大小写）。";
            _logger.LogWarning("[ManualForm] Duplicate fields found: {DuplicateFields}", duplicates);
            return;
        }

        _logger.LogInformation("[ManualForm] All checks passed. Invoking OnValidSchemaSubmit with {FieldCount} fields.", validFields.Count);
        await OnValidSchemaSubmit.InvokeAsync(validFields);
        _logger.LogInformation("[ManualForm] OnValidSchemaSubmit invoked.");
    }

    private async Task SubmitInternalForm()
    {
        _logger.LogInformation("[ManualForm] SubmitInternalForm called by MudForm, now calling ProcessSchemaSubmission.");
        await ProcessSchemaSubmission();
    }
    
    public async Task TriggerSubmitAsync()
    {
        _logger.LogInformation("[ManualForm] TriggerSubmitAsync called by parent, calling ProcessSchemaSubmission.");
        await ProcessSchemaSubmission();
    }

    private async Task OnCancelInternal()
    {
        await OnCancelClicked.InvokeAsync();
    }

    public void ResetForm()
    {
        _schema = new SchemaDefinition() { Fields = new List<FieldDefinition>() };
        AddField(); 
        _errorMessage = null;
        _form?.ResetValidation(); 
        StateHasChanged();
        _logger.LogInformation("[ManualForm] Form has been reset.");
    }
} 