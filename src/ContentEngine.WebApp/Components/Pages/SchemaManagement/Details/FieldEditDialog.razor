@using ContentEngine.Core.DataPipeline.Models
@using ContentEngine.Core.DataPipeline.Services
@using Microsoft.Extensions.Logging
@using MudBlazor
@using FieldType = ContentEngine.Core.DataPipeline.Models.FieldType
@inject ILogger<FieldEditDialog> Logger
@inject ISnackbar Snackbar
@inject IFieldEditService FieldEditService

<MudDialog>
    <DialogContent>
        <MudContainer Style="max-width: 800px;">
            <MudStack Spacing="4">
                <!-- Â≠óÊÆµÂü∫Êú¨‰ø°ÊÅØÁºñËæë -->
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                <MudIcon Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" />
                                <MudText Typo="Typo.h6">ÁºñËæëÂ≠óÊÆµ: @OriginalField.Name</MudText>
                            </MudStack>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid Spacing="3">
                            <MudItem xs="12" md="6">
                                <MudTextField @bind-Value="EditedField.Name"
                                             Label="Â≠óÊÆµÂêçÁß∞"
                                             Required="true"
                                             Variant="Variant.Outlined"
                                             HelperText="Â≠óÊÆµÁöÑÂÜÖÈÉ®Ê†áËØÜÂêçÁß∞"
                                             Error="@(!IsFieldNameValid)"
                                             ErrorText="@fieldNameError" />
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudSelect T="FieldType" 
                                          @bind-Value="EditedField.Type"
                                          Label="Êï∞ÊçÆÁ±ªÂûã"
                                          Variant="Variant.Outlined"
                                          HelperText="Â≠óÊÆµÁöÑÊï∞ÊçÆÁ±ªÂûã">
                                    @foreach (FieldType type in Enum.GetValues(typeof(FieldType)))
                                    {
                                        <MudSelectItem Value="@type">@GetFieldTypeDisplayName(type)</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudSwitch T="bool" @bind-Value="EditedField.IsRequired"
                                          Label="ÂøÖÂ°´Â≠óÊÆµ"
                                          Color="Color.Primary" />
                            </MudItem>
                            @if (EditedField.Type == FieldType.Reference)
                            {
                                <MudItem xs="12" md="6">
                                    <MudTextField @bind-Value="EditedField.ReferenceSchemaName"
                                                 Label="ÂºïÁî®SchemaÂêçÁß∞"
                                                 Variant="Variant.Outlined"
                                                 HelperText="ÂºïÁî®ÁöÑSchemaÂêçÁß∞" />
                                </MudItem>
                            }
                            <MudItem xs="12">
                                <MudTextField @bind-Value="EditedField.Comment"
                                             Label="Â≠óÊÆµÂ§áÊ≥®"
                                             Lines="3"
                                             Variant="Variant.Outlined"
                                             HelperText="Â≠óÊÆµÁöÑÁî®ÈÄîËØ¥ÊòéÂíåÂ§áÊ≥®‰ø°ÊÅØ" />
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>

                <!-- ÂèòÊõ¥ÂΩ±ÂìçÂàÜÊûê -->
                @if (HasChanges)
                {
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                    <MudIcon Icon="@Icons.Material.Filled.Analytics" Color="Color.Warning" />
                                    <MudText Typo="Typo.h6">ÂèòÊõ¥ÂΩ±ÂìçÂàÜÊûê</MudText>
                                </MudStack>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudStack Spacing="3">
                                @if (recordCount > 0)
                                {
                                    <MudAlert Severity="Severity.Warning" Class="mb-3">
                                        <MudText Typo="Typo.subtitle2" Class="font-weight-bold">
                                            ‚ö†Ô∏è Ê≠§Êìç‰ΩúÂ∞ÜÂΩ±Âìç @recordCount Êù°Êó¢ÊúâÊï∞ÊçÆËÆ∞ÂΩï
                                        </MudText>
                                    </MudAlert>
                                }

                                <!-- ÂèòÊõ¥ËØ¶ÊÉÖ -->
                                <MudExpansionPanels Elevation="0">
                                    @if (changeAnalysis?.Changes != null)
                                    {
                                        @foreach (var change in changeAnalysis.Changes)
                                        {
                                            <MudExpansionPanel Text="@change.Title" Icon="@GetMudIcon(change.Icon)">
                                                <MudStack Spacing="2">
                                                    <MudText Typo="Typo.body2">@change.Description</MudText>
                                                    @if (change.Risks.Any())
                                                    {
                                                        <MudText Typo="Typo.subtitle2" Color="Color.Error" Class="font-weight-bold">ÊΩúÂú®È£éÈô©:</MudText>
                                                        @foreach (var risk in change.Risks)
                                                        {
                                                            <MudText Typo="Typo.body2" Color="Color.Error">‚Ä¢ @risk</MudText>
                                                        }
                                                    }
                                                    @if (change.Actions.Any())
                                                    {
                                                        <MudText Typo="Typo.subtitle2" Color="Color.Info" Class="font-weight-bold">Á≥ªÁªüÂ∞ÜÊâßË°å:</MudText>
                                                        @foreach (var action in change.Actions)
                                                        {
                                                            <MudText Typo="Typo.body2" Color="Color.Info">‚Ä¢ @action</MudText>
                                                        }
                                                    }
                                                </MudStack>
                                            </MudExpansionPanel>
                                        }
                                    }
                                </MudExpansionPanels>

                                <!-- È´òÈ£éÈô©Êìç‰ΩúÁ°ÆËÆ§ -->
                                @if (IsHighRiskOperation)
                                {
                                    <MudPaper Class="pa-4" Style="background-color: var(--mud-palette-error-lighten); border-left: 4px solid var(--mud-palette-error);">
                                        <MudStack Spacing="2">
                                            <MudText Typo="Typo.subtitle1" Color="Color.Error" Class="font-weight-bold">
                                                üö® È´òÈ£éÈô©Êìç‰ΩúË≠¶Âëä
                                            </MudText>
                                            <MudText Typo="Typo.body2">
                                                Ê≠§Êìç‰ΩúÂèØËÉΩÂØºËá¥Êï∞ÊçÆ‰∏¢Â§±Êàñ‰∏ç‰∏ÄËá¥„ÄÇËØ∑‰ªîÁªÜÈòÖËØª‰∏äËø∞ÂΩ±ÂìçÂàÜÊûêÔºåÁ°ÆËÆ§ÊÇ®‰∫ÜËß£ÊâÄÊúâÈ£éÈô©„ÄÇ
                                            </MudText>
                                            <MudCheckBox T="bool" @bind-Checked="riskConfirmed" 
                                                        Label="ÊàëÂ∑≤‰∫ÜËß£È£éÈô©Âπ∂Á°ÆËÆ§ÊâßË°åÊ≠§Êìç‰Ωú" 
                                                        Color="Color.Error" />
                                        </MudStack>
                                    </MudPaper>
                                }
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                }

                <!-- Êï∞ÊçÆÈ¢ÑËßà (Â¶ÇÊûúÊúâÊï∞ÊçÆ) -->
                @if (recordCount > 0 && HasChanges)
                {
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                        <MudIcon Icon="@Icons.Material.Filled.Preview" Color="Color.Info" />
                                        <MudText Typo="Typo.h6">Êï∞ÊçÆÈ¢ÑËßà</MudText>
                                    </MudStack>
                                    <MudButton Variant="Variant.Text" 
                                              Size="Size.Small" 
                                              OnClick="LoadDataPreview"
                                              Disabled="isLoadingPreview">
                                        @if (isLoadingPreview)
                                        {
                                            <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-1" />
                                            <span>Âä†ËΩΩ‰∏≠...</span>
                                        }
                                        else
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.Refresh" Size="Size.Small" Class="mr-1" />
                                            <span>Âà∑Êñ∞È¢ÑËßà</span>
                                        }
                                    </MudButton>
                                </MudStack>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            @if (dataPreview != null && dataPreview.Any())
                            {
                                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-3">
                                    ÊòæÁ§∫Ââç @Math.Min(dataPreview.Count, 5) Êù°ËÆ∞ÂΩïÁöÑÂèòÊõ¥È¢ÑËßà
                                </MudText>
                                <MudTable Items="@dataPreview.Take(5)" Dense="true" Hover="true" Bordered="true">
                                    <HeaderContent>
                                        <MudTh>ËÆ∞ÂΩïID</MudTh>
                                        <MudTh>ÂΩìÂâçÂÄº</MudTh>
                                        <MudTh>ÂèòÊõ¥Âêé</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd>@context.RecordId</MudTd>
                                        <MudTd>
                                            <MudText Typo="Typo.body2" Class="font-mono">
                                                @(context.CurrentValue ?? "null")
                                            </MudText>
                                        </MudTd>
                                        <MudTd>
                                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                                <MudText Typo="Typo.body2" Class="font-mono" Color="@GetStatusColor(context.Status)">
                                                    @context.NewValue
                                                </MudText>
                                                @if (context.WillLoseData)
                                                {
                                                    <MudIcon Icon="@Icons.Material.Filled.Warning" Size="Size.Small" Color="Color.Error" />
                                                }
                                                @if (!string.IsNullOrEmpty(context.ErrorMessage))
                                                {
                                                    <MudTooltip Text="@context.ErrorMessage">
                                                        <MudIcon Icon="@Icons.Material.Filled.Error" Size="Size.Small" Color="Color.Error" />
                                                    </MudTooltip>
                                                }
                                            </MudStack>
                                        </MudTd>
                                    </RowTemplate>
                                </MudTable>
                            }
                            else
                            {
                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                    ÁÇπÂáª"Âà∑Êñ∞È¢ÑËßà"Êü•ÁúãÊï∞ÊçÆÂèòÊõ¥È¢ÑËßà
                                </MudText>
                            }
                        </MudCardContent>
                    </MudCard>
                }
            </MudStack>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">ÂèñÊ∂à</MudButton>
        <MudButton Color="Color.Primary" 
                  Variant="Variant.Filled" 
                  OnClick="SaveChanges"
                  Disabled="@(!CanSave)">
            @if (isSaving)
            {
                <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                <span>‰øùÂ≠ò‰∏≠...</span>
            }
            else
            {
                <span>‰øùÂ≠òÂèòÊõ¥</span>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public FieldDefinition OriginalField { get; set; } = null!;
    [Parameter] public string SchemaName { get; set; } = string.Empty;
    [Parameter] public int RecordCount { get; set; }

    private FieldDefinition EditedField = new();
    private int recordCount;
    private bool riskConfirmed = false;
    private bool isSaving = false;
    private bool isLoadingPreview = false;
    private string fieldNameError = string.Empty;
    private List<DataChangePreview> dataPreview = new();
    private FieldChangeAnalysis? changeAnalysis;

    protected override async Task OnInitializedAsync()
    {
        // Ê∑±Êã∑Ë¥ùÂéüÂßãÂ≠óÊÆµ
        EditedField = new FieldDefinition
        {
            Name = OriginalField.Name,
            Type = OriginalField.Type,
            IsRequired = OriginalField.IsRequired,
            ReferenceSchemaName = OriginalField.ReferenceSchemaName,
            Comment = OriginalField.Comment
        };
        
        recordCount = RecordCount;
        
        // Â¶ÇÊûúÊúâÊï∞ÊçÆÔºåËá™Âä®Âä†ËΩΩÂàÜÊûêÂíåÈ¢ÑËßà
        if (recordCount > 0)
        {
            await LoadChangeAnalysis();
            await LoadDataPreview();
        }
        
        StateHasChanged();
    }

    private bool HasChanges => 
        EditedField.Name != OriginalField.Name ||
        EditedField.Type != OriginalField.Type ||
        EditedField.IsRequired != OriginalField.IsRequired ||
        EditedField.ReferenceSchemaName != OriginalField.ReferenceSchemaName ||
        EditedField.Comment != OriginalField.Comment;

    private bool IsFieldNameValid
    {
        get
        {
            if (string.IsNullOrWhiteSpace(EditedField.Name))
            {
                fieldNameError = "Â≠óÊÆµÂêçÁß∞‰∏çËÉΩ‰∏∫Á©∫";
                return false;
            }
            
            if (EditedField.Name.Contains(" "))
            {
                fieldNameError = "Â≠óÊÆµÂêçÁß∞‰∏çËÉΩÂåÖÂê´Á©∫Ê†º";
                return false;
            }
            
            fieldNameError = string.Empty;
            return true;
        }
    }

    private bool IsHighRiskOperation => changeAnalysis?.IsHighRisk ?? false;

    private bool CanSave => 
        IsFieldNameValid && 
        HasChanges &&
        (!IsHighRiskOperation || riskConfirmed) &&
        !isSaving;

    private async Task LoadDataPreview()
    {
        if (recordCount == 0 || !HasChanges) return;
        
        isLoadingPreview = true;
        StateHasChanged();
        
        try
        {
            dataPreview = await FieldEditService.GetDataChangePreviewAsync(
                OriginalField, EditedField, SchemaName, 5);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Âä†ËΩΩÊï∞ÊçÆÈ¢ÑËßàÂ§±Ë¥•");
            Snackbar.Add("Âä†ËΩΩÊï∞ÊçÆÈ¢ÑËßàÂ§±Ë¥•", Severity.Error);
        }
        finally
        {
            isLoadingPreview = false;
            StateHasChanged();
        }
    }

    private async Task LoadChangeAnalysis()
    {
        if (!HasChanges) return;
        
        try
        {
            changeAnalysis = await FieldEditService.AnalyzeFieldChangeAsync(
                OriginalField, EditedField, SchemaName, recordCount);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Âä†ËΩΩÂèòÊõ¥ÂàÜÊûêÂ§±Ë¥•");
            Snackbar.Add("Âä†ËΩΩÂèòÊõ¥ÂàÜÊûêÂ§±Ë¥•", Severity.Error);
        }
    }



    private string GetFieldTypeDisplayName(FieldType fieldType)
    {
        return fieldType switch
        {
            FieldType.Text => "ÊñáÊú¨",
            FieldType.Number => "Êï∞ÂÄº",
            FieldType.Boolean => "Â∏ÉÂ∞î",
            FieldType.Date => "Êó•Êúü",
            FieldType.Reference => "ÂºïÁî®",
            _ => "Êú™Áü•"
        };
    }

    private async Task SaveChanges()
    {
        if (!CanSave) return;
        
        isSaving = true;
        try
        {
            var result = await FieldEditService.ApplyFieldChangeAsync(
                OriginalField, EditedField, SchemaName);
            
            if (result.Success)
            {
                MudDialog.Close(DialogResult.Ok(EditedField));
                Snackbar.Add($"Â≠óÊÆµÂ∑≤ÊàêÂäüÊõ¥Êñ∞ÔºåÂ§ÑÁêÜ‰∫Ü {result.AffectedRecords} Êù°ËÆ∞ÂΩï", Severity.Success);
                
                if (result.FailedConversions > 0)
                {
                    Snackbar.Add($"Ê≥®ÊÑèÔºö{result.FailedConversions} Êù°ËÆ∞ÂΩïËΩ¨Êç¢Â§±Ë¥•", Severity.Warning);
                }
            }
            else
            {
                Snackbar.Add($"‰øùÂ≠òÂ§±Ë¥•: {result.ErrorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "‰øùÂ≠òÂ≠óÊÆµÂèòÊõ¥Â§±Ë¥•");
            Snackbar.Add($"‰øùÂ≠òÂ§±Ë¥•: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private string GetMudIcon(string iconName)
    {
        return iconName switch
        {
            "edit" => Icons.Material.Filled.Edit,
            "transform" => Icons.Material.Filled.Transform,
            "star" => Icons.Material.Filled.Star,
            "star_border" => Icons.Material.Filled.StarBorder,
            "link" => Icons.Material.Filled.Link,
            "comment" => Icons.Material.Filled.Comment,
            _ => Icons.Material.Filled.Info
        };
    }

    private Color GetStatusColor(ConversionStatus status)
    {
        return status switch
        {
            ConversionStatus.Success => Color.Success,
            ConversionStatus.DataLoss => Color.Warning,
            ConversionStatus.Failed => Color.Error,
            ConversionStatus.RequiresManualIntervention => Color.Info,
            _ => Color.Default
        };
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }


} 