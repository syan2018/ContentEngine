@page "/data-explorer/{SchemaId}"
@page "/data/{SchemaId}"

@rendermode InteractiveServer
@inject IDataEntryService DataService
@inject ISchemaDefinitionService SchemaService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@using ContentEngine.Core.Utils
@using LiteDB
@using FieldType = ContentEngine.Core.DataPipeline.Models.FieldType

<PageTitle>@(schemaDefinition?.Name ?? "数据浏览") - ContentEngine</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4">
    <MudStack Spacing="6">
        <!-- 页面标题和导航 -->
        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            <MudStack Spacing="2">
                <MudBreadcrumbs Items="_breadcrumbItems" />
                <MudText Typo="Typo.h4" Class="font-weight-bold">
                    @(schemaDefinition?.Name ?? "数据浏览")
                </MudText>
                @if (schemaDefinition != null && !string.IsNullOrEmpty(schemaDefinition.Description))
                {
                    <MudText Typo="Typo.body1" Color="Color.Secondary">
                        @schemaDefinition.Description
                    </MudText>
                }
            </MudStack>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"
                       OnClick="ShowAddEntryForm">
                添加记录
            </MudButton>
        </MudStack>

@if (isLoading)
{
            <MudPaper Class="pa-8 text-center" Elevation="0">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                <MudText Class="mt-2">正在加载数据...</MudText>
            </MudPaper>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
            <MudAlert Severity="Severity.Error" Class="mb-4">
                @errorMessage
            </MudAlert>
}
else if (schemaDefinition == null)
{
            <MudAlert Severity="Severity.Warning" Class="mb-4">
                未找到数据结构 '@SchemaId'
            </MudAlert>
}
else
{
            <!-- 数据操作工具栏 -->
            <MudTabs Elevation="0" Rounded="false">
                                <MudTabPanel Text="表格视图" Icon="@Icons.Material.Filled.TableChart">
                    <div class="mt-4">
                        <DataTableView Schema="@schemaDefinition"
                                       DataEntries="@dataEntries"
                                       OnViewRecord="ViewRecord"
                                       OnEditRecord="ShowEditEntryForm"
                                       OnDeleteRecord="DeleteEntryPrompt"
                                       OnDataChanged="LoadSchemaAndData" />
                    </div>
                </MudTabPanel>

                <MudTabPanel Text="数据可视化" Icon="@Icons.Material.Filled.BarChart">
                    <div class="mt-4">
                        <DataVisualizationPanel SchemaDefinition="@schemaDefinition" DataEntries="@dataEntries" />
                    </div>
                </MudTabPanel>

                <MudTabPanel Text="自然语言查询" Icon="@Icons.Material.Filled.Psychology">
                    <div class="mt-4">
                        <NaturalLanguageQueryPanel SchemaDefinition="@schemaDefinition" OnQueryResult="HandleQueryResult" />
                    </div>
                </MudTabPanel>
            </MudTabs>
        }
    </MudStack>
</MudContainer>

<!-- 简化的添加/编辑记录对话框 -->
<MudDialog @bind-IsVisible="showEditForm" Options="dialogOptions">
    <TitleContent>
        <div class="d-flex align-center">
            <MudIcon Icon="@(isEditing ? Icons.Material.Filled.Edit : Icons.Material.Filled.Add)" Class="mr-2" />
            <MudText Typo="Typo.h6">@(isEditing ? "编辑记录" : "添加新记录")</MudText>
        </div>
    </TitleContent>
    <DialogContent>
        @if (schemaDefinition != null)
        {
            <MudStack Spacing="3">
                    @foreach (var field in schemaDefinition.Fields)
                    {
                    <div>
                        @if (field.Type == FieldType.Boolean)
                        {
                            <MudCheckBox T="bool" 
                                         Checked="@GetBoolValue(field.Name)"
                                         CheckedChanged="@((bool value) => SetFieldValue(field.Name, value))"
                                         Label="@field.Name" />
                        }
                        else if (field.Type == FieldType.Number)
                        {
                            <MudNumericField T="double" 
                                             Value="@GetNumericValue(field.Name)"
                                             ValueChanged="@(value => SetFieldValue(field.Name, value))"
                                             Label="@field.Name" 
                                             Variant="Variant.Outlined"
                                             Required="@field.IsRequired" />
                        }
                        else if (field.Type == FieldType.Date)
                        {
                            <MudDatePicker T="DateTime?" 
                                           Date="@GetDateValue(field.Name)"
                                           DateChanged="@(value => SetFieldValue(field.Name, value))"
                                           Label="@field.Name" 
                                           Variant="Variant.Outlined"
                                           Required="@field.IsRequired" />
                        }
                        else
                        {
                            <MudTextField T="string" 
                                          Value="@GetStringValue(field.Name)"
                                          ValueChanged="@(value => SetFieldValue(field.Name, value))"
                                          Label="@field.Name" 
                                          Variant="Variant.Outlined"
                                          Required="@field.IsRequired"
                                          Lines="@(field.Type == FieldType.Text ? 3 : 1)" />
                        }
                    </div>
                }
                
                @if (!string.IsNullOrEmpty(formErrorMessage))
                {
                    <MudAlert Severity="Severity.Error">
                        @formErrorMessage
                    </MudAlert>
                }
            </MudStack>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CancelEdit" Variant="Variant.Text">取消</MudButton>
        <MudButton OnClick="HandleDataSubmit" 
                   Variant="Variant.Filled" 
                   Color="Color.Primary" 
                   StartIcon="@Icons.Material.Filled.Save">
            @(isEditing ? "更新" : "保存")
        </MudButton>
    </DialogActions>
</MudDialog>

<!-- 记录详情对话框 -->
<MudDialog @bind-IsVisible="showRecordDetail" Options="recordDetailDialogOptions">
    <TitleContent>
        <div class="d-flex align-center">
            <MudIcon Icon="@Icons.Material.Filled.Visibility" Class="mr-2" />
            <MudText Typo="Typo.h6">记录详情</MudText>
        </div>
    </TitleContent>
    <DialogContent>
        @if (selectedRecord != null && schemaDefinition != null)
        {
            <RecordDetailView Record="@selectedRecord" Schema="@schemaDefinition" />
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseRecordDetail" Variant="Variant.Text">关闭</MudButton>
        <MudButton OnClick="@(() => ShowEditEntryForm(selectedRecord))" 
                   Variant="Variant.Filled" 
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.Edit">
            编辑
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public string SchemaId { get; set; } = "";

    // 数据相关
    private SchemaDefinition? schemaDefinition;
    private List<BsonDocument> dataEntries = new();
    private BsonDocument? selectedRecord;

    // 表单相关
    private Dictionary<string, object?> formData = new();
    private BsonValue? currentEditId = null;
    private bool isEditing = false;
    private bool showEditForm = false;
    private bool showRecordDetail = false;
    private string? formErrorMessage;

    // UI状态
    private bool isLoading = true;
    private string? errorMessage;
    private List<BreadcrumbItem> _breadcrumbItems = new();

    // 分页
    private int currentPage = 1;
    private int pageSize = 10;
    private long totalEntries = 0;

    // 对话框选项
    private DialogOptions dialogOptions = new() 
    { 
        MaxWidth = MaxWidth.Medium, 
        FullWidth = true,
        CloseButton = true
    };

    private DialogOptions recordDetailDialogOptions = new() 
    { 
        MaxWidth = MaxWidth.Large, 
        FullWidth = true,
        CloseButton = true
    };

    protected override async Task OnInitializedAsync()
    {
        SetupBreadcrumbs();
        await LoadSchemaAndData();
    }

    private void SetupBreadcrumbs()
    {
        _breadcrumbItems = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("首页", href: "/"),
            new BreadcrumbItem("数据洞察", href: "/data-explorer"),
            new BreadcrumbItem(schemaDefinition?.Name ?? "数据浏览", href: null, disabled: true)
        };
    }

    private async Task LoadSchemaAndData()
    {
        isLoading = true;
        errorMessage = null;
        ClearFormData();
        
        try
        {
            if (!int.TryParse(SchemaId, out var schemaIdInt))
            {
                errorMessage = $"无效的数据结构ID: '{SchemaId}'";
                return;
            }
            
            schemaDefinition = await SchemaService.GetSchemaByIdAsync(schemaIdInt);
            if (schemaDefinition != null)
            {   
                SetupBreadcrumbs();
                totalEntries = await DataService.CountDataAsync(schemaDefinition.Name);
                dataEntries = await DataService.GetDataAsync(schemaDefinition.Name, (currentPage - 1) * pageSize, pageSize);
            }
            else
            {
                errorMessage = $"未找到ID为 '{SchemaId}' 的数据结构";
                dataEntries.Clear();
                totalEntries = 0;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"加载数据时出错: {ex.Message}";
            schemaDefinition = null;
            dataEntries.Clear();
            totalEntries = 0;
        }
        finally
        {   
            isLoading = false;
        }
        StateHasChanged();
    }



    // 记录操作方法
    private void ViewRecord(BsonDocument record)
    {
        selectedRecord = record;
        showRecordDetail = true;
    }

    private void CloseRecordDetail()
    {
        showRecordDetail = false;
        selectedRecord = null;
    }

    // 表单相关方法
    private void ShowAddEntryForm()
    {
        isEditing = false;
        currentEditId = null;
        ClearFormData();
        InitializeFormData();
        showEditForm = true;
    }

    private void ShowEditEntryForm(BsonDocument? entry)
    {
        if (entry == null) return;
        
        isEditing = true;
        currentEditId = entry.TryGetValue("_id", out var id) ? id : null;
        ClearFormData();
        PopulateFormDataFromBson(entry);
        showRecordDetail = false;
        showEditForm = true;
    }

    private void CancelEdit()
    {
        showEditForm = false;
        ClearFormData();
    }

    private void ClearFormData()
    {
        formData.Clear();
        formErrorMessage = null;
    }

    private void InitializeFormData()
    {
        if (schemaDefinition?.Fields == null) return;
        
        foreach (var field in schemaDefinition.Fields)
        {
            formData[field.Name] = field.Type switch
            {
                FieldType.Boolean => false,
                FieldType.Number => 0.0,
                FieldType.Date => DateTime.Today,
                _ => string.Empty
            };
        }
    }

    private void PopulateFormDataFromBson(BsonDocument doc)
    {
        if (schemaDefinition == null) return;
        formData = BsonFormUtils.ConvertBsonToFormData(doc, schemaDefinition);
    }

    private async Task HandleDataSubmit()
    {
        if (schemaDefinition == null) return;

        try
        {
            formErrorMessage = null;
            var bsonDoc = BsonFormUtils.ConvertFormDataToBson(formData, schemaDefinition);

            if (isEditing && currentEditId != null)
            {
                bsonDoc["_id"] = currentEditId;
                await DataService.UpdateDataAsync(schemaDefinition.Name, currentEditId, bsonDoc);
            }
            else
            {
                await DataService.CreateDataAsync(schemaDefinition.Name, bsonDoc);
            }
            
            showEditForm = false;
            await LoadSchemaAndData();
        }
        catch (Exception ex)
        {
            formErrorMessage = $"保存数据时出错: {ex.Message}";
        }
    }

    private async Task DeleteEntryPrompt(BsonDocument entry)
    {
        var entryKey = BsonFormUtils.GetEntryKey(entry);
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"确定要删除这条记录吗？\n记录ID: {entryKey}");
        
        if (confirmed)
        {
            await DeleteEntry(entry);
        }
    }

    private async Task DeleteEntry(BsonDocument entry)
    {
        if (schemaDefinition == null) return;
        
        try
        {
            var entryId = entry.TryGetValue("_id", out var id) ? id : null;
            if (entryId != null)
            {
                await DataService.DeleteDataAsync(schemaDefinition.Name, entryId);
            await LoadSchemaAndData();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"删除记录时出错: {ex.Message}";
        }
    }

    private void HandleQueryResult(List<BsonDocument> results)
    {
        dataEntries = results;
        StateHasChanged();
    }

    // 表单字段访问器
    private bool GetBoolValue(string fieldName)
    {
        if (formData.TryGetValue(fieldName, out var value) && value is bool boolValue)
            return boolValue;
        return false;
    }

    private double GetNumericValue(string fieldName)
    {
        if (formData.TryGetValue(fieldName, out var value))
        {
            if (value is double doubleValue) return doubleValue;
            if (value is int intValue) return intValue;
            if (double.TryParse(value?.ToString(), out var parsed)) return parsed;
        }
        return 0.0;
    }

    private DateTime? GetDateValue(string fieldName)
    {
        if (formData.TryGetValue(fieldName, out var value) && value is DateTime dateValue)
            return dateValue;
        return null;
    }

    private string GetStringValue(string fieldName)
    {
        if (formData.TryGetValue(fieldName, out var value))
            return value?.ToString() ?? string.Empty;
        return string.Empty;
    }

    private void SetFieldValue(string fieldName, object? value)
    {
        formData[fieldName] = value;
        StateHasChanged();
    }

} 