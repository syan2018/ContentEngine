@page "/data/{SchemaId}"

@rendermode InteractiveServer
@inject IDataEntryService DataService
@inject ISchemaDefinitionService SchemaService
@inject NavigationManager NavigationManager

@using ContentEngine.Core.Utils
@using LiteDB

@using FieldType = ContentEngine.Core.DataPipeline.Models.FieldType

<PageTitle>Data for @(schemaDefinition?.Name ?? SchemaId)</PageTitle>

<h1>Data Entries: @(schemaDefinition?.Name ?? SchemaId)</h1>

@if (isLoading)
{
    <p><em>Loading schema and data...</em></p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (schemaDefinition == null)
{
    <div class="alert alert-warning">Schema '@SchemaId' definition not found.</div>
}
else
{
    <button class="btn btn-success mb-3" @onclick="ShowAddEntryForm">+ Add New Entry</button>

    @* Section for Adding/Editing Data - Initially hidden *@
    @if (showEditForm)
    {
        <h3>@(isEditing ? "Edit Entry" : "Add New Entry")</h3>
        <EditForm EditContext="@editContext" OnValidSubmit="HandleDataSubmit" FormName="DataEntryForm">
            @* Use the DynamicDataForm component with single dictionary *@
            <DynamicDataForm Schema="@schemaDefinition"
                             FormData="@formData"
                             OnFieldChanged="HandleFormFieldChanged" />

            @* Display general error messages here *@
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-2">@errorMessage</div>
            }

            <button type="submit" class="btn btn-primary" disabled="@(!isFormValid)">@(isEditing ? "Update Entry" : "Save Entry")</button>
            <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
        </EditForm>
        <hr />
    }

    @* Section for Displaying Data *@
    <h2>Existing Entries (@totalEntries)</h2>
    @if (!dataEntries.Any())
    {
        <p>No data entries found for this schema.</p>
    }
    else
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    @* Dynamic Headers based on Schema *@
                    @foreach (var field in schemaDefinition.Fields)
                    {
                        <th>@field.Name</th>
                    }
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var entry in dataEntries)
                {
                    <tr @key="BsonFormUtils.GetEntryKey(entry)">
                        @* Dynamic Data Cells *@
                        @foreach (var field in schemaDefinition.Fields)
                        {
                            <td>@BsonFormUtils.GetDisplayValue(entry, field.Name)</td>
                        }
                        <td>
                            <button class="btn btn-sm btn-primary" @onclick="() => ShowEditEntryForm(entry)">Edit</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteEntryPrompt(entry)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        @* Pagination Controls *@
        <nav aria-label="Data pagination">
            <ul class="pagination">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">Previous</button>
                </li>
                @* Simplified pagination display - show current page and total pages *@
                 <li class="page-item disabled"><span class="page-link">Page @currentPage of @totalPages</span></li>
                <li class="page-item @(currentPage >= totalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">Next</button>
                </li>
            </ul>
        </nav>
    }
}

@code {
    [Parameter]
    public string SchemaId { get; set; } = "";

    private SchemaDefinition? schemaDefinition;
    private List<BsonDocument> dataEntries = new();

    // Use a single dictionary for form data again
    private Dictionary<string, object?> formData = new();

    private EditContext? editContext;
    private BsonValue? currentEditId = null;
    private object formModelPlaceholder = new(); // Keep for EditContext
    private bool isFormValid = false;
    private bool isLoading = true;
    private bool isEditing = false;
    private bool showEditForm = false;
    private string? errorMessage;
    private int currentPage = 1;
    private int pageSize = 10; // Items per page
    private long totalEntries = 0;
    private int totalPages => (int)Math.Ceiling((double)totalEntries / pageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadSchemaAndData();
    }

    private async Task LoadSchemaAndData()
    {
        isLoading = true;
        errorMessage = null;
        ClearFormData(); // Clear the single dictionary
        try
        {
            if (!int.TryParse(SchemaId, out var schemaIdInt))
            {
                errorMessage = $"Invalid Schema ID: '{SchemaId}'";
                return;
            }
            
            schemaDefinition = await SchemaService.GetSchemaByIdAsync(schemaIdInt);
            if (schemaDefinition != null)
            {   
                // Load data for the current page
                totalEntries = await DataService.CountDataAsync(schemaDefinition.Name);
                dataEntries = await DataService.GetDataAsync(schemaDefinition.Name, (currentPage - 1) * pageSize, pageSize);
            }
            else
            {
                errorMessage = $"Schema with ID '{SchemaId}' not found.";
                dataEntries.Clear();
                totalEntries = 0;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
            schemaDefinition = null; // Ensure schema is null on error
            dataEntries.Clear();
            totalEntries = 0;
        }
        finally
        {   
            isLoading = false;
        }
        StateHasChanged(); // Ensure UI updates after loading
    }

    private void ClearFormData()
    {
        formData.Clear();
        if (editContext != null)
        {
            // Don't unsubscribe here, let CancelEdit handle it fully
            // editContext.OnFieldChanged -= HandleFormFieldChanged;
            editContext = null;
        }
        isFormValid = false;
    }

    private void PopulateFormDataFromBson(BsonDocument doc)
    {
        if (schemaDefinition == null) return;
        // Use the utility function to convert BsonDocument to the formData dictionary
        formData = BsonFormUtils.ConvertBsonToFormData(doc, schemaDefinition);
    }

    // Method to handle the event callback from DynamicDataForm
    private void HandleFormFieldChanged()
    {
        ValidateFormData();
        InvokeAsync(StateHasChanged);
    }

    private void SetupEditContext()
    {
        // Pass the placeholder object to EditContext, not the dictionary
        editContext = new EditContext(formModelPlaceholder);
        // No need to subscribe to OnFieldChanged here, DynamicDataForm handles it
        ValidateFormData(); // Perform initial validation
    }

    private void ShowAddEntryForm()
    {
        if (schemaDefinition == null) return;
        PopulateFormDataFromBson(new BsonDocument());
        SetupEditContext();
        currentEditId = null;
        isEditing = false;
        showEditForm = true;
    }

    private void ShowEditEntryForm(BsonDocument entryToEdit)
    {
        if (schemaDefinition == null) return;
        var entryCopy = new BsonDocument(entryToEdit.ToDictionary());
        PopulateFormDataFromBson(entryCopy);
        SetupEditContext();
        currentEditId = entryToEdit["_id"];
        isEditing = true;
        showEditForm = true;
    }

    private void CancelEdit()
    {
        showEditForm = false;
        ClearFormData(); // Clears dict and EditContext
        currentEditId = null;
        isEditing = false;
    }

    private async Task HandleDataSubmit()
    {
        if (schemaDefinition == null || editContext == null) return;
        errorMessage = null;

        if (!ValidateFormData()) // Use our custom validation
        {
             // errorMessage is set within ValidateFormData
            return;
        }

        try
        { 
            // Use the utility function to convert the formData dictionary back to BsonDocument
            var dataToSave = BsonFormUtils.ConvertFormDataToBson(formData, schemaDefinition);
            // Validation is now mostly done in ValidateFormData before this point

            if (isEditing && currentEditId != null)
            {
                dataToSave["_id"] = currentEditId;
                await DataService.UpdateDataAsync(schemaDefinition.Name, currentEditId, dataToSave);
            }
            else
            {
                await DataService.CreateDataAsync(schemaDefinition.Name, dataToSave);
            }
            CancelEdit();
            await LoadSchemaAndData();
        }
        catch (FormatException fex)
        { errorMessage = $"Error saving data: {fex.Message}"; }
        catch (Exception ex)
        { errorMessage = $"Error saving data: {ex.Message}"; }
    }

    private async Task DeleteEntryPrompt(BsonDocument entryToDelete)
    {
        errorMessage = null;
        // TODO: Implement proper confirmation dialog (e.g., using a modal component)
        try
        {
            await DataService.DeleteDataAsync(schemaDefinition.Name, entryToDelete["_id"]);
            await LoadSchemaAndData();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting entry: {ex.Message}";
        }
    }

    private async Task ChangePage(int newPage)
    {
        if (newPage >= 1 && newPage <= totalPages)
        {
            currentPage = newPage;
            await LoadSchemaAndData(); // Reload data for the new page
        }
    }

    // Modified to use single dictionary for validation
    private bool ValidateFormData()
    {
        if (schemaDefinition == null) return false;
        isFormValid = true; // Assume valid

        foreach (var field in schemaDefinition.Fields)
        {
            bool isRequired = field.IsRequired;
            object? value = formData.TryGetValue(field.Name, out var v) ? v : null;
            bool isEmpty = false;

            // Check if required field is empty/null/whitespace
            if (isRequired)
            {
                isEmpty = value == null || (value is string s && string.IsNullOrWhiteSpace(s));
                if (isEmpty)
                {
                    isFormValid = false;
                    errorMessage = $"Field '{field.Name}' is required.";
                    break; // Stop validation on first required error
                }
            }

            // Check Reference format if not empty
            if (field.Type == FieldType.Reference && value is string refString && !string.IsNullOrWhiteSpace(refString))
            {
                try { new ObjectId(refString); }
                catch (FormatException)
                {
                    isFormValid = false;
                    errorMessage = $"Field '{field.Name}' has an invalid ObjectId format.";
                    break; // Stop validation on first format error
                }
            }
             // TODO: Add other field-specific validations (number ranges, etc.)
        }
        
        if (isFormValid) errorMessage = null; // Clear error if passes

        // Don't need InvokeAsync here, HandleFormFieldChanged does it
        return isFormValid;
    }
} 