@page "/data-explorer/{SchemaId}"
@page "/data/{SchemaId}"

@rendermode InteractiveServer
@inject IDataEntryService DataService
@inject ISchemaDefinitionService SchemaService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@using ContentEngine.Core.Utils
@using LiteDB
@using FieldType = ContentEngine.Core.DataPipeline.Models.FieldType

<PageTitle>@(schemaDefinition?.Name ?? "数据浏览") - ContentEngine</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4">
    <MudStack Spacing="6">
        <!-- 页面标题和导航 -->
        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            <MudStack Spacing="2">
                <MudBreadcrumbs Items="_breadcrumbItems" />
                <MudText Typo="Typo.h4" Class="font-weight-bold">
                    @(schemaDefinition?.Name ?? "数据浏览")
                </MudText>
                @if (schemaDefinition != null && !string.IsNullOrEmpty(schemaDefinition.Description))
                {
                    <MudText Typo="Typo.body1" Color="Color.Secondary">
                        @schemaDefinition.Description
                    </MudText>
                }
            </MudStack>
        </MudStack>

@if (isLoading)
{
            <MudPaper Class="pa-8 text-center" Elevation="0">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                <MudText Class="mt-2">正在加载数据...</MudText>
            </MudPaper>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
            <MudAlert Severity="Severity.Error" Class="mb-4">
                @errorMessage
            </MudAlert>
}
else if (schemaDefinition == null)
{
            <MudAlert Severity="Severity.Warning" Class="mb-4">
                未找到数据结构 '@SchemaId'
            </MudAlert>
}
else
{
            <!-- 数据操作工具栏 -->
            <MudTabs Elevation="0" Rounded="false">
                <MudTabPanel Text="表格视图" Icon="@Icons.Material.Filled.TableChart">
                    <div class="mt-4">
                        <DataTableView Schema="@schemaDefinition"
                                       DataEntries="@dataEntries"
                                       OnViewRecord="ViewRecord"
                                       OnEditRecord="NavigateToEditRecord"
                                       OnDeleteRecord="DeleteEntryPrompt"
                                       OnDataChanged="LoadSchemaAndData" />
                    </div>
                </MudTabPanel>

                <MudTabPanel Text="数据可视化" Icon="@Icons.Material.Filled.BarChart">
                    <div class="mt-4">
                        <DataVisualizationPanel SchemaDefinition="@schemaDefinition" DataEntries="@dataEntries" />
                    </div>
                </MudTabPanel>

                <MudTabPanel Text="自然语言查询" Icon="@Icons.Material.Filled.Psychology">
                    <div class="mt-4">
                        <NaturalLanguageQueryPanel SchemaDefinition="@schemaDefinition" OnQueryResult="HandleQueryResult" />
                    </div>
                </MudTabPanel>
            </MudTabs>
        }
    </MudStack>
</MudContainer>

<!-- 记录详情对话框 -->
<MudDialog @bind-IsVisible="showRecordDetail" Options="recordDetailDialogOptions">
    <TitleContent>
        <div class="d-flex align-center">
            <MudIcon Icon="@Icons.Material.Filled.Visibility" Class="mr-2" />
            <MudText Typo="Typo.h6">记录详情</MudText>
        </div>
    </TitleContent>
    <DialogContent>
        @if (selectedRecord != null && schemaDefinition != null)
        {
            <RecordDetailView Record="@selectedRecord" Schema="@schemaDefinition" />
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseRecordDetail" Variant="Variant.Text">关闭</MudButton>
        <MudButton OnClick="@(() => NavigateToEditRecord(selectedRecord))" 
                   Variant="Variant.Filled" 
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.Edit">
            编辑
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public string SchemaId { get; set; } = "";

    // 数据相关
    private SchemaDefinition? schemaDefinition;
    private List<BsonDocument> dataEntries = new();
    private BsonDocument? selectedRecord;

    // UI状态
    private bool isLoading = true;
    private string? errorMessage;
    private List<BreadcrumbItem> _breadcrumbItems = new();
    private bool showRecordDetail = false;

    // 对话框选项
    private DialogOptions recordDetailDialogOptions = new() 
    { 
        MaxWidth = MaxWidth.Large, 
        FullWidth = true,
        CloseButton = true
    };

    protected override async Task OnInitializedAsync()
    {
        SetupBreadcrumbs();
        await LoadSchemaAndData();
    }

    private void SetupBreadcrumbs()
    {
        _breadcrumbItems = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("首页", href: "/"),
            new BreadcrumbItem("数据洞察", href: "/data-explorer"),
            new BreadcrumbItem(schemaDefinition?.Name ?? "数据浏览", href: null, disabled: true)
        };
    }

    private async Task LoadSchemaAndData()
    {
        isLoading = true;
        errorMessage = null;
        
        try
        {
            if (!int.TryParse(SchemaId, out var schemaIdInt))
            {
                errorMessage = $"无效的数据结构ID: '{SchemaId}'";
                return;
            }
            
            schemaDefinition = await SchemaService.GetSchemaByIdAsync(schemaIdInt);
            if (schemaDefinition != null)
            {   
                SetupBreadcrumbs();
                dataEntries = await DataService.GetDataAsync(schemaDefinition.Name, 0, 100); // 简化版本，加载前100条记录
            }
            else
            {
                errorMessage = $"未找到ID为 '{SchemaId}' 的数据结构";
                dataEntries.Clear();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"加载数据时出错: {ex.Message}";
            schemaDefinition = null;
            dataEntries.Clear();
        }
        finally
        {   
            isLoading = false;
        }
        StateHasChanged();
    }

    // 记录操作方法
    private void ViewRecord(BsonDocument record)
    {
        selectedRecord = record;
        showRecordDetail = true;
    }

    private void CloseRecordDetail()
    {
        showRecordDetail = false;
        selectedRecord = null;
    }

    private void NavigateToEditRecord(BsonDocument? record)
    {
        if (record != null && schemaDefinition != null)
        {
            var recordId = record.TryGetValue("_id", out var id) ? id.ToString() : "";
            if (!string.IsNullOrEmpty(recordId))
            {
                // 导航到编辑页面，这里可以根据实际需要调整路由
                NavigationManager.NavigateTo($"/data-entry/manual/{schemaDefinition.Name}/edit/{recordId}");
            }
        }
        
        // 关闭详情对话框
        CloseRecordDetail();
    }

    private async Task DeleteEntryPrompt(BsonDocument entry)
    {
        var entryKey = BsonFormUtils.GetEntryKey(entry);
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"确定要删除这条记录吗？\n记录ID: {entryKey}");
        
        if (confirmed)
        {
            await DeleteEntry(entry);
        }
    }

    private async Task DeleteEntry(BsonDocument entry)
    {
        if (schemaDefinition == null) return;
        
        try
        {
            var entryId = entry.TryGetValue("_id", out var id) ? id : null;
            if (entryId != null)
            {
                await DataService.DeleteDataAsync(schemaDefinition.Name, entryId);
                await LoadSchemaAndData();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"删除记录时出错: {ex.Message}";
        }
    }

    private void HandleQueryResult(List<BsonDocument> results)
    {
        dataEntries = results;
        StateHasChanged();
    }
} 
