@using ContentEngine.Core.Inference.Models
@using ContentEngine.Core.DataPipeline.Services
@using ContentEngine.Core.DataPipeline.Models
@using ContentEngine.WebApp.Components.Pages.AIInference.Shared
@using FieldType = ContentEngine.Core.DataPipeline.Models.FieldType
@inject ISchemaDefinitionService SchemaService
@inject ISnackbar Snackbar

<link href="Components/Pages/AIInference/Shared/AIInferenceStyles.css" rel="stylesheet" />

<div class="query-definition-step">
    <MudGrid Spacing="3">
        <!-- 现有查询列表 -->
        <MudItem xs="12">
            <div class="d-flex align-center justify-space-between mb-3">
                <MudText Typo="Typo.h6">已定义的查询</MudText>
                <MudChip T="string" Size="Size.Small" Color="Color.Info">
                    @Definition.QueryDefinitions.Count 个查询
                </MudChip>
            </div>

            <MudStack Spacing="3">
                @for (int i = 0; i < Definition.QueryDefinitions.Count; i++)
                {
                    var index = i;
                    var query = Definition.QueryDefinitions[index];
                    
                    <QueryCard Query="@query"
                              ShowActions="true"
                              OnEdit="(q) => EditQuery(index)"
                              OnDelete="(q) => RemoveQuery(index)" />
                }
            </MudStack>
        </MudItem>
        
        <!-- 添加新查询区域 -->
        <MudItem xs="12">
            <MudExpansionPanels Elevation="2" Class="mb-4">
                <MudExpansionPanel @bind-IsExpanded="@showAddQuery" Text="添加新数据查询">
                    <MudGrid Spacing="4" Class="mt-2">
                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="newQuery.OutputViewName" 
                                         Label="输出视图名称" 
                                         Placeholder="例如：NPCView, ScenarioView"
                                         Required="true"
                                         Variant="Variant.Outlined"
                                         HelperText="视图的唯一标识名称" />
                        </MudItem>
                        
                        <MudItem xs="12" md="6">
                            <MudSelect Value="newQuery.SourceSchemaName" 
                                      Label="数据源Schema" 
                                      T="string"
                                      Required="true"
                                      Variant="Variant.Outlined"
                                      ValueChanged="OnSchemaSelected">
                                @foreach (var schema in AvailableSchemas)
                                {
                                    <MudSelectItem Value="@schema.Name">
                                        <div class="d-flex justify-space-between align-center">
                                            <span>@schema.Name</span>
                                            <MudChip T="string" Size="Size.Small" Color="Color.Info">@schema.Fields.Count 字段</MudChip>
                                        </div>
                                    </MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        
                        <MudItem xs="12">
                            <MudTextField @bind-Value="newQuery.FilterExpression" 
                                         Label="筛选条件（可选）" 
                                         Placeholder="例如：$.status == 'Active' && $.level > 10"
                                         Variant="Variant.Outlined"
                                         HelperText="使用LiteDB查询语法，$表示当前文档" />
                        </MudItem>
                        
                        @if (!string.IsNullOrWhiteSpace(newQuery.SourceSchemaName))
                        {
                            var selectedSchema = AvailableSchemas.FirstOrDefault(s => s.Name == newQuery.SourceSchemaName);
                            if (selectedSchema != null)
                            {
                                <MudItem xs="12">
                                    <div class="d-flex align-center justify-space-between mb-3">
                                        <MudText Typo="Typo.subtitle1">选择字段</MudText>
                                        <div class="d-flex gap-2">
                                            <MudButton Size="Size.Small" 
                                                      Variant="Variant.Outlined" 
                                                      OnClick="SelectAllFields">
                                                全选
                                            </MudButton>
                                            <MudButton Size="Size.Small" 
                                                      Variant="Variant.Outlined" 
                                                      OnClick="ClearAllFields">
                                                清空
                                            </MudButton>
                                        </div>
                                    </div>
                                    
                                    <MudPaper Class="pa-3" Outlined="true" Style="max-height: 300px; overflow-y: auto;">
                                        <MudGrid Spacing="2">
                                            @foreach (var field in selectedSchema.Fields)
                                            {
                                                <MudItem xs="12" sm="6" md="4">
                                                                                             <MudCheckBox Value="@GetFieldSelection(field.Name)"
                                                            T="bool"
                                                            Dense="true"
                                                            Color="Color.Primary"
                                                            ValueChanged="(bool value) => OnFieldSelectionChanged(field.Name, value)">
                                                    <div class="d-flex flex-column">
                                                        <MudText Typo="Typo.body2">@field.Name</MudText>
                                                        <MudText Typo="Typo.caption" Color="Color.Secondary">@GetFieldTypeDisplay(field.Type)</MudText>
                                                    </div>
                                                </MudCheckBox>
                                            </MudItem>
                                        }
                                        </MudGrid>
                                    </MudPaper>
                                    
                                    @if (newQuery.SelectFields.Any())
                                    {
                                        <MudAlert Severity="Severity.Info" Class="mt-2">
                                            已选择 @newQuery.SelectFields.Count 个字段
                                        </MudAlert>
                                    }
                                </MudItem>
                            }
                        }
                        
                        <MudItem xs="12" Class="d-flex justify-end gap-2">
                            <MudButton Variant="Variant.Outlined" 
                                      Color="Color.Secondary"
                                      OnClick="CancelAddQuery">
                                取消
                            </MudButton>
                            <MudButton Variant="Variant.Filled" 
                                      Color="Color.Primary"
                                      StartIcon="@Icons.Material.Filled.Add"
                                      OnClick="AddQuery"
                                      Disabled="@(!CanAddQuery())">
                                添加查询
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudExpansionPanel>
            </MudExpansionPanels>
        </MudItem>
    </MudGrid>
    
    <!-- 验证提示 -->
    @if (Definition.QueryDefinitions.Any())
    {
        <MudAlert Severity="Severity.Success" Class="mt-4">
            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Class="mr-2" />
            已定义 @Definition.QueryDefinitions.Count 个数据查询，可以继续下一步
        </MudAlert>
    }
    else if (HasAttemptedValidation)
    {
        <MudAlert Severity="Severity.Warning" Class="mt-4">
            <MudIcon Icon="@Icons.Material.Filled.Warning" Class="mr-2" />
            请至少添加一个数据查询定义
        </MudAlert>
    }
</div>

<style>
.query-definition-card {
    transition: all 0.2s ease-in-out;
}

.query-definition-card:hover {
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.font-mono {
    font-family: 'Courier New', monospace;
}
</style>

@code {
    [Parameter] public ReasoningTransactionDefinition Definition { get; set; } = new();
    [Parameter] public List<SchemaDefinition> AvailableSchemas { get; set; } = new();
    [Parameter] public EventCallback<bool> OnValidationChanged { get; set; }
    
    private bool HasAttemptedValidation = false;
    private bool showAddQuery = false;
    private QueryDefinition newQuery = new();
    
    private bool IsValid => Definition.QueryDefinitions.Any();

    protected override async Task OnParametersSetAsync()
    {
        // 避免在参数设置时触发验证，防止无限循环
        // 验证将在用户交互时触发
    }

    protected override void OnInitialized()
    {
        ResetNewQuery();
    }

    private void ResetNewQuery()
    {
        newQuery = new QueryDefinition
        {
            OutputViewName = "",
            SourceSchemaName = "",
            FilterExpression = "",
            SelectFields = new List<string>()
        };
    }

    private void OnSchemaSelected(string schemaName)
    {
        newQuery.SourceSchemaName = schemaName;
        newQuery.SelectFields.Clear();
        StateHasChanged();
    }

    private bool GetFieldSelection(string fieldName)
    {
        return newQuery.SelectFields.Contains(fieldName);
    }

    private void OnFieldSelectionChanged(string fieldName, bool isSelected)
    {
        if (isSelected && !newQuery.SelectFields.Contains(fieldName))
        {
            newQuery.SelectFields.Add(fieldName);
        }
        else if (!isSelected && newQuery.SelectFields.Contains(fieldName))
        {
            newQuery.SelectFields.Remove(fieldName);
        }
    }

    private void SelectAllFields()
    {
        var selectedSchema = AvailableSchemas.FirstOrDefault(s => s.Name == newQuery.SourceSchemaName);
        if (selectedSchema != null)
        {
            newQuery.SelectFields = selectedSchema.Fields.Select(f => f.Name).ToList();
        }
    }

    private void ClearAllFields()
    {
        newQuery.SelectFields.Clear();
    }

    private string GetFieldTypeDisplay(FieldType fieldType)
    {
        return fieldType switch
        {
            FieldType.Text => "文本",
            FieldType.Number => "数字",
            FieldType.Boolean => "布尔",
            FieldType.Date => "日期",
            FieldType.Reference => "引用",
            _ => fieldType.ToString()
        };
    }

    private bool CanAddQuery()
    {
        return !string.IsNullOrWhiteSpace(newQuery.OutputViewName) &&
               !string.IsNullOrWhiteSpace(newQuery.SourceSchemaName) &&
               newQuery.SelectFields.Any();
    }

    private async Task AddQuery()
    {
        if (!CanAddQuery())
        {
            Snackbar.Add("请完整填写查询信息并选择至少一个字段", Severity.Warning);
            return;
        }

        // 检查视图名称是否重复
        if (Definition.QueryDefinitions.Any(q => q.OutputViewName == newQuery.OutputViewName))
        {
            Snackbar.Add("视图名称已存在，请使用不同的名称", Severity.Warning);
            return;
        }

        Definition.QueryDefinitions.Add(new QueryDefinition
        {
            QueryId = Guid.NewGuid().ToString(),
            OutputViewName = newQuery.OutputViewName,
            SourceSchemaName = newQuery.SourceSchemaName,
            FilterExpression = newQuery.FilterExpression,
            SelectFields = new List<string>(newQuery.SelectFields)
        });

        HasAttemptedValidation = true;
        ResetNewQuery();
        showAddQuery = false;
        await ValidateAndNotify();
        
        Snackbar.Add($"已添加查询定义：{newQuery.OutputViewName}", Severity.Success);
    }

    private async Task RemoveQuery(int index)
    {
        if (index >= 0 && index < Definition.QueryDefinitions.Count)
        {
            var removedQuery = Definition.QueryDefinitions[index];
            Definition.QueryDefinitions.RemoveAt(index);
            HasAttemptedValidation = true;
            await ValidateAndNotify();
            
            Snackbar.Add($"已删除查询定义：{removedQuery.OutputViewName}", Severity.Info);
        }
    }

    private void EditQuery(int index)
    {
        if (index >= 0 && index < Definition.QueryDefinitions.Count)
        {
            // 复制当前查询到编辑状态
            var queryToEdit = Definition.QueryDefinitions[index];
            newQuery = new QueryDefinition
            {
                QueryId = queryToEdit.QueryId,
                OutputViewName = queryToEdit.OutputViewName,
                SourceSchemaName = queryToEdit.SourceSchemaName,
                FilterExpression = queryToEdit.FilterExpression,
                SelectFields = new List<string>(queryToEdit.SelectFields)
            };
            
            // 移除原有查询，等待用户确认编辑
            Definition.QueryDefinitions.RemoveAt(index);
            showAddQuery = true;
            StateHasChanged();
            
            Snackbar.Add($"正在编辑查询：{queryToEdit.OutputViewName}", Severity.Info);
        }
    }

    private void CancelAddQuery()
    {
        ResetNewQuery();
        showAddQuery = false;
    }

    private async Task ValidateAndNotify()
    {
        var isValid = IsValid;
        await OnValidationChanged.InvokeAsync(isValid);
        StateHasChanged();
    }
} 