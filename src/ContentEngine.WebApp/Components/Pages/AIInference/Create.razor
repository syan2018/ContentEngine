@page "/ai-inference/create"
@using ContentEngine.Core.Inference.Services
@using ContentEngine.Core.Inference.Models
@using ContentEngine.Core.DataPipeline.Services
@using ContentEngine.Core.DataPipeline.Models
@inject IReasoningService ReasoningService
@inject ISchemaDefinitionService SchemaService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<PageTitle>创建推理事务 - ContentEngine</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4">
    <MudBreadcrumbs Items="breadcrumbItems" Class="mb-4" />
    
    <!-- 步骤指示器 -->
    <MudStepper @ref="stepper" @bind-ActiveIndex="currentStep" Class="mb-6">
        <MudStep Title="基本信息" 
                Icon="@Icons.Material.Filled.Info"
                StatusChanged="OnStepStatusChanged"
                Optional="false">
            <ChildContent>
                <div class="d-flex align-center">
                    <MudIcon Icon="@Icons.Material.Filled.Info" Class="mr-2" />
                    <span>定义推理事务的基本信息</span>
                </div>
            </ChildContent>
        </MudStep>
        
        <MudStep Title="数据查询" 
                Icon="@Icons.Material.Filled.Search"
                StatusChanged="OnStepStatusChanged"
                Optional="false">
            <ChildContent>
                <div class="d-flex align-center">
                    <MudIcon Icon="@Icons.Material.Filled.Search" Class="mr-2" />
                    <span>定义数据视图查询</span>
                </div>
            </ChildContent>
        </MudStep>
        
        <MudStep Title="数据组合" 
                Icon="@Icons.Material.Filled.CallMerge"
                StatusChanged="OnStepStatusChanged"
                Optional="false">
            <ChildContent>
                <div class="d-flex align-center">
                    <MudIcon Icon="@Icons.Material.Filled.CallMerge" Class="mr-2" />
                    <span>设置数据组合规则</span>
                </div>
            </ChildContent>
        </MudStep>
        
        <MudStep Title="Prompt模板" 
                Icon="@Icons.Material.Filled.TextSnippet"
                StatusChanged="OnStepStatusChanged"
                Optional="false">
            <ChildContent>
                <div class="d-flex align-center">
                    <MudIcon Icon="@Icons.Material.Filled.TextSnippet" Class="mr-2" />
                    <span>创建Prompt模板</span>
                </div>
            </ChildContent>
        </MudStep>
        
        <MudStep Title="执行约束" 
                Icon="@Icons.Material.Filled.Settings"
                StatusChanged="OnStepStatusChanged"
                Optional="false">
            <ChildContent>
                <div class="d-flex align-center">
                    <MudIcon Icon="@Icons.Material.Filled.Settings" Class="mr-2" />
                    <span>设置执行限制</span>
                </div>
            </ChildContent>
        </MudStep>
        
        <MudStep Title="确认" 
                Icon="@Icons.Material.Filled.CheckCircle"
                StatusChanged="OnStepStatusChanged"
                Optional="false">
            <ChildContent>
                <div class="d-flex align-center">
                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Class="mr-2" />
                    <span>确认并保存</span>
                </div>
            </ChildContent>
        </MudStep>
    </MudStepper>
    
    <!-- 步骤内容 -->
    <MudCard Class="mud-elevation-4">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h5">@GetStepTitle()</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary">@GetStepDescription()</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        
        <MudCardContent Class="pa-6">
            @switch (currentStep)
            {
                case 0:
                    <BasicInfoStep @ref="basicInfoStep" 
                                  Definition="@definition" 
                                  AvailableSchemas="@availableSchemas"
                                  OnValidationChanged="OnStepValidationChanged" />
                    break;
                case 1:
                    <QueryDefinitionStep @ref="queryDefinitionStep"
                                        Definition="@definition" 
                                        AvailableSchemas="@availableSchemas"
                                        OnValidationChanged="OnStepValidationChanged" />
                    break;
                case 2:
                    <DataCombinationStep @ref="dataCombinationStep"
                                        Definition="@definition"
                                        OnValidationChanged="OnStepValidationChanged" />
                    break;
                case 3:
                    <PromptTemplateStep @ref="promptTemplateStep"
                                       Definition="@definition"
                                       OnValidationChanged="OnStepValidationChanged" />
                    break;
                case 4:
                    <ExecutionConstraintsStep @ref="executionConstraintsStep"
                                             Definition="@definition"
                                             OnValidationChanged="OnStepValidationChanged" />
                    break;
                case 5:
                    <ReviewStep Definition="@definition" 
                               EstimatedCost="@estimatedCost"
                               EstimatedTime="@estimatedTime"
                               EstimatedCombinations="@estimatedCombinations" />
                    break;
            }
        </MudCardContent>
        
        <MudCardActions Class="pa-6 d-flex justify-space-between">
            <MudButton Variant="Variant.Outlined" 
                      Color="Color.Secondary"
                      StartIcon="@Icons.Material.Filled.ArrowBack"
                      OnClick="PreviousStep"
                      Disabled="@(currentStep == 0 || isSaving)">
                上一步
            </MudButton>
            
            <div class="d-flex gap-2">
                @if (currentStep < 5)
                {
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary"
                              EndIcon="@Icons.Material.Filled.ArrowForward"
                              OnClick="NextStep"
                              Disabled="@(!CanProceedToNextStep() || isSaving)">
                        下一步
                    </MudButton>
                }
                else
                {
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Success"
                              StartIcon="@Icons.Material.Filled.Save"
                              OnClick="SaveDefinition"
                              Disabled="@isSaving">
                        @if (isSaving)
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                            <span class="ml-2">保存中...</span>
                        }
                        else
                        {
                            <span>保存推理事务</span>
                        }
                    </MudButton>
                }
                
                <MudButton Variant="Variant.Text" 
                          Color="Color.Secondary"
                          OnClick="Cancel">
                    取消
                </MudButton>
            </div>
        </MudCardActions>
    </MudCard>
</MudContainer>

@code {
    private MudStepper? stepper;
    private int currentStep = 0;
    private bool isSaving = false;
    private bool[] stepValidations = new bool[6];
    
    private ReasoningTransactionDefinition definition = new();
    private List<SchemaDefinition> availableSchemas = new();
    
    // 预估数据
    private decimal estimatedCost = 0;
    private TimeSpan estimatedTime = TimeSpan.Zero;
    private int estimatedCombinations = 0;
    
    // 步骤组件引用
    private BasicInfoStep? basicInfoStep;
    private QueryDefinitionStep? queryDefinitionStep;
    private DataCombinationStep? dataCombinationStep;
    private PromptTemplateStep? promptTemplateStep;
    private ExecutionConstraintsStep? executionConstraintsStep;

    private List<BreadcrumbItem> breadcrumbItems = new()
    {
        new BreadcrumbItem("AI推理引擎", href: "/ai-inference", icon: Icons.Material.Filled.Psychology),
        new BreadcrumbItem("创建推理事务", href: null, disabled: true)
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableSchemas();
        InitializeDefinition();
        
        // 初始化完成后进行一次验证
        await Task.Delay(100); // 等待组件渲染完成
        TriggerValidationForCurrentStep();
    }

    private async Task LoadAvailableSchemas()
    {
        try
        {
            availableSchemas = await SchemaService.GetAllSchemasAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"加载Schema列表失败: {ex.Message}", Severity.Error);
        }
    }

    private void InitializeDefinition()
    {
        definition = new ReasoningTransactionDefinition
        {
            Name = "",
            Description = "",
            QueryDefinitions = new List<QueryDefinition>(),
            PromptTemplate = new PromptTemplateDefinition
            {
                TemplateContent = "",
                ExpectedInputViewNames = new List<string>()
            },
            DataCombinationRules = new List<DataCombinationRule>
            {
                new DataCombinationRule
                {
                    Strategy = CombinationStrategy.CrossProduct,
                    MaxCombinations = 1000,
                    ViewNamesToCrossProduct = new List<string>(),
                    SingletonViewNamesForContext = new List<string>()
                }
            },
            ExecutionConstraints = new ExecutionConstraints
            {
                MaxEstimatedCostUSD = 10.0m,
                MaxExecutionTimeMinutes = 30,
                MaxConcurrentAICalls = 5,
                EnableBatching = true,
                BatchSize = 10
            }
        };
    }

    private string GetStepTitle()
    {
        return currentStep switch
        {
            0 => "基本信息",
            1 => "数据查询定义",
            2 => "数据组合规则", 
            3 => "Prompt模板设计",
            4 => "执行约束设置",
            5 => "确认推理事务定义",
            _ => ""
        };
    }

    private string GetStepDescription()
    {
        return currentStep switch
        {
            0 => "设置推理事务的名称、描述和主体Schema",
            1 => "定义从哪些数据源获取数据，以及如何筛选和选择字段",
            2 => "设置如何组合多个数据视图，包括叉积规则和单例上下文",
            3 => "创建用于AI生成的Prompt模板，使用占位符引用数据视图中的字段",
            4 => "设置执行限制，如最大成本、执行时间和并发调用数",
            5 => "确认所有设置并保存推理事务定义",
            _ => ""
        };
    }

    private void OnStepStatusChanged()
    {
        StateHasChanged();
    }

    private void OnStepValidationChanged(bool isValid)
    {
        stepValidations[currentStep] = isValid;
        StateHasChanged();
    }

    private bool CanProceedToNextStep()
    {
        return currentStep switch
        {
            0 => !string.IsNullOrWhiteSpace(definition.Name) && !string.IsNullOrWhiteSpace(definition.Description),
            1 => definition.QueryDefinitions.Any(),
            2 => definition.DataCombinationRules.Any() && 
                 (definition.DataCombinationRules[0].ViewNamesToCrossProduct.Any() || 
                  definition.DataCombinationRules[0].SingletonViewNamesForContext.Any()),
            3 => !string.IsNullOrWhiteSpace(definition.PromptTemplate.TemplateContent) && 
                 definition.PromptTemplate.ExpectedInputViewNames.Any(),
            4 => true, // 执行约束有默认值
            _ => true
        };
    }

    private async Task NextStep()
    {
        if (currentStep < 5 && CanProceedToNextStep())
        {
            // 在进入确认步骤前进行预估
            if (currentStep == 4)
            {
                await PerformEstimation();
            }
            
            currentStep++;
            StateHasChanged();
        }
    }

    private async Task PreviousStep()
    {
        if (currentStep > 0)
        {
            currentStep--;
            StateHasChanged();
        }
    }

    private async Task PerformEstimation()
    {
        try
        {
            estimatedCost = await ReasoningService.EstimateExecutionCostAsync(definition.Id ?? "temp");
            estimatedTime = await ReasoningService.EstimateExecutionTimeAsync(definition.Id ?? "temp");
            estimatedCombinations = await ReasoningService.EstimateCombinationCountAsync(definition.Id ?? "temp");
        }
        catch
        {
            // 使用简单估算作为后备
            estimatedCombinations = Math.Min(1000, definition.DataCombinationRules.FirstOrDefault()?.MaxCombinations ?? 1000);
            estimatedCost = estimatedCombinations * 0.02m;
            estimatedTime = TimeSpan.FromMinutes(Math.Ceiling(estimatedCombinations / (definition.ExecutionConstraints.MaxConcurrentAICalls * 10.0)));
        }
    }

    private async Task SaveDefinition()
    {
        try
        {
            isSaving = true;

            // 最终验证
            if (!CanProceedToNextStep())
            {
                Snackbar.Add("请检查所有必填信息是否完整", Severity.Warning);
                return;
            }

            // 保存定义
            await ReasoningService.CreateDefinitionAsync(definition);
            
            Snackbar.Add("推理事务定义创建成功", Severity.Success);
            Navigation.NavigateTo("/ai-inference");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"创建推理事务定义失败: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSaving = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/ai-inference");
    }

    private void TriggerValidationForCurrentStep()
    {
        // 手动触发当前步骤的验证，避免循环依赖
        var isValid = CanProceedToNextStep();
        stepValidations[currentStep] = isValid;
        StateHasChanged();
    }
} 