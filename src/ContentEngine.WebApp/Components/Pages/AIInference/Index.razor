@page "/ai-inference"
@using ContentEngine.Core.Inference.Services
@using ContentEngine.Core.Inference.Models
@using ContentEngine.WebApp.Components.Pages.AIInference.Shared.Dialogs
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IReasoningDefinitionService ReasoningDefinitionService
@inject IReasoningInstanceService ReasoningInstanceService

<PageTitle>AI推理引擎 - ContentEngine</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4">
    <MudStack Spacing="6">
        <!-- 页面标题 -->
        <MudGrid Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            <MudItem xs="12" sm="8">
                <MudText Typo="Typo.h4" GutterBottom="true" Class="page-title">AI推理引擎</MudText>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary">基于数据组合和模板的智能推理系统</MudText>
            </MudItem>
            <MudItem xs="12" sm="4" Class="d-flex justify-sm-end justify-xs-start">
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          StartIcon="@Icons.Material.Filled.Add"
                          OnClick="CreateNewDefinition"
                          Size="Size.Large">
                    创建推理事务
                </MudButton>
            </MudItem>
        </MudGrid>

        <!-- 统计卡片 -->
        <MudGrid>
            <MudItem xs="12" sm="6" md="3">
                <MudCard Class="stat-card">
                    <MudCardContent Class="pa-4">
                        <div class="d-flex align-center justify-space-between">
                            <div>
                                <MudText Typo="Typo.h5" Color="Color.Primary" Class="font-weight-bold">@totalDefinitions</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">推理定义</MudText>
                            </div>
                            <MudIcon Icon="@Icons.Material.Filled.Psychology" Color="Color.Primary" Size="Size.Large" />
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudCard Class="stat-card">
                    <MudCardContent Class="pa-4">
                        <div class="d-flex align-center justify-space-between">
                            <div>
                                <MudText Typo="Typo.h5" Color="Color.Success" Class="font-weight-bold">@runningInstances</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">运行中</MudText>
                            </div>
                            <MudIcon Icon="@Icons.Material.Filled.PlayArrow" Color="Color.Success" Size="Size.Large" />
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudCard Class="stat-card">
                    <MudCardContent Class="pa-4">
                        <div class="d-flex align-center justify-space-between">
                            <div>
                                <MudText Typo="Typo.h5" Color="Color.Info" Class="font-weight-bold">@completedInstances</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">已完成</MudText>
                            </div>
                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Info" Size="Size.Large" />
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudCard Class="stat-card">
                    <MudCardContent Class="pa-4">
                        <div class="d-flex align-center justify-space-between">
                            <div>
                                <MudText Typo="Typo.h5" Color="Color.Warning" Class="font-weight-bold">$@totalCost.ToString("F2")</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">总成本</MudText>
                            </div>
                            <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Color="Color.Warning" Size="Size.Large" />
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>

        <!-- 推理任务列表 -->
        <div>
            <div class="d-flex align-center justify-space-between mb-4">
                <MudText Typo="Typo.h5">推理事务</MudText>
                <MudIconButton Icon="@Icons.Material.Filled.Refresh" 
                              Color="Color.Default" 
                              OnClick="LoadInstances"
                              Title="刷新列表" />
            </div>

            @if (isLoading)
            {
                <div class="d-flex justify-center pa-8">
                    <MudProgressCircular Indeterminate="true" Size="Size.Large" />
                </div>
            }
            else if (instances.Any())
            {
                <MudGrid Spacing="4">
                    @foreach (var instance in instances)
                    {
                        <MudItem xs="12">
                            <MudCard Class="task-card hover-card" Outlined="true">
                                <MudCardContent Class="pa-4">
                                    <div class="d-flex justify-space-between align-start mb-3">
                                        <div class="flex-grow-1">
                                            <MudText Typo="Typo.h6" Class="mb-2">@GetDefinitionForInstance(instance)?.Name</MudText>
                                            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-3">
                                                @(string.IsNullOrEmpty(GetDefinitionForInstance(instance)?.Description) ? "无描述" : GetDefinitionForInstance(instance)?.Description)
                                            </MudText>
                                        </div>
                                        <div class="d-flex align-center gap-2">
                                            @GetStatusBadge(instance.Status)
                                        </div>
                                    </div>

                                    <!-- Schema标签 -->
                                    <div class="d-flex flex-wrap gap-2 mb-3">
                                        @foreach (var query in GetDefinitionForInstance(instance)?.QueryDefinitions ?? new List<QueryDefinition>())
                                        {
                                            <MudChip T="string" Size="Size.Small" Color="Color.Info" Variant="Variant.Outlined">
                                                @query.SourceSchemaName
                                            </MudChip>
                                        }
                                    </div>

                                    <!-- 统计信息 -->
                                    <MudGrid Spacing="2" Class="mb-3">
                                        <MudItem xs="12" sm="4">
                                            <div class="d-flex align-center text-muted">
                                                <MudIcon Icon="@Icons.Material.Filled.Schedule" Size="Size.Small" Class="mr-1" />
                                                <MudText Typo="Typo.caption">
                                                    创建于 @GetDefinitionForInstance(instance)?.CreatedAt.ToString("MM-dd HH:mm")
                                                </MudText>
                                            </div>
                                        </MudItem>
                                        <MudItem xs="12" sm="4">
                                            <div class="d-flex align-center text-muted">
                                                <MudText Typo="Typo.caption">
                                                    查询: @GetDefinitionForInstance(instance)?.QueryDefinitions.Count 个
                                                </MudText>
                                            </div>
                                        </MudItem>
                                        <MudItem xs="12" sm="4">
                                            @{
                                                var cost = instance.Metrics.ActualCostUSD;
                                            }
                                            <div class="d-flex align-center">
                                                <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Size="Size.Small" Color="Color.Success" Class="mr-1" />
                                                <MudText Typo="Typo.caption" Color="Color.Success" Class="font-weight-medium">
                                                    $@cost.ToString("F2")
                                                </MudText>
                                            </div>
                                        </MudItem>
                                    </MudGrid>

                                    <!-- 进度条（如果有运行中的实例） -->
                                    @{
                                        if (instance.Status == TransactionStatus.GeneratingOutputs || 
                                            instance.Status == TransactionStatus.FetchingData || 
                                            instance.Status == TransactionStatus.CombiningData)
                                        {
                                            <div class="mb-3">
                                                <div class="d-flex justify-space-between align-center mb-1">
                                                    <MudText Typo="Typo.caption" Color="Color.Secondary">执行进度</MudText>
                                                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                        @instance.Metrics.ProcessedCombinations / @instance.Metrics.TotalCombinations
                                                        (@instance.Metrics.ProgressPercentage.ToString("F0")%)
                                                    </MudText>
                                                </div>
                                                <MudProgressLinear Value="@instance.Metrics.ProgressPercentage" 
                                                                  Color="Color.Primary" 
                                                                  Size="Size.Small"
                                                                  Class="rounded" />
                                            </div>
                                        }
                                    }
                                </MudCardContent>

                                <MudCardActions Class="pa-4 pt-0">
                                    <MudButtonGroup Variant="Variant.Outlined" Size="Size.Small">
                                        <MudButton StartIcon="@Icons.Material.Filled.Visibility" 
                                                  Color="Color.Primary"
                                                  OnClick="() => ViewTaskDetail(instance.InstanceId)">
                                            查看详情
                                        </MudButton>
                                        <MudButton StartIcon="@Icons.Material.Filled.ContentCopy" 
                                                  Color="Color.Secondary"
                                                  OnClick="() => CopyTask(instance.InstanceId)">
                                            复制任务
                                        </MudButton>
                                        <MudButton StartIcon="@Icons.Material.Filled.PlayArrow" 
                                                  Color="Color.Success"
                                                  OnClick="() => ExecuteInstance(instance.InstanceId)">
                                            执行
                                        </MudButton>
                                    </MudButtonGroup>
                                    
                                    <MudSpacer />
                                    
                                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small">
                                        <MudMenuItem Icon="@Icons.Material.Filled.Edit" 
                                                    OnClick="() => EditDefinition(instance.InstanceId)">
                                            编辑
                                        </MudMenuItem>
                                        <MudMenuItem Icon="@Icons.Material.Filled.History" 
                                                    OnClick="() => ViewInstances(instance.InstanceId)">
                                            执行历史
                                        </MudMenuItem>
                                        <MudDivider />
                                        <MudMenuItem Icon="@Icons.Material.Filled.Delete" 
                                                    IconColor="Color.Error"
                                                    OnClick="() => DeleteInstance(instance.InstanceId)">
                                            删除
                                        </MudMenuItem>
                                    </MudMenu>
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            }
            else
            {
                <MudPaper Class="pa-8 text-center" Outlined="true">
                    <MudIcon Icon="@Icons.Material.Filled.Psychology" Size="Size.Large" Color="Color.Secondary" Class="mb-4" />
                    <MudText Typo="Typo.h6" Color="Color.Secondary" Class="mb-2">暂无推理事务定义</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">创建您的第一个推理事务来开始智能推理</MudText>
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              Size="Size.Large"
                              StartIcon="@Icons.Material.Filled.Add"
                              OnClick="CreateNewDefinition">
                        创建推理事务
                    </MudButton>
                </MudPaper>
            }
        </div>
    </MudStack>
</MudContainer>

<style>
.stat-card {
    transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
}

.stat-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
}

.task-card {
    transition: all 0.2s ease-in-out;
}

.hover-card:hover {
    box-shadow: 0 4px 20px rgba(0,0,0,0.12);
    transform: translateY(-1px);
}

.page-title {
    font-weight: 600;
}

.rounded {
    border-radius: 6px;
}
</style>

@code {
    private List<ReasoningTransactionInstance> instances = new();
    private List<ReasoningTransactionDefinition> definitions = new();
    private Dictionary<string, ReasoningTransactionDefinition> definitionLookup = new();
    private bool isLoading = true;
    
    // 统计数据
    private int totalDefinitions = 0;
    private int runningInstances = 0;
    private int completedInstances = 0;
    private decimal totalCost = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadInstances();
        await LoadStatistics();
    }

    private async Task LoadInstances()
    {
        try
        {
            isLoading = true;
            // 加载所有实例
            instances = await ReasoningInstanceService.GetInstancesAsync();
            
            // 加载所有定义用于显示名称和描述
            definitions = await ReasoningDefinitionService.GetDefinitionsAsync();
            definitionLookup = definitions.ToDictionary(d => d.Id, d => d);
            
            totalDefinitions = definitions.Count;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"加载推理实例失败: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadStatistics()
    {
        try
        {
            runningInstances = instances.Count(i => i.Status == TransactionStatus.GeneratingOutputs || 
                                                      i.Status == TransactionStatus.FetchingData || 
                                                      i.Status == TransactionStatus.CombiningData);
            completedInstances = instances.Count(i => i.Status == TransactionStatus.Completed);
            totalCost = instances.Sum(i => i.Metrics.ActualCostUSD);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"加载统计数据失败: {ex.Message}", Severity.Error);
        }
    }

    private ReasoningTransactionDefinition? GetDefinitionForInstance(ReasoningTransactionInstance instance)
    {
        definitionLookup.TryGetValue(instance.DefinitionId, out var definition);
        return definition;
    }

    private RenderFragment GetStatusBadge(TransactionStatus status)
    {
        var (text, color) = status switch
        {
            TransactionStatus.Completed => ("已完成", Color.Success),
            TransactionStatus.GeneratingOutputs or TransactionStatus.FetchingData or TransactionStatus.CombiningData => ("运行中", Color.Primary),
            TransactionStatus.Paused => ("已暂停", Color.Warning),
            TransactionStatus.Failed => ("失败", Color.Error),
            _ => ("等待中", Color.Default)
        };
        
        return @<MudChip T="string" Size="Size.Small" Color="@color">@text</MudChip>;
    }

    private void CreateNewDefinition()
    {
        Navigation.NavigateTo("/ai-inference/create");
    }

    private void ViewTaskDetail(string instanceId)
    {
        Navigation.NavigateTo($"/ai-inference/detail/{instanceId}");
    }

    private void EditDefinition(string instanceId)
    {
        var instance = instances.FirstOrDefault(i => i.InstanceId == instanceId);
        if (instance != null)
        {
            Navigation.NavigateTo($"/ai-inference/edit/{instance.DefinitionId}");
        }
    }

    private void ViewInstances(string instanceId)
    {
        var instance = instances.FirstOrDefault(i => i.InstanceId == instanceId);
        if (instance != null)
        {
            Navigation.NavigateTo($"/ai-inference/instances/{instance.DefinitionId}");
        }
    }

    private async Task CopyTask(string instanceId)
    {
        try
        {
            var instance = instances.FirstOrDefault(i => i.InstanceId == instanceId);
            if (instance == null) return;
            
            var definition = GetDefinitionForInstance(instance);
            if (definition != null)
            {
                // 复制任务逻辑 - 基于定义创建新定义（这会自动创建新的默认实例）
                var newDefinition = new ReasoningTransactionDefinition
                {
                    Name = $"{definition.Name} (副本)",
                    Description = definition.Description,
                    QueryDefinitions = definition.QueryDefinitions.Select(q => new QueryDefinition
                    {
                        OutputViewName = q.OutputViewName,
                        SourceSchemaName = q.SourceSchemaName,
                        FilterExpression = q.FilterExpression,
                        SelectFields = new List<string>(q.SelectFields)
                    }).ToList(),
                    PromptTemplate = new PromptTemplateDefinition
                    {
                        TemplateContent = definition.PromptTemplate.TemplateContent,
                        ExpectedInputViewNames = new List<string>(definition.PromptTemplate.ExpectedInputViewNames)
                    },
                    DataCombinationRules = definition.DataCombinationRules.Select(r => new DataCombinationRule
                    {
                        ViewNamesToCrossProduct = new List<string>(r.ViewNamesToCrossProduct),
                        SingletonViewNamesForContext = new List<string>(r.SingletonViewNamesForContext),
                        MaxCombinations = r.MaxCombinations,
                        Strategy = r.Strategy,
                        SamplingRule = r.SamplingRule
                    }).ToList(),
                    ExecutionConstraints = new ExecutionConstraints
                    {
                        MaxEstimatedCostUSD = definition.ExecutionConstraints.MaxEstimatedCostUSD,
                        MaxExecutionTimeMinutes = definition.ExecutionConstraints.MaxExecutionTimeMinutes,
                        MaxConcurrentAICalls = definition.ExecutionConstraints.MaxConcurrentAICalls,
                        EnableBatching = definition.ExecutionConstraints.EnableBatching,
                        BatchSize = definition.ExecutionConstraints.BatchSize
                    }
                };
                
                // TODO: 重构通用的Instance复制接口
                await ReasoningDefinitionService.CreateDefinitionAsync(newDefinition);
                await ReasoningInstanceService.CreateInstanceAsync(newDefinition.Id);
                Snackbar.Add("任务复制成功", Severity.Success);
                
                
                await LoadInstances();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"复制任务失败: {ex.Message}", Severity.Error);
        }
    }

    private async Task ExecuteInstance(string instanceId)
    {
        try
        {
            var instance = instances.FirstOrDefault(i => i.InstanceId == instanceId);
            if (instance == null) return;

            var definition = GetDefinitionForInstance(instance);
            if (definition == null) return;

            // 显示确认对话框
            var parameters = new DialogParameters
            {
                ["Instance"] = instance
            };

            var dialog = await DialogService.ShowAsync<ExecuteConfirmDialog>("确认执行", parameters);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                Snackbar.Add("推理事务已开始执行", Severity.Success);
                
                // 导航到执行监控页面
                Navigation.NavigateTo($"/ai-inference/detail/{instanceId}");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"执行推理事务失败: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeleteInstance(string instanceId)
    {
        try
        {
            var instance = instances.FirstOrDefault(i => i.InstanceId == instanceId);
            if (instance == null) return;

            var definition = GetDefinitionForInstance(instance);
            var displayName = definition?.Name ?? "未知任务";

            bool? result = await DialogService.ShowMessageBox(
                "确认删除",
                $"确定要删除推理实例 '{displayName}' ({instance.InstanceId[..8]}...) 吗？此操作不可撤销。",
                yesText: "删除", cancelText: "取消");

            if (result == true)
            {
                await ReasoningInstanceService.DeleteInstanceAsync(instanceId);
                Snackbar.Add("推理实例已删除", Severity.Success);
                await LoadInstances();
                await LoadStatistics();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"删除推理实例失败: {ex.Message}", Severity.Error);
        }
    }
} 