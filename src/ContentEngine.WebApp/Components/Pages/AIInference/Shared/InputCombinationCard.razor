@using ContentEngine.Core.Inference.Models
@using LiteDB

<MudCard Outlined="true" Class="combination-card hover-card">
    <MudCardContent Class="pa-3">
        <div class="d-flex justify-space-between align-center mb-2">
            <div class="d-flex align-center gap-2">
                <code class="combination-id">@Combination.CombinationId</code>
                <MudChip T="string" Size="Size.Small" Color="@GetStatusColor()" Icon="@GetStatusIcon()">
                    @GetStatusText()
                </MudChip>
            </div>
            
            @if (ShowActions)
            {
                <div class="d-flex gap-1">
                    <MudIconButton Icon="@Icons.Material.Filled.PlayArrow"
                                  Color="Color.Primary"
                                  Size="Size.Small"
                                  OnClick="() => OnExecute.InvokeAsync(Combination)"
                                  Title="执行组合" />
                    <MudIconButton Icon="@Icons.Material.Filled.Visibility"
                                  Color="Color.Info"
                                  Size="Size.Small"
                                  OnClick="() => OnPreview.InvokeAsync(Combination)"
                                  Title="预览数据" />
                </div>
            }
        </div>
        
        <div class="combination-data">
            <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mb-1">包含的视图:</MudText>
            <div class="d-flex flex-wrap gap-1">
                @foreach (var kvp in Combination.DataMap)
                {
                    <MudTooltip Text="@GetDataSummary(kvp.Value)">
                        <MudChip T="string" Size="Size.Small" Color="Color.Default" Variant="Variant.Outlined">
                            @kvp.Key (@GetRecordCount(kvp.Value))
                        </MudChip>
                    </MudTooltip>
                }
            </div>
        </div>

        @if (ShowDataPreview && Combination.DataMap.Any())
        {
            <MudCollapse Expanded="@isExpanded">
                <MudDivider Class="my-2" />
                <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mb-1">数据预览:</MudText>
                @foreach (var kvp in Combination.DataMap.Take(PreviewLimit))
                {
                    <div class="data-preview-item mb-1">
                        <MudText Typo="Typo.caption" Class="font-weight-bold">@kvp.Key:</MudText>
                        <pre class="data-preview-content">@GetFormattedData(kvp.Value)</pre>
                    </div>
                }
            </MudCollapse>
            
            <MudButton Variant="Variant.Text" 
                      Size="Size.Small" 
                      StartIcon="@(isExpanded ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore)"
                      OnClick="ToggleExpansion"
                      Class="mt-1">
                @(isExpanded ? "收起" : "展开")数据预览
            </MudButton>
        }
    </MudCardContent>
</MudCard>

<style>
.combination-id {
    font-family: 'Courier New', monospace;
    background-color: var(--mud-palette-grey-lighten-4);
    padding: 2px 6px;
    border-radius: 4px;
    font-size: 0.75rem;
}

.data-preview-item {
    background-color: var(--mud-palette-grey-lighten-5);
    padding: 8px;
    border-radius: 4px;
    border-left: 3px solid var(--mud-palette-primary);
}

.data-preview-content {
    font-size: 0.75rem;
    line-height: 1.3;
    max-height: 100px;
    overflow-y: auto;
    margin: 4px 0 0 0;
    white-space: pre-wrap;
    word-break: break-word;
}
</style>

@code {
    [Parameter] public ReasoningInputCombination Combination { get; set; } = new();
    [Parameter] public bool ShowActions { get; set; } = false;
    [Parameter] public bool ShowDataPreview { get; set; } = false;
    [Parameter] public int PreviewLimit { get; set; } = 3;
    [Parameter] public EventCallback<ReasoningInputCombination> OnExecute { get; set; }
    [Parameter] public EventCallback<ReasoningInputCombination> OnPreview { get; set; }
    
    private bool isExpanded = false;
    
    private void ToggleExpansion()
    {
        isExpanded = !isExpanded;
    }
    
    private Color GetStatusColor()
    {
        // 目前是实时生成的组合，状态为待处理
        return Color.Default;
    }
    
    private string GetStatusIcon()
    {
        return Icons.Material.Filled.Schedule;
    }
    
    private string GetStatusText()
    {
        return "待处理";
    }
    
    private string GetDataSummary(BsonDocument doc)
    {
        if (doc == null) return "无数据";
        
        var fieldCount = doc.Keys.Count();
        var preview = string.Join(", ", doc.Take(3).Select(kvp => $"{kvp.Key}: {GetFieldValuePreview(kvp.Value)}"));
        
        if (fieldCount > 3)
        {
            preview += $" ...等{fieldCount}个字段";
        }
        
        return preview;
    }
    
    private string GetRecordCount(BsonDocument doc)
    {
        return doc?.Keys.Count().ToString() ?? "0";
    }
    
    private string GetFormattedData(BsonDocument doc)
    {
        if (doc == null) return "无数据";
        
        var lines = new List<string>();
        foreach (var kvp in doc.Take(5)) // 只显示前5个字段
        {
            var value = GetFieldValuePreview(kvp.Value);
            lines.Add($"{kvp.Key}: {value}");
        }
        
        if (doc.Keys.Count() > 5)
        {
            lines.Add($"...等{doc.Keys.Count() - 5}个字段");
        }
        
        return string.Join("\n", lines);
    }
    
    private string GetFieldValuePreview(BsonValue value)
    {
        if (value == null || value.IsNull) return "null";
        
        var str = value.ToString();
        return str.Length > 50 ? str.Substring(0, 47) + "..." : str;
    }
} 