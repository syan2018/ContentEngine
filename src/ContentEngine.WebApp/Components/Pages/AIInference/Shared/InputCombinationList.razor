@using ContentEngine.Core.Inference.Models
@using ContentEngine.Core.Inference.Utils
@using LiteDB

<link href="/Shared/CombinationStyles.css" rel="stylesheet" />

<MudTable Items="@Combinations" 
          Hover="true" 
          Striped="true" 
          Dense="@Dense"
          FixedHeader="true"
          HorizontalScrollbar="true"
          Breakpoint="Breakpoint.None"
          Style="overflow-x: auto;"
          Class="combination-table">
    <HeaderContent>
        <MudTh Style="width: 100px; white-space: nowrap;">ID</MudTh>
        @foreach (var viewName in ViewNames)
        {
            <MudTh Style="@(GetViewColumnStyle(viewName) + " white-space: nowrap;")">@viewName</MudTh>
        }
        <MudTh Style="width: 80px; white-space: nowrap;">状态</MudTh>
        <MudTh Style="width: 80px; white-space: nowrap;">成本</MudTh>
        @if (ShowResultsPreview)
        {
            <MudTh Style="min-width: 300px; white-space: nowrap;">生成结果</MudTh>
        }
        @if (ShowActions)
        {
            <MudTh Style="width: 100px; white-space: nowrap;">操作</MudTh>
        }
    </HeaderContent>
    <RowTemplate>
        <MudTd Style="white-space: nowrap;">
            <code class="combination-id">@GetShortId(context.CombinationId)</code>
        </MudTd>
        @foreach (var viewName in ViewNames)
        {
            <MudTd Style="white-space: nowrap;">
                @GetViewContent(context.DataMap.GetValueOrDefault(viewName))
            </MudTd>
        }
        <MudTd Style="white-space: nowrap;">
            @GetStatusChip(context)
        </MudTd>
        <MudTd Style="white-space: nowrap;">
            @GetCostDisplay(context)
        </MudTd>
        @if (ShowResultsPreview)
        {
            <MudTd Style="white-space: nowrap;">
                @GetResultPreview(context)
            </MudTd>
        }
        @if (ShowActions)
        {
            <MudTd Style="white-space: nowrap;">
                @GetActionButtons(context)
            </MudTd>
        }
    </RowTemplate>
    <PagerContent>
        @if (ShowPagination && TotalCount > 0)
        {
            <MudTablePager PageSizeOptions="new int[]{10, 25, 50, 100}" 
                          HideRowsPerPage="false"
                          HidePagination="false"
                          InfoFormat="{first_item}-{last_item} / {all_items}" />
        }
    </PagerContent>
</MudTable>

@* 批量操作工具栏 *@
@if (Combinations?.Any() == true && ShowActions)
{
    <div class="batch-actions-toolbar">
        <div class="batch-stats">
            @foreach (var stat in GetBatchStats())
            {
                <MudChip T="string" Size="Size.Small" Color="@stat.Color" Icon="@stat.Icon">
                    @stat.Label: @stat.Value
                </MudChip>
            }
        </div>
        
        <div class="batch-buttons">
            @foreach (var action in GetBatchActions())
            {
                <MudButton StartIcon="@action.Icon"
                          Color="@action.Color"
                          Size="Size.Small"
                          OnClick="action.OnClick">
                    @action.Label
                </MudButton>
            }
        </div>
    </div>
}

@if (Combinations?.Any() != true)
{
    <div class="empty-state">
        <MudIcon Icon="@Icons.Material.Outlined.DataArray" Size="Size.Large" Color="Color.Secondary" />
        <MudText Typo="Typo.body1" Color="Color.Secondary" Class="mt-2">
            @EmptyMessage
        </MudText>
    </div>
}

@code {
    [Parameter] public List<ReasoningInputCombination> Combinations { get; set; } = new();
    [Parameter] public List<ReasoningOutputItem> Outputs { get; set; } = new();
    [Parameter] public bool ShowActions { get; set; } = true;
    [Parameter] public bool ShowPagination { get; set; } = true;
    [Parameter] public bool Dense { get; set; } = false;
    [Parameter] public int TotalCount { get; set; }
    [Parameter] public string EmptyMessage { get; set; } = "暂无组合数据";
    [Parameter] public string? PromptTemplate { get; set; }
    [Parameter] public bool ShowResultsPreview { get; set; } = false;
    
    [Parameter] public EventCallback<ReasoningInputCombination> OnExecute { get; set; }
    [Parameter] public EventCallback<ReasoningInputCombination> OnPreview { get; set; }
    [Parameter] public EventCallback<string> OnPromptPreview { get; set; }
    [Parameter] public EventCallback<ReasoningInputCombination> OnViewResult { get; set; }
    [Parameter] public EventCallback<ReasoningInputCombination> OnRetry { get; set; }
    [Parameter] public EventCallback<List<string>> OnBatchExecute { get; set; }
    [Parameter] public EventCallback<List<string>> OnBatchRetry { get; set; }
    [Parameter] public EventCallback OnExportResults { get; set; }

    private List<string> ViewNames = new();

    protected override void OnParametersSet()
    {
        ViewNames = Combinations
            .SelectMany(c => c.DataMap.Keys)
            .Distinct()
            .OrderBy(name => name)
            .ToList();
    }

    private string GetShortId(string combinationId) => 
        combinationId.Length > 6 ? $"{combinationId[..6]}" : combinationId;

    private string GetViewColumnStyle(string viewName) =>
        ShowResultsPreview 
            ? (Dense ? "min-width: 120px; max-width: 150px;" : "min-width: 150px; max-width: 200px;")
            : (Dense ? "min-width: 200px;" : "min-width: 300px;");

    private RenderFragment GetViewContent(BsonDocument? doc)
    {
        if (doc == null) return @<span class="no-data">-</span>;
        
        var fields = doc.Where(kvp => kvp.Key != "_id" && kvp.Value != null && !kvp.Value.IsNull).ToList();
        var maxFields = (Dense && ShowResultsPreview) ? 1 : (Dense ? 1 : 4);
        var displayFields = fields.Take(maxFields).ToList();
        var hasMoreFields = fields.Count > maxFields;
        
        return @<div class="view-content-container" title="@GetTooltipText(fields)">
            <div class="field-chips-row">
                @foreach (var kvp in displayFields)
                {
                    <div class="field-chip" title="@($"{kvp.Key}: {kvp.Value}")">
                        <span class="field-label">@kvp.Key</span>
                        <span class="field-content">@kvp.Value.ToString()</span>
                    </div>
                }
                @if (hasMoreFields && !ShowResultsPreview)
                {
                    <div class="more-fields-indicator">
                        <MudIcon Icon="@Icons.Material.Filled.MoreHoriz" Size="Size.Small" />
                        <span>+@(fields.Count - maxFields)</span>
                    </div>
                }
            </div>
        </div>;
    }

    private string GetTooltipText(List<KeyValuePair<string, BsonValue>> fields) =>
        string.Join("\n", fields.Select(kvp => $"{kvp.Key}: {kvp.Value}"));

    private RenderFragment GetStatusChip(ReasoningInputCombination combination)
    {
        var output = GetOutput(combination);
        var (text, color, icon) = output switch
        {
            null => ("待处理", Color.Warning, Icons.Material.Filled.Schedule),
            { IsSuccess: true } => ("已完成", Color.Success, Icons.Material.Filled.CheckCircle),
            _ => ("失败", Color.Error, Icons.Material.Filled.Error)
        };
        
        return @<div class="status-container">
            <MudChip T="string" Size="Size.Small" Color="@color" Icon="@icon" Variant="Variant.Filled">
                @text
            </MudChip>
            @if (output != null && !output.IsSuccess)
            {
                <MudTooltip Text="@output.FailureReason">
                    <MudIcon Icon="@Icons.Material.Filled.Error" 
                            Size="Size.Small" 
                            Color="Color.Error" 
                            Class="ml-1" />
                </MudTooltip>
            }
        </div>;
    }

    private RenderFragment GetCostDisplay(ReasoningInputCombination combination)
    {
        var cost = GetOutput(combination)?.CostUSD ?? 0;
        return cost > 0 
            ? @<span class="cost-display">$@cost.ToString("F3")</span>
            : @<span class="no-cost">-</span>;
    }

    private RenderFragment GetResultPreview(ReasoningInputCombination combination)
    {
        var output = GetOutput(combination);
        
        if (output?.IsSuccess == true && !string.IsNullOrWhiteSpace(output.GeneratedText))
        {
            return @<div class="result-preview @(Dense ? "compact" : "")">
                <div class="result-text" title="@output.GeneratedText">
                    @output.GeneratedText
                </div>
            </div>;
        }
        else if (output != null && !output.IsSuccess)
        {
            return @<div class="result-preview error @(Dense ? "compact" : "")">
                <div class="result-text error-text" title="@(output.FailureReason ?? "未知错误")">
                    @(output.FailureReason ?? "未知错误")
                </div>
            </div>;
        }
        
        return @<span class="no-data">未执行</span>;
    }

    private RenderFragment GetActionButtons(ReasoningInputCombination combination)
    {
        var output = GetOutput(combination);
        
        return @<div class="action-buttons">
            @if (output == null)
            {
                <MudTooltip Text="执行组合">
                    <MudIconButton Icon="@Icons.Material.Filled.PlayArrow"
                                  Color="Color.Primary"
                                  Size="Size.Small"
                                  OnClick="() => OnExecute.InvokeAsync(combination)" />
                </MudTooltip>
            }
            else if (output.IsSuccess)
            {
                <MudTooltip Text="查看结果">
                    <MudIconButton Icon="@Icons.Material.Filled.Visibility"
                                  Color="Color.Success"
                                  Size="Size.Small"
                                  OnClick="() => OnViewResult.InvokeAsync(combination)" />
                </MudTooltip>
            }
            else
            {
                <MudTooltip Text="重试执行">
                    <MudIconButton Icon="@Icons.Material.Filled.Refresh"
                                  Color="Color.Warning"
                                  Size="Size.Small"
                                  OnClick="() => OnRetry.InvokeAsync(combination)" />
                </MudTooltip>
            }
            
            <MudTooltip Text="预览Prompt">
                <MudIconButton Icon="@Icons.Material.Filled.TextSnippet"
                              Color="Color.Secondary"
                              Size="Size.Small"
                              OnClick="() => ShowPromptPreview(combination)" />
            </MudTooltip>
        </div>;
    }

    private async Task ShowPromptPreview(ReasoningInputCombination combination)
    {
        if (string.IsNullOrEmpty(PromptTemplate))
        {
            await OnPromptPreview.InvokeAsync("未提供Prompt模板");
            return;
        }

        try
        {
            var filledPrompt = PromptTemplatingEngine.Fill(PromptTemplate, combination.DataMap);
            await OnPromptPreview.InvokeAsync(filledPrompt);
        }
        catch (Exception ex)
        {
            await OnPromptPreview.InvokeAsync($"生成Prompt预览失败: {ex.Message}");
        }
    }

    private ReasoningOutputItem? GetOutput(ReasoningInputCombination combination) =>
        Outputs?.FirstOrDefault(o => o.InputCombinationId == combination.CombinationId);

    private record BatchStat(string Label, string Value, Color Color, string Icon);
    private record BatchAction(string Label, string Icon, Color Color, EventCallback OnClick);

    private IEnumerable<BatchStat> GetBatchStats()
    {
        yield return new("已完成", GetCompletedCount().ToString(), Color.Success, Icons.Material.Filled.CheckCircle);
        yield return new("失败", GetFailedCount().ToString(), Color.Error, Icons.Material.Filled.Error);
        yield return new("待处理", GetPendingCount().ToString(), Color.Warning, Icons.Material.Filled.Schedule);
        yield return new("总成本", $"${GetTotalCost():F3}", Color.Info, Icons.Material.Filled.AttachMoney);
    }

    private IEnumerable<BatchAction> GetBatchActions()
    {
        if (GetPendingCount() > 0)
            yield return new($"执行待处理 ({GetPendingCount()})", Icons.Material.Filled.PlayArrow, Color.Primary, 
                EventCallback.Factory.Create(this, ExecutePendingCombinations));
        
        if (GetFailedCount() > 0)
            yield return new($"重试失败 ({GetFailedCount()})", Icons.Material.Filled.Refresh, Color.Warning,
                EventCallback.Factory.Create(this, RetryFailedCombinations));
        
        if (GetCompletedCount() > 0)
            yield return new("导出结果", Icons.Material.Filled.Download, Color.Secondary,
                EventCallback.Factory.Create(this, () => OnExportResults.InvokeAsync()));
    }

    private int GetCompletedCount() => Combinations.Count(c => GetOutput(c)?.IsSuccess == true);
    private int GetFailedCount() => Combinations.Count(c => GetOutput(c) != null && !GetOutput(c).IsSuccess);
    private int GetPendingCount() => Combinations.Count(c => GetOutput(c) == null);
    private decimal GetTotalCost() => Outputs?.Where(o => o.IsSuccess).Sum(o => o.CostUSD) ?? 0;

    private async Task ExecutePendingCombinations()
    {
        var pendingIds = Combinations
            .Where(c => GetOutput(c) == null)
            .Select(c => c.CombinationId)
            .ToList();
            
        if (pendingIds.Any())
            await OnBatchExecute.InvokeAsync(pendingIds);
    }

    private async Task RetryFailedCombinations()
    {
        var failedIds = Combinations
            .Where(c => GetOutput(c) != null && !GetOutput(c).IsSuccess)
            .Select(c => c.CombinationId)
            .ToList();
            
        if (failedIds.Any())
            await OnBatchRetry.InvokeAsync(failedIds);
    }
} 