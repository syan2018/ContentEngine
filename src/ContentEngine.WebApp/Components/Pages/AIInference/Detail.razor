@page "/ai-inference/detail/{TaskId}"
@using ContentEngine.Core.Inference.Services
@using ContentEngine.Core.Inference.Models
@using ContentEngine.Core.Utils
@using ContentEngine.WebApp.Components.Pages.AIInference.Shared
@using ContentEngine.WebApp.Components.Pages.AIInference.Shared.Dialogs
@using ContentEngine.WebApp.Components.Shared
@inject IReasoningDefinitionService ReasoningDefinitionService
@inject IReasoningInstanceService ReasoningInstanceService
@inject IReasoningExecutionService ReasoningExecutionService
@inject IReasoningCombinationService ReasoningCombinationService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime

<link href="Shared/AIInferenceStyles.css" rel="stylesheet" />

<PageTitle>@(definition?.Name ?? "推理实例详情") - ContentEngine</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4">
    <!-- 统一的面包屑导航 -->
    <PageBreadcrumb Page="PageBreadcrumb.PageType.AIInferenceDetail" 
                   TaskName="@(definition?.Name ?? $"实例 {instance?.InstanceId?[..8]}...")" 
                   TaskId="@TaskId" />

    @if (isLoading)
    {
        <div class="loading-center">
            <MudProgressCircular Indeterminate="true" Size="Size.Large" />
            <MudText Typo="Typo.body1" Color="Color.Secondary" Class="mt-3">
                正在加载任务详情...
            </MudText>
        </div>
    }
    else if (instance == null)
    {
        <MudAlert Severity="Severity.Error">
            推理实例不存在或已被删除
        </MudAlert>
    }
    else
    {
        <!-- 任务头部信息 -->
        <TaskHeaderCard Instance="@instance"
                       Definition="@definition"
                       IsExecuting="@isExecuting"
                       OnExecute="ExecuteTask"
                       OnCopy="CopyTask"
                       OnEdit="EditTask" />

        <!-- 详情标签页 -->
        <MudTabs @bind-ActivePanelIndex="activeTab" Elevation="2" Rounded="true" ApplyEffectsToContainer="true" Class="mb-4">
            <MudTabPanel Text="任务概览" Icon="@Material.Filled.Dashboard">
                @if (definition != null)
                {
                    <TaskOverviewTab Definition="@definition" Instance="@instance" />
                }
            </MudTabPanel>
            
            <MudTabPanel Text="推理请求" Icon="@Material.Filled.DataArray">
                <CombinationTableView 
                    Combinations="@realTimeCombinations"
                    Outputs="@(instance.Outputs)"
                    IsLoadingCombinations="@isLoadingCombinations"
                    IsCompactView="@isCompactView"
                    HasCachedCombinations="@(instance.InputCombinations?.Any() == true && instance.InputCombinations.Count == realTimeCombinations.Count)"
                    HasQueryDefinitions="@(definition?.QueryDefinitions?.Any() == true)"
                    PromptTemplate="@definition?.PromptTemplate?.TemplateContent"
                    OnRefreshCombinations="RefreshCombinations"
                    OnViewModeChanged="HandleViewModeChanged"
                    OnExecuteCombination="ExecuteCombination"
                    OnPromptPreview="ShowPromptPreview"
                    OnViewResult="ViewCombinationResult"
                    OnRetryCombination="RetryCombination"
                    OnBatchExecute="BatchExecuteCombinations"
                    OnBatchRetry="BatchRetryCombinations"
                    OnExportResults="ExportResults" />
            </MudTabPanel>
        </MudTabs>
    }
</MudContainer>

<style>
.loading-center {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 4rem;
    text-align: center;
}
</style>

@code {
    [Parameter] public string TaskId { get; set; } = string.Empty;
    
    private ReasoningTransactionInstance? instance;
    private ReasoningTransactionDefinition? definition;
    private bool isLoading = true;
    private bool isExecuting = false;
    private int activeTab = 0;
    private bool isLoadingCombinations = false;
    private List<ReasoningInputCombination> realTimeCombinations = new();
    private bool isCompactView = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadInstanceDetail();
    }

    private async Task LoadInstanceDetail()
    {
        isLoading = true;
        try
        {
            instance = await ReasoningInstanceService.GetInstanceByIdAsync(TaskId);
            
            if (instance != null)
            {
                definition = await ReasoningDefinitionService.GetDefinitionByIdAsync(instance.DefinitionId);
                
                if (instance.InputCombinations?.Any() == true)
                {
                    realTimeCombinations = instance.InputCombinations;
                }
                else
                {
                    realTimeCombinations.Clear();
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"加载实例详情失败: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ExecuteTask()
    {
        if (instance == null) return;
        
        isExecuting = true;
        try
        {
            await ReasoningExecutionService.ExecuteTransactionAsync(instance.InstanceId);
            Snackbar.Add("任务已开始执行", Severity.Success);
            await LoadInstanceDetail();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"执行任务失败: {ex.Message}", Severity.Error);
        }
        finally
        {
            isExecuting = false;
        }
    }

    private async Task CopyTask()
    {
        if (definition == null) return;
        
        try
        {
            var copy = new ReasoningTransactionDefinition
            {
                Name = $"{definition.Name} - 副本",
                Description = definition.Description,
                QueryDefinitions = definition.QueryDefinitions.ToList(),
                DataCombinationRules = definition.DataCombinationRules.ToList(),
                PromptTemplate = new PromptTemplateDefinition
                {
                    TemplateContent = definition.PromptTemplate.TemplateContent,
                    ExpectedInputViewNames = definition.PromptTemplate.ExpectedInputViewNames.ToList()
                },
                ExecutionConstraints = new ExecutionConstraints
                {
                    MaxEstimatedCostUSD = definition.ExecutionConstraints.MaxEstimatedCostUSD,
                    MaxExecutionTimeMinutes = definition.ExecutionConstraints.MaxExecutionTimeMinutes,
                    MaxConcurrentAICalls = definition.ExecutionConstraints.MaxConcurrentAICalls,
                    EnableBatching = definition.ExecutionConstraints.EnableBatching,
                    BatchSize = definition.ExecutionConstraints.BatchSize
                }
            };
            
            var created = await ReasoningDefinitionService.CreateDefinitionAsync(copy);
            var newInstance = await ReasoningInstanceService.CreateInstanceAsync(created.Id);
            
            Snackbar.Add("任务已复制，切换至新任务", Severity.Success);
            Navigation.NavigateTo($"/ai-inference/detail/{newInstance.InstanceId}");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"复制任务失败: {ex.Message}", Severity.Error);
        }
    }

    private async Task EditTask()
    {
        if (definition == null) return;
        Navigation.NavigateTo($"/ai-inference/create?editId={definition.Id}");
    }

    private async Task RefreshCombinations()
    {
        if (instance == null) return;
        
        if (instance.Outputs?.Any() == true)
        {
            var result = await DialogService.ShowMessageBox(
                "确认重新生成组合",
                "重新生成组合将清空所有现有的输出结果和执行记录，并将实例状态重置为待处理。此操作不可撤销，是否继续？",
                yesText: "确认重新生成", 
                cancelText: "取消");
                
            if (result != true) return;
        }
        
        isLoadingCombinations = true;
        try
        {
            realTimeCombinations = await ReasoningCombinationService.RegenerateAndResetInstanceAsync(instance.InstanceId);
            await LoadInstanceDetail();
            Snackbar.Add($"输入组合已重新生成，实例状态已重置: {realTimeCombinations.Count} 个组合", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"重新生成输入组合失败: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoadingCombinations = false;
        }
    }

    private async Task HandleViewModeChanged(bool isCompact)
    {
        isCompactView = isCompact;
        await Task.CompletedTask;
    }

    private async Task ExecuteCombination(ReasoningInputCombination combination)
    {
        if (instance == null) return;
        
        try
        {
            var outputItem = await ReasoningCombinationService.ExecuteCombinationAsync(instance.InstanceId, combination.CombinationId);
            Snackbar.Add($"组合 {combination.CombinationId[..8]}... 已执行{(outputItem.IsSuccess ? "成功" : "失败")}", 
                outputItem.IsSuccess ? Severity.Success : Severity.Error);
            await LoadInstanceDetail();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"执行组合失败: {ex.Message}", Severity.Error);
        }
    }

    private async Task ShowPromptPreview(string promptContent)
    {
        await DialogService.ShowAsync<PromptPreviewDialog>("Prompt预览", new DialogParameters
        {
            ["Content"] = promptContent
        }, new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        });
    }

    private async Task ViewCombinationResult(ReasoningInputCombination combination)
    {
        if (instance == null) return;
        
        try
        {
            var output = await ReasoningCombinationService.GetOutputForCombinationAsync(instance.InstanceId, combination.CombinationId);
            if (output != null)
            {
                var inputData = new Dictionary<string, object>();
                if (combination.DataMap != null)
                {
                    foreach (var kvp in combination.DataMap)
                    {
                        inputData[kvp.Key] = kvp.Value.AsDocument ?? new LiteDB.BsonDocument();
                    }
                }
                
                await DialogService.ShowAsync<ResultViewDialog>("查看结果", new DialogParameters
                {
                    ["Content"] = output.GeneratedText,
                    ["CombinationId"] = combination.CombinationId,
                    ["InputData"] = inputData,
                    ["Cost"] = output.CostUSD,
                    ["GeneratedAt"] = output.GeneratedAt
                }, new DialogOptions
                {
                    MaxWidth = MaxWidth.Medium,
                    FullWidth = true
                });
            }
            else
            {
                Snackbar.Add("该组合尚未执行或未产生输出结果", Severity.Info);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"查看结果失败: {ex.Message}", Severity.Error);
        }
    }

    private async Task RetryCombination(ReasoningInputCombination combination)
    {
        if (instance == null) return;
        
        try
        {
            var outputItem = await ReasoningCombinationService.ExecuteCombinationAsync(instance.InstanceId, combination.CombinationId);
            Snackbar.Add($"组合 {combination.CombinationId[..8]}... 重试执行{(outputItem.IsSuccess ? "成功" : "失败")}", 
                outputItem.IsSuccess ? Severity.Success : Severity.Error);
            await LoadInstanceDetail();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"重试执行失败: {ex.Message}", Severity.Error);
        }
    }

    private async Task BatchExecuteCombinations(List<string> combinationIds)
    {
        await ExecuteBatchOperation(combinationIds, "执行", "确认批量执行");
    }

    private async Task BatchRetryCombinations(List<string> combinationIds)
    {
        await ExecuteBatchOperation(combinationIds, "重试", "确认批量重试");
    }

    private async Task ExecuteBatchOperation(List<string> combinationIds, string operation, string confirmTitle)
    {
        if (instance == null || !combinationIds.Any()) return;
        
        var result = await DialogService.ShowMessageBox(
            confirmTitle,
            $"即将{operation} {combinationIds.Count} 个组合，这可能需要一些时间并产生费用。是否继续？",
            yesText: $"确认{operation}", 
            cancelText: "取消");
            
        if (result != true) return;
        
        try
        {
            isExecuting = true;
            var batchResult = await ReasoningCombinationService.BatchExecuteCombinationsAsync(
                instance.InstanceId, combinationIds, maxConcurrency: 3);
            
            Snackbar.Add($"批量{operation}完成：成功 {batchResult.SuccessfullyExecuted}，失败 {batchResult.Failed}，总成本 ${batchResult.TotalCost:F3}", 
                Severity.Success);
            
            await LoadInstanceDetail();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"批量{operation}失败: {ex.Message}", Severity.Error);
        }
        finally
        {
            isExecuting = false;
        }
    }

    private async Task ExportResults()
    {
        if (instance?.Outputs?.Any() != true)
        {
            Snackbar.Add("暂无结果可导出", Severity.Warning);
            return;
        }
        
        try
        {
            var exportData = instance.Outputs
                .Where(o => o.IsSuccess && !string.IsNullOrWhiteSpace(o.GeneratedText))
                .Select(output => new
                {
                    CombinationId = output.InputCombinationId,
                    GeneratedText = output.GeneratedText,
                    Cost = output.CostUSD,
                    GeneratedAt = output.GeneratedAt.ToString("yyyy-MM-dd HH:mm:ss"),
                    InputData = instance.InputCombinations
                        ?.FirstOrDefault(c => c.CombinationId == output.InputCombinationId)
                        ?.DataMap?.ToDictionary(kvp => kvp.Key, kvp => kvp.Value.ToString())
                })
                .ToList();
            
            var json = System.Text.Json.JsonSerializer.Serialize(exportData, new System.Text.Json.JsonSerializerOptions 
            { 
                WriteIndented = true,
                Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping
            });
            
            var fileName = $"ai_inference_results_{instance.InstanceId[..8]}_{DateTime.Now:yyyyMMdd_HHmmss}.json";
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, "application/json", json);
            
            Snackbar.Add($"结果已导出：{exportData.Count} 条记录", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"导出失败: {ex.Message}", Severity.Error);
        }
    }
} 