@using ContentEngine.Core.Inference.Models
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDataEntryService DataService

<link href="Components/Pages/AIInference/Shared/AIInferenceStyles.css" rel="stylesheet" />

<div class="prompt-template-step">
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" Class="mb-4">
        <MudTabPanel Text="模板编辑器" Icon="@Icons.Material.Filled.Edit">
            <div class="pa-4">
                <MudGrid Spacing="4">
                    <MudItem xs="12">
                        <MudTextField @bind-Value="Definition.PromptTemplate.TemplateContent" 
                                     Label="Prompt模板内容" 
                                     Lines="12"
                                     Variant="Variant.Outlined"
                                     Placeholder="输入 Prompt 模板，使用 {{ViewName.field}} 引用数据字段..."
                                     HelperText="使用 {{ViewName.FieldName}} 格式引用数据视图中的字段"
                                     Immediate="true"
                                     OnKeyUp="OnTemplateChanged"
                                     Class="font-mono" />
                    </MudItem>
                    
                    <MudItem xs="12">
                        <MudAlert Severity="Severity.Info" Dense="true">
                            <strong>模板语法示例：</strong><br/>
                            描述角色 {{CharacterView.Name}} 在 {{ScenarioView.Location}} 的行为。<br/>
                            角色属性：力量 {{CharacterView.Strength}}，智力 {{CharacterView.Intelligence}}
                        </MudAlert>
                    </MudItem>
                    
                    <!-- 检测到的视图名称 -->
                    <MudItem xs="12">
                        <div class="d-flex align-center justify-space-between mb-3">
                            <MudText Typo="Typo.subtitle1">检测到的视图引用</MudText>
                            <MudChip T="string" Size="Size.Small" Color="Color.Info">@DetectedViewNames.Count 个视图</MudChip>
                        </div>
                        
                        @if (DetectedViewNames.Any())
                        {
                            <div class="d-flex flex-wrap gap-2">
                                @foreach (var viewName in DetectedViewNames)
                                {
                                    var isValid = AvailableViews.Contains(viewName);
                                    <MudChip T="string" 
                                            Color="@(isValid ? Color.Success : Color.Error)" 
                                            Size="Size.Small"
                                            Icon="@(isValid ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Error)">
                                        @viewName
                                    </MudChip>
                                }
                            </div>
                            
                            @if (MissingViews.Any())
                            {
                                <MudAlert Severity="Severity.Warning" Class="mt-3">
                                    <strong>警告:</strong> 模板中引用了未定义的视图: @string.Join(", ", MissingViews)
                                </MudAlert>
                            }
                        }
                        else
                        {
                            <MudText Typo="Typo.body2" Color="Color.Secondary">模板中尚未包含任何视图引用</MudText>
                        }
                    </MudItem>
                </MudGrid>
            </div>
        </MudTabPanel>
        
        <MudTabPanel Text="预览" Icon="@Icons.Material.Filled.Preview">
            <div class="pa-4">
                <div class="d-flex align-center justify-space-between mb-4">
                    <MudText Typo="Typo.h6">Prompt预览</MudText>
                    <MudButton Variant="Variant.Outlined" 
                              StartIcon="@Icons.Material.Filled.Refresh"
                              OnClick="GeneratePreview"
                              Size="Size.Small">
                        刷新预览
                    </MudButton>
                </div>
                
                <MudPaper Class="pa-4" Outlined="true" Style="min-height: 300px;">
                    @if (!string.IsNullOrWhiteSpace(PreviewContent))
                    {
                        <pre class="preview-content">@PreviewContent</pre>
                    }
                    else
                    {
                        <div class="text-center pa-8">
                            <MudIcon Icon="@Icons.Material.Outlined.Preview" Size="Size.Large" Color="Color.Secondary" />
                            <MudText Typo="Typo.body1" Color="Color.Secondary" Class="mt-2">
                                模板为空或未包含任何视图引用
                            </MudText>
                        </div>
                    }
                </MudPaper>
            </div>
        </MudTabPanel>
    </MudTabs>
    
    <!-- 可用字段参考 - 放在下方便于参考和复制 -->
    <div class="mt-6">
        <MudText Typo="Typo.h6" Class="mb-3">可用数据字段</MudText>
        
        @if (AvailableViews.Any())
        {
            <MudGrid Spacing="3">
                @foreach (var viewName in AvailableViews)
                {
                    var query = Definition.QueryDefinitions.FirstOrDefault(q => q.OutputViewName == viewName);
                    if (query != null)
                    {
                        <MudItem xs="12" md="6">
                            <MudCard Outlined="true" Class="query-card">
                                <MudCardHeader Class="py-2">
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.subtitle1">@viewName</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent Class="py-2">
                                    <div class="d-flex flex-column gap-2">
                                        @foreach (var field in query.SelectFields)
                                        {
                                            <div class="d-flex align-center justify-space-between">
                                                <code class="field-reference">{{@viewName.@field}}</code>
                                                <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" 
                                                              Size="Size.Small"
                                                              OnClick="() => CopyFieldReference(viewName, field)"
                                                              Title="复制字段引用" />
                                            </div>
                                        }
                                    </div>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    }
                }
            </MudGrid>
        }
        else
        {
            <MudAlert Severity="Severity.Info">
                请先在数据查询步骤中定义视图，然后返回此处编写模板
            </MudAlert>
        }
    </div>
    
    <!-- 验证提示 -->
    @if (IsValid)
    {
        <MudAlert Severity="Severity.Success" Class="mt-4">
            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Class="mr-2" />
            Prompt模板配置完成，引用了 @DetectedViewNames.Count 个视图
        </MudAlert>
    }
    else if (HasAttemptedValidation)
    {
        <MudAlert Severity="Severity.Warning" Class="mt-4">
            <MudIcon Icon="@Icons.Material.Filled.Warning" Class="mr-2" />
            请输入Prompt模板内容并确保包含至少一个视图引用
        </MudAlert>
    }
</div>

@code {
    [Parameter] public ReasoningTransactionDefinition Definition { get; set; } = new();
    [Parameter] public EventCallback<bool> OnValidationChanged { get; set; }
    
    private bool HasAttemptedValidation = false;
    private string PreviewContent = "";
    
    private List<string> DetectedViewNames = new();
    private List<string> MissingViews = new();
    private List<string> AvailableViews => Definition.QueryDefinitions.Select(q => q.OutputViewName).ToList();
    
    private bool IsValid => !string.IsNullOrWhiteSpace(Definition.PromptTemplate.TemplateContent) && 
                           DetectedViewNames.Any() && 
                           !MissingViews.Any();

    protected override async Task OnParametersSetAsync()
    {
        DetectViewNames();
        // 避免在参数设置时触发验证，防止无限循环
        // 验证将在用户交互时触发
    }

    private async Task OnTemplateChanged()
    {
        DetectViewNames();
        await ValidateAndNotify();
        HasAttemptedValidation = true;
    }

    private void DetectViewNames()
    {
        var content = Definition.PromptTemplate.TemplateContent ?? "";
        
        // 使用正则表达式检测 {{ViewName.Field}} 格式的引用
        var regex = new System.Text.RegularExpressions.Regex(@"\{\{([^.}]+)\.");
        var matches = regex.Matches(content);
        
        DetectedViewNames = matches
            .Cast<System.Text.RegularExpressions.Match>()
            .Select(m => m.Groups[1].Value.Trim())
            .Distinct()
            .ToList();
        
        // 检查缺失的视图
        MissingViews = DetectedViewNames
            .Where(view => !AvailableViews.Contains(view))
            .ToList();
        
        // 更新定义中的预期输入视图名称
        Definition.PromptTemplate.ExpectedInputViewNames = DetectedViewNames;
    }

    private async Task GeneratePreview()
    {
        var content = Definition.PromptTemplate.TemplateContent ?? "";
        
        // 为每个检测到的视图生成模拟数据并替换
        foreach (var viewName in DetectedViewNames)
        {
            var mockData = await GenerateMockDataForView(viewName);
            
            // 替换所有 {{ViewName.field}} 格式的占位符
            var regex = new System.Text.RegularExpressions.Regex($@"\{{\{{{viewName}\.([^}}]+)\}}}}");
            content = regex.Replace(content, match =>
            {
                var fieldName = match.Groups[1].Value;
                return mockData.ContainsKey(fieldName) ? mockData[fieldName] : $"[未找到字段: {fieldName}]";
            });
        }
        
        PreviewContent = content;
    }

    private async Task<Dictionary<string, string>> GenerateMockDataForView(string viewName)
    {
        // 获取该视图实际选择的字段
        var query = Definition.QueryDefinitions.FirstOrDefault(q => q.OutputViewName == viewName);
        if (query == null) return new Dictionary<string, string>();
        
        try
        {
            // 从对应的Schema中获取实际数据样本
            var sampleData = await DataService.GetDataAsync(query.SourceSchemaName, 0, 1);
            if (sampleData.Any())
            {
                var sample = sampleData.First();
                var mockData = new Dictionary<string, string>();
                
                // 为每个选择的字段提取实际值
                foreach (var fieldName in query.SelectFields)
                {
                    if (sample.ContainsKey(fieldName))
                    {
                        var value = sample[fieldName];
                        mockData[fieldName] = value?.AsString ?? "";
                    }
                    else
                    {
                        mockData[fieldName] = $"[字段 {fieldName} 无数据]";
                    }
                }
                
                return mockData;
            }
        }
        catch (Exception)
        {
            Snackbar.Add($"获取数据失败: {viewName}", Severity.Error);
        }


        return new Dictionary<string, string>();
    }
    

    private async Task CopyFieldReference(string viewName, string fieldName)
    {
        var reference = $"{{{{{viewName}.{fieldName}}}}}";
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", reference);
            Snackbar.Add($"已复制字段引用：{reference}", Severity.Success);
        }
        catch
        {
            // 如果浏览器不支持剪贴板API，回退到提示用户手动复制
            Snackbar.Add($"请手动复制：{reference}", Severity.Info);
        }
    }

    private async Task ValidateAndNotify()
    {
        var isValid = IsValid;
        await OnValidationChanged.InvokeAsync(isValid);
        StateHasChanged();
    }
} 