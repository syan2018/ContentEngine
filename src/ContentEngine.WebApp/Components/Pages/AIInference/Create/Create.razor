@page "/ai-inference/create"
@using ContentEngine.Core.Inference.Services
@using ContentEngine.Core.Inference.Models
@inject IReasoningService ReasoningService
@inject ISchemaDefinitionService SchemaService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<PageTitle>创建推理事务 - ContentEngine</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="pa-4">
    <MudBreadcrumbs Items="breadcrumbItems" Class="mb-4" />
    
    <!-- 简洁的向导卡片 -->
    <MudCard Class="mud-elevation-4">
        <!-- 紧凑的题头 -->
        <MudCardHeader Class="pb-2">
            <CardHeaderContent>
                <div class="d-flex align-center justify-space-between">
                    <div>
                        <MudText Typo="Typo.h5" Class="mb-1">@GetStepTitle()</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">@GetStepDescription()</MudText>
                    </div>
                    <MudChip T="string" Size="Size.Small" Color="Color.Info" Variant="Variant.Outlined">
                        @(currentStep + 1) / 6
                    </MudChip>
                </div>
            </CardHeaderContent>
        </MudCardHeader>
        
        <MudCardContent Class="pt-2">
            <!-- 使用 MudStepper 的原生功能 -->
            <MudStepper @ref="stepper" 
                       @bind-ActiveIndex="currentStep" 
                       Linear="true" 
                       HeaderNavigation="false"
                       OnPreviewInteraction="HandleStepperPreviewInteraction"
                       Class="mb-4">
                
                <MudStep Title="基本信息" 
                        Icon="@Icons.Material.Filled.Info"
                        Completed="@stepValidations[0]">
                    <BasicInfoStep @ref="basicInfoStep" 
                                  Definition="@definition" 
                                  AvailableSchemas="@availableSchemas"
                                  OnValidationChanged="OnStepValidationChanged" />
                </MudStep>
                
                <MudStep Title="数据查询" 
                        Icon="@Icons.Material.Filled.Search"
                        Completed="@stepValidations[1]">
                    <QueryDefinitionStep @ref="queryDefinitionStep"
                                        Definition="@definition" 
                                        AvailableSchemas="@availableSchemas"
                                        OnValidationChanged="OnStepValidationChanged" />
                </MudStep>
                
                <MudStep Title="数据组合" 
                        Icon="@Icons.Material.Filled.CallMerge"
                        Completed="@stepValidations[2]">
                    <DataCombinationStep @ref="dataCombinationStep"
                                        Definition="@definition"
                                        OnValidationChanged="OnStepValidationChanged" />
                </MudStep>
                
                <MudStep Title="Prompt模板" 
                        Icon="@Icons.Material.Filled.TextSnippet"
                        Completed="@stepValidations[3]">
                    <PromptTemplateStep @ref="promptTemplateStep"
                                       Definition="@definition"
                                       OnValidationChanged="OnStepValidationChanged" />
                </MudStep>
                
                <MudStep Title="执行约束" 
                        Icon="@Icons.Material.Filled.Settings"
                        Completed="@stepValidations[4]">
                    <ExecutionConstraintsStep @ref="executionConstraintsStep"
                                             Definition="@definition"
                                             OnValidationChanged="OnStepValidationChanged" />
                </MudStep>
                
                <MudStep Title="确认" 
                        Icon="@Icons.Material.Filled.CheckCircle"
                        Completed="@stepValidations[5]">
                    <ReviewStep Definition="@definition" 
                               EstimatedCost="@estimatedCost"
                               EstimatedTime="@estimatedTime"
                               EstimatedCombinations="@estimatedCombinations" />
                </MudStep>
            </MudStepper>
            
            <!-- 错误信息显示在内容区域 -->
            @if (!string.IsNullOrWhiteSpace(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mb-4" CloseIcon="@Icons.Material.Filled.Close" ShowCloseIcon="true" CloseIconClicked="() => errorMessage = null">
                    @errorMessage
                </MudAlert>
            }
            
            <!-- 保存确认区域 -->
            @if (currentStep == 5 && !isSaving)
            {
                <MudPaper Class="pa-4" Outlined="true">
                    <div class="d-flex align-center justify-space-between">
                        <MudText Typo="Typo.body1" Color="Color.Secondary">
                            请确认以上配置正确无误，点击"创建推理事务"完成设置
                        </MudText>
                        <div class="d-flex gap-2">
                            <MudButton Variant="Variant.Filled" 
                                      Color="Color.Success"
                                      StartIcon="@Icons.Material.Filled.Save"
                                      OnClick="SaveDefinition"
                                      Disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                    <span class="ml-2">保存中...</span>
                                }
                                else
                                {
                                    <span>创建推理事务</span>
                                }
                            </MudButton>
                            
                            <MudButton Variant="Variant.Text" 
                                      Color="Color.Secondary"
                                      OnClick="Cancel">
                                取消
                            </MudButton>
                        </div>
                    </div>
                </MudPaper>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private MudStepper? stepper;
    private int currentStep = 0;
    private bool isSaving = false;
    private bool[] stepValidations = new bool[6];
    private string? errorMessage;
    
    private ReasoningTransactionDefinition definition = new();
    private List<SchemaDefinition> availableSchemas = new();
    
    // 预估数据
    private decimal estimatedCost = 0;
    private TimeSpan estimatedTime = TimeSpan.Zero;
    private int estimatedCombinations = 0;
    
    // 步骤组件引用
    private BasicInfoStep? basicInfoStep;
    private QueryDefinitionStep? queryDefinitionStep;
    private DataCombinationStep? dataCombinationStep;
    private PromptTemplateStep? promptTemplateStep;
    private ExecutionConstraintsStep? executionConstraintsStep;

    private List<BreadcrumbItem> breadcrumbItems = new()
    {
        new BreadcrumbItem("AI推理引擎", href: "/ai-inference", icon: Icons.Material.Filled.Psychology),
        new BreadcrumbItem("创建推理事务", href: null, disabled: true)
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableSchemas();
        InitializeDefinition();
        
        // 初始化完成后进行一次验证
        await Task.Delay(100); // 等待组件渲染完成
        TriggerValidationForCurrentStep();
    }

    private async Task LoadAvailableSchemas()
    {
        try
        {
            availableSchemas = await SchemaService.GetAllSchemasAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"加载Schema列表失败: {ex.Message}", Severity.Error);
        }
    }

    private void InitializeDefinition()
    {
        definition = new ReasoningTransactionDefinition
        {
            Name = "",
            Description = "",
            QueryDefinitions = new List<QueryDefinition>(),
            PromptTemplate = new PromptTemplateDefinition
            {
                TemplateContent = "",
                ExpectedInputViewNames = new List<string>()
            },
            DataCombinationRules = new List<DataCombinationRule>
            {
                new DataCombinationRule
                {
                    Strategy = CombinationStrategy.CrossProduct,
                    MaxCombinations = 1000,
                    ViewNamesToCrossProduct = new List<string>(),
                    SingletonViewNamesForContext = new List<string>()
                }
            },
            ExecutionConstraints = new ExecutionConstraints
            {
                MaxEstimatedCostUSD = 10.0m,
                MaxExecutionTimeMinutes = 30,
                MaxConcurrentAICalls = 5,
                EnableBatching = true,
                BatchSize = 10
            }
        };
    }

    /// <summary>
    /// 处理 MudStepper 的导航和验证事件
    /// </summary>
    private async Task HandleStepperPreviewInteraction(StepperInteractionEventArgs args)
    {
        errorMessage = null;
        
        switch (args.Action)
        {
            case StepAction.Complete: // 完成当前步骤
                if (!await ValidateCurrentStep(args.StepIndex))
                {
                    args.Cancel = true;
                    StateHasChanged(); // 立即刷新UI显示错误消息
                    return;
                }
                
                // 步骤4完成时进行预估
                if (args.StepIndex == 4)
                {
                    await PerformEstimation();
                }
                
                stepValidations[args.StepIndex] = true;
                StateHasChanged(); // 刷新步骤完成状态
                break;
                
            case StepAction.Activate: // 激活（跳转到）某个步骤
                if (args.StepIndex > currentStep)
                {
                    // 防止跳跃到未完成的步骤
                    for (int i = currentStep; i < args.StepIndex; i++)
                    {
                        if (!stepValidations[i])
                        {
                            Snackbar.Add($"请先完成第{i + 1}步", Severity.Warning);
                            args.Cancel = true;
                            return;
                        }
                    }
                }
                break;
        }
    }

    /// <summary>
    /// 验证指定步骤
    /// </summary>
    private async Task<bool> ValidateCurrentStep(int stepIndex)
    {
        try
        {
            return stepIndex switch
            {
                0 => await ValidateStep1(),
                1 => await ValidateStep2(),
                2 => await ValidateStep3(),
                3 => await ValidateStep4(),
                4 => await ValidateStep5(),
                5 => true, // 确认步骤总是有效的
                _ => false
            };
        }
        catch (Exception ex)
        {
            errorMessage = $"验证步骤{stepIndex + 1}时出错: {ex.Message}";
            StateHasChanged(); // 立即刷新UI显示错误消息
            return false;
        }
    }

    private async Task<bool> ValidateStep1()
    {
        if (string.IsNullOrWhiteSpace(definition.Name))
        {
            errorMessage = "请输入推理事务名称";
            return false;
        }
        
        if (string.IsNullOrWhiteSpace(definition.Description))
        {
            errorMessage = "请输入推理事务描述";
            return false;
        }
        
        return true;
    }

    private async Task<bool> ValidateStep2()
    {
        if (!definition.QueryDefinitions.Any())
        {
            errorMessage = "请至少添加一个数据查询定义";
            return false;
        }
        
        return true;
    }

    private async Task<bool> ValidateStep3()
    {
        if (!definition.DataCombinationRules.Any())
        {
            errorMessage = "请设置数据组合规则";
            return false;
        }
        
        var rule = definition.DataCombinationRules[0];
        if (!rule.ViewNamesToCrossProduct.Any() && !rule.SingletonViewNamesForContext.Any())
        {
            errorMessage = "请至少设置一个叉积视图或单例上下文";
            return false;
        }
        
        return true;
    }

    private async Task<bool> ValidateStep4()
    {
        if (string.IsNullOrWhiteSpace(definition.PromptTemplate.TemplateContent))
        {
            errorMessage = "请输入Prompt模板内容";
            return false;
        }
        
        if (!definition.PromptTemplate.ExpectedInputViewNames.Any())
        {
            errorMessage = "Prompt模板必须包含至少一个视图引用";
            return false;
        }
        
        return true;
    }

    private async Task<bool> ValidateStep5()
    {
        // 执行约束总是有效的，有默认值
        return true;
    }

    private void OnStepValidationChanged(bool isValid)
    {
        stepValidations[currentStep] = isValid;
        
        // 用户编辑后清除错误消息，避免显示过时的错误信息
        if (!string.IsNullOrWhiteSpace(errorMessage))
        {
            errorMessage = null;
        }
        
        StateHasChanged();
    }

    private string GetStepTitle()
    {
        return currentStep switch
        {
            0 => "基本信息",
            1 => "数据查询定义",
            2 => "数据组合规则", 
            3 => "Prompt模板设计",
            4 => "执行约束设置",
            5 => "确认推理事务定义",
            _ => ""
        };
    }

    private string GetStepDescription()
    {
        return currentStep switch
        {
            0 => "设置推理事务的名称、描述和主体Schema",
            1 => "定义从哪些数据源获取数据，以及如何筛选和选择字段",
            2 => "设置如何组合多个数据视图，包括叉积规则和单例上下文",
            3 => "创建用于AI生成的Prompt模板，使用占位符引用数据视图中的字段",
            4 => "设置执行限制，如最大成本、执行时间和并发调用数",
            5 => "确认所有设置并保存推理事务定义",
            _ => ""
        };
    }

    private async Task PerformEstimation()
    {
        try
        {
            estimatedCost = await ReasoningService.EstimateExecutionCostAsync(definition.Id ?? "temp");
            estimatedTime = await ReasoningService.EstimateExecutionTimeAsync(definition.Id ?? "temp");
            estimatedCombinations = await ReasoningService.EstimateCombinationCountAsync(definition.Id ?? "temp");
        }
        catch
        {
            // 使用简单估算作为后备
            estimatedCombinations = Math.Min(1000, definition.DataCombinationRules.FirstOrDefault()?.MaxCombinations ?? 1000);
            estimatedCost = estimatedCombinations * 0.02m;
            estimatedTime = TimeSpan.FromMinutes(Math.Ceiling(estimatedCombinations / (definition.ExecutionConstraints.MaxConcurrentAICalls * 10.0)));
        }
    }

    private async Task SaveDefinition()
    {
        try
        {
            isSaving = true;
            errorMessage = null;

            // 最终验证
            if (!await ValidateCurrentStep(5))
            {
                StateHasChanged(); // 刷新UI显示验证错误
                return;
            }

            // 保存定义
            await ReasoningService.CreateDefinitionAsync(definition);
            
            Snackbar.Add("推理事务定义创建成功", Severity.Success);
            Navigation.NavigateTo("/ai-inference");
        }
        catch (Exception ex)
        {
            errorMessage = $"创建推理事务定义失败: {ex.Message}";
            StateHasChanged(); // 立即刷新UI显示错误消息
        }
        finally
        {
            isSaving = false;
            StateHasChanged(); // 确保保存状态更新
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/ai-inference");
    }

    private void TriggerValidationForCurrentStep()
    {
        // 手动触发当前步骤的验证，避免循环依赖
        var isValid = currentStep switch
        {
            0 => !string.IsNullOrWhiteSpace(definition.Name) && !string.IsNullOrWhiteSpace(definition.Description),
            1 => definition.QueryDefinitions.Any(),
            2 => definition.DataCombinationRules.Any() && 
                 (definition.DataCombinationRules[0].ViewNamesToCrossProduct.Any() || 
                  definition.DataCombinationRules[0].SingletonViewNamesForContext.Any()),
            3 => !string.IsNullOrWhiteSpace(definition.PromptTemplate.TemplateContent) && 
                 definition.PromptTemplate.ExpectedInputViewNames.Any(),
            4 => true, // 执行约束有默认值
            5 => true, // 确认步骤总是有效的
            _ => false
        };
        
        stepValidations[currentStep] = isValid;
        StateHasChanged();
    }
} 