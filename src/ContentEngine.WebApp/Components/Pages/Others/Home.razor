@page "/"
@using Microsoft.SemanticKernel
@using ConfigurableAIProvider.Services
@using ConfigurableAIProvider.Services.Factories
@inject IAIKernelFactory AiKernelFactory
@attribute [StreamRendering(true)]

<PageTitle>Home</PageTitle>

<h1>Hello, AI world!</h1>

@if (_isLoading)
{
    <p><em>Loading AI and Plugin responses...</em></p>
}
else if (!string.IsNullOrEmpty(_errorMessage))
{
    <p style="color: red;">Error: @_errorMessage</p>
}
else
{
    <p>AI (Prompt) Response: <strong>@_aiResponse</strong></p>
    <hr />
    <p>Test Plugin (C#) Response: <strong>@_pluginResponse</strong></p>
    <hr />
    <p>Communicator Plugin (Semantic) Response: <strong>@_communicatorResponse</strong></p>
}

Welcome to your new app.

@code {
    private bool _isLoading = true;
    private string? _aiResponse;
    private string? _pluginResponse;
    private string? _communicatorResponse;
    private string? _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = false;

        /*
        _isLoading = true;


        try
        {
            var kernel = await AiKernelFactory.BuildKernelAsync("SimpleChat");

            if (kernel == null)
            {
                throw new InvalidOperationException("Failed to create the AI Kernel for agent 'SimpleChat'.");
            }

            if (!kernel.Plugins.Contains("TestPlugin"))
            {
                Console.WriteLine("Warning: TestPlugin was not found in the loaded kernel plugins.");
            }
            if (!kernel.Plugins.Contains("Communicator"))
            {
                Console.WriteLine("Warning: Communicator plugin was not found in the loaded kernel plugins.");
            }

            var promptResult = await kernel.InvokePromptAsync("Briefly introduce yourself.");
            _aiResponse = promptResult.GetValue<string>();

            try
            {
                var pluginArgs = new KernelArguments
                {
                    ["name"] = "Syan"
                };
                var pluginResult = await kernel.InvokeAsync("TestPlugin", "SayHello", pluginArgs);
                _pluginResponse = pluginResult.GetValue<string>();
            }
            catch (Exception ex)
            {
                _pluginResponse = $"Error invoking TestPlugin: {ex.Message}";
                Console.WriteLine(ex);
            }

            try
            {
                var commArgs = new KernelArguments
                {
                    { "input", "你好吗？" },
                    { "history", "" }
                };
                var commResult = await kernel.InvokeAsync("Communicator", "ChatWithUser", commArgs);
                _communicatorResponse = commResult.GetValue<string>();
            }
            catch (Exception ex)
            {
                _communicatorResponse = $"Error invoking Communicator: {ex.Message}";
                Console.WriteLine(ex);
            }

        }
        catch (Exception ex)
        {
            await Console.Error.WriteLineAsync($"Error during AI/Plugin invocation setup: {ex}");
            _errorMessage = $"Failed to get responses: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
        */
    }
}
