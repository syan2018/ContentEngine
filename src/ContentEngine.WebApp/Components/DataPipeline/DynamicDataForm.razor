@using ContentEngine.WebApp.Core.DataPipeline.Models
@using System.Globalization

@if (Schema == null || FormData == null)
{
    <p><em>Schema definition and FormData are required.</em></p>
    return; // Exit if parameters not provided
}

@foreach (var field in Schema.Fields)
{
    <div class="mb-3" @key="field.Name">
        <label class="form-label">@field.Name (@field.Type)
            @if (field.IsRequired) { <span class="text-danger">*</span> }
        </label>
        @switch (field.Type)
        {
            case FieldType.Text:
            case FieldType.Reference:
                <input type="text" class="form-control" 
                       value="@GetStringValue(field.Name)" 
                       @onchange="(ChangeEventArgs e) => { UpdateFormData(field.Name, field.Type, e.Value?.ToString()); }" 
                       placeholder="@(field.Type == FieldType.Reference ? "Enter Reference ID (ObjectId string)" : "")" />
                break;
            case FieldType.Number:
                 <input type="number" step="any" class="form-control" 
                       value="@GetNumberValue(field.Name)" 
                       @onchange="(ChangeEventArgs e) => { UpdateFormData(field.Name, field.Type, e.Value?.ToString()); }" />
                break;
            case FieldType.Boolean:
                 <input type="checkbox" class="form-check-input" 
                       checked="@GetBoolValue(field.Name)" 
                       @onchange="(ChangeEventArgs e) => { UpdateFormData(field.Name, field.Type, e.Value); }" /> // Checkbox passes bool directly
                break;
            case FieldType.Date:
                 <input type="date" class="form-control" 
                       value="@GetDateValue(field.Name)?.ToString("yyyy-MM-dd")" 
                       @onchange="(ChangeEventArgs e) => { UpdateFormData(field.Name, field.Type, e.Value?.ToString()); }" />
                break;
        }
    </div>
}

@code {
    [Parameter, EditorRequired] public SchemaDefinition? Schema { get; set; }
    [Parameter, EditorRequired] public Dictionary<string, object?>? FormData { get; set; }

    // Event callback to notify parent about changes
    [Parameter] public EventCallback OnFieldChanged { get; set; }

    protected override void OnParametersSet()
    {
        ArgumentNullException.ThrowIfNull(Schema);
        ArgumentNullException.ThrowIfNull(FormData);
    }

    // Helper methods to get typed values for binding (with casting)
    private string? GetStringValue(string fieldName) => FormData!.TryGetValue(fieldName, out var val) ? val as string : null;
    private double? GetNumberValue(string fieldName) => FormData!.TryGetValue(fieldName, out var val) ? val as double? : null;
    private bool GetBoolValue(string fieldName) => FormData!.TryGetValue(fieldName, out var val) && val is bool b ? b : false;
    private DateTime? GetDateValue(string fieldName) => FormData!.TryGetValue(fieldName, out var val) ? val as DateTime? : null;

    // Centralized method to update the FormData dictionary from input changes
    private void UpdateFormData(string fieldName, FieldType fieldType, object? value)
    {
        object? parsedValue = null;
        string? stringValue = value?.ToString(); // Common case for most inputs except checkbox

        try
        {
             switch (fieldType)
            {
                case FieldType.Text:
                case FieldType.Reference:
                    parsedValue = stringValue;
                    break;
                case FieldType.Number:
                    if (double.TryParse(stringValue, NumberStyles.Any, CultureInfo.InvariantCulture, out var number))
                        parsedValue = number;
                    else if (!string.IsNullOrEmpty(stringValue)) // Handle invalid input - maybe log? keep null?
                         parsedValue = null; // Keep existing value or set to null?
                    // Only update if TryParse succeeds or input is empty
                     if (double.TryParse(stringValue, NumberStyles.Any, CultureInfo.InvariantCulture, out number))
                        parsedValue = number;
                    else if (string.IsNullOrEmpty(stringValue))
                        parsedValue = null; // Allow clearing the field
                    else return; // Keep the old value if parsing fails and input isn't empty
                    break;
                case FieldType.Boolean:
                     parsedValue = value is bool b ? b : false; // Checkbox provides bool directly
                    break;
                case FieldType.Date:
                    if (DateTime.TryParse(stringValue, out var date))
                        parsedValue = date;
                    else if (!string.IsNullOrEmpty(stringValue)) // Handle invalid input
                        parsedValue = null; // Or keep existing? Maybe provide feedback?
                     if (DateTime.TryParse(stringValue, out date))
                        parsedValue = date;
                    else if (string.IsNullOrEmpty(stringValue))
                         parsedValue = null;
                    else return; // Keep old value
                    break;
            }
            FormData![fieldName] = parsedValue; // Update the dictionary
            NotifyFieldChanged(); // Notify the parent component
        }
        catch (Exception ex)
        { 
            // Log parsing/update errors if necessary
            Console.WriteLine($"Error updating form data for {fieldName}: {ex.Message}");
        }
       
    }

    private async Task NotifyFieldChanged()
    {
        if (OnFieldChanged.HasDelegate)
        {
            await OnFieldChanged.InvokeAsync();
        }
    }
} 